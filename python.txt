
Importing module from terminal

import sys
>>> sys.path.append(r'C:\Users\ASUS\Desktop\PythonCodeFile\PokerGame\test') 
>>> from Main import deck,cards,hand1,hand2,player1,player2
































tabbedstring='1\t2\t3\t4'
print(tabbedstring)

This code split screen over several line

anothersplitstring="""This string
has been split over several lines"""
print(anothersplitstring)


When you put \ between them then its goes into same line.
anothersplitstring="""This string\
has been split\ over several lines"""
print(anothersplitstring)



 
 
greeting='hello'
name=input('Please enter your name')
print(greeting+' '+name)

here greeting and name are variable


Here type is variable type to know which type of variable we are storing
	print (type(greeting))
print (type(age))



 







 

 

 

	 


 

a=3
b=12
print(a+b)
print(b-b)
print(a*b)
print(a/b)
print()
for i in range(1,b):
    print(i)
i=1
print(i)
i=2
print(i)
i=3
print(i)
i=4
print(i)
print((((a+b)/3)-5)+12)
c=a+b
d=c/3
e=d-5
print(e+12)
parrot="Australian Bird"
print(parrot)
print(parrot[3])
parrot="Australian Bird"
print(parrot)
print(parrot[3])
print(parrot[4])
print(parrot[9])
print(parrot[7])
print(parot[9])

Negative indexing

print(parrot[-1])
print(parrot[-2])
print(parrot[-3])
print(parrot[-4])
print(parrot[-5])
print(parrot[-6])
From Last 1 last 2 last 3 last 4 last 5 characters

print(parrot[8-5])
print(parrot[8-4])
print(parrot[15-6])
print(parrot[13-6])
print(parrot[11-2])

upto 5 and not including 6
print(parrot[0:6])
print(parrot[3:6])
Austra       Tra
print(parrot[:6])
	
It prints 1st to 5th characters
 


print(parrot[11:15])
It prints from 11th to 14th character
print(parrot[11:])
It prints 11th to last character

print(parrot[:5]+parrot[5:])
It prints all the characters result  Australian Bird


print(parrot[:])
result  Australian Bird. It print entire string

Here -4 is from last to 4th character and -2 from last 2nd character
Here 13 is from 13th character
 
print(parrot[-4:-2])
print(parrot[-4:13])



 

	print(parrot[0:6:2])
print(parrot[0:6:3])



 

	


Here result starts with second character which is , and goes upto the end and take every 4th character
So the result would be       ,,,,

number='1,234,234,553,123,123'
print(number[1::4])

It goes into backward direction

letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[25:0:-1]
print(backward)

result would be  zyxwvutsrqponmlkjihgfedcb here it would excluded 0 means a


letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[25::-1]
print(backward)
result would be zyxwvutsrqponmlkjihgfedcba

It would take the entire string and goes in backward and result would be same as above

letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[::-1]
print(backward)


letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[16:13:-1]

Here result would be qpo here I would start from 16th character to 13th character and would goes towards -1 direction i.e. reverse direction 
letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[4::-1]

print(backward)
Here I would start from 5th character toward 1st and in reverse order and result would be edcba
letter='abcdefghijklmnopqrstuvwxyz'
backward=letter[25:17:-1]

print(backward)
Here the question was to slice last 8 character. So last character is 25th and 8th from last if 17th character and it is in reverse order so -1

Here from last to -4

print(letter[:-4])

Here from last to -4 character towards -1 direction

print(letter[:-4:-1])



 


	]

 

 

string1 = "He is the"
string2 = "main player"
string3 = "in the country"

print(string1+string2+string3)

print('day' in today)
print('tues' in today)
print('friday' in today)
here True True False will be output
 
age=30
print('He is the '+str(age)+' main player in the field')
str is used to add string to a number by converting number to a string.
print('He is {0} year old'.format(age))
He is 30 year old
print("There are {0} days in {1},{2},{3},{4},{5},{6} and {7}".format(31,"jan","Mar","Mau","Jul","Aug","Oct","Dec"))
Output would be There are 31 days in jan,Mar,Mau,Jul,Aug,Oct and Dec
print("There are {0} day in a year".format(365))

print("Jan{1},Feb{0},Mar{2},April{1},May{2},June{1},July{2},August{1},September{3},October{1},November{2},December{1}".
      format(28,30,31))

In the following code we used for loop where I in range(1,13).Here we used {0},{1},{2} in between the line  and used .format for using. So what is meaning of I in range(1,13) it means I would print 13 times. In the following code.

for i in range(1,13):
    print("No.{0} squared is {1} and cube is {2}".format(i, i**2, i**3))

In the following code we used for loop from 1 to 13 and then print at string with .format in first part we used {0:2} and that is from 1 to 2 character and second part we used {1:3} it means from minimum two and maximum three character and 3rd part {2:4} it is minimum 2 and maximum 4 character.
for i in range(1,13):
    print("No.{0:2} squared is {1:3} and cube is {2:4}".format(i,i**2,i**3))
    print()


In the following code less than sign is used to left alignment.


for i in range(1,13):
    print("No.{0:2} squared is {1:<3} and cube is {2:<4}".format(i,i**2,i**3))
    print()

In the following code we used > sign which is used to right aligned.


for i in range(1,13):
    print("No.{0:2} squared is {1:>3} and cube is {2:>4}".format(i,i**2,i**3))
    print()

In the following code we used caret sign which is like a cap which is used for center alignment. 

for i in range(1,13):
    print("No.{0:2} squared is {1:^3} and cube is {2:^4}".format(i,i**2,i**3))
    print()

In the following code we formatted pie values to 50 floating point 

print("Pi is approximately {0:12.50f}".format(22/7))
print("Pi is approximately {0:52.50f}".format(22/7))
print("Pi is approximately {0:62.50f}".format(22/7))
print("Pi is approximately {0:72.50f}".format(22/7))

In the following code we defined two variable called age and name and in the variable name age we defined its value 24 and to the variable name is defined its values  Vijay  so in the print section we wrote name f string than the inside f clause we can combine age to string.
age=24
print(age)
Name="Vijay"
print(Name+f" is {age} years old")

In the following code we also combined sting to a number we used clause f double parenthesis then inside curly bracket we used expression which is 22/7 and not variable after that double quote and how many place we want to save for that number and after that floating point which is in the following case is 50.
	print(f"Pi is approximately {22/7:12.50}")
pi=22/7
print(f"Pi is approximately {pi:12.50}")
In the above case we used pi as variable and gave it values 22/7 than in the print section we used f string clause and inside that we used pi inside the curly bracket as a expression which is a variable.

In the following code we created a for loop for variable I and it ranges from 1 to 13 after that in next line inside print inside square bracket we would enter values inside the dot format and in 3rd line of code we print astrik sign multiply by 80.


for i in range(1,13):
    print("No {} squared is {} and cubed is {:4}".format(i,i**2,i**3))
    print("*"*80)


Now in the following code we used input parameter and variable.We used variable Name and inside Name variable we gave input parameter. IN the second variable we used age as variable in inside  that variable we assigned a input parameter for age and here we used format parameter in the 3rd line of code we used print and variable age whatever input user feed inside the that parameter.
Name=input("Please enter your name")
age=input("How old are you,{0}?".format(Name))
print(age)

In the following code we used if statement in codes below we converted age string to integer with the clause in and then we used if statement and then else statement in else statement we used .format clause and differentiate that with age.


Name=input("Please enter your name")
age=int(input("How old are you,{0}?".format(Name)))
print(age)
if age>=18:
    print("You are old enough to vote")
else:
    print("Please come back in {0} years".format(18-age))

In the following piece of code age introduced elif in-between if and else statement

Name=input("Please enter your name")
age=int(input("How old are you,{0}?".format(Name)))
print(age)
if age<=18:
    print("Please come back in {0},years?".format(18-age))
elif age==900:
    print("Sorry")
else:
    print("You are old enough to vote")


In the following piece of code we selected a variable called answer and assigned it a value 5 and then we print then another variable guess and assigned it a user defined input.Then we put if elif and else statement if guess is less than answer than one print statement if guess is greater than answer then another print  statement an then last else statement.
	
answer=5
print("Please guess number between 1 and 10")
guess=int(input())
if guess<answer:
    print("Please guess higher")
elif guess>answer:
    print("Please guess lower")
else:
    print("You got it first ti

In the following piece of code we used some complex if elif else statement in 3rd line of code t

answer=5
print("Please guess number between 1 and 10")
guess=int(input())
if guess<answer:
    print("Please guess higher")
    guess=int(input())
    if guess==answer:
        print("You got it first time")
    else:
       print ("Sorry, you have not guessed correctly")
elif guess>answer:
    print("Please guess lower")
    guess=int(input())
    if guess==answer:
        print("you got it first time")
    else:
        print("Sorry, you have not guessed correctly")
else:
    print("You got it first time")

 

 
In the following piece of code we created three two if else statement inside the if statement in first if statement higher and lower condition and in the 2nd if condition equal condition.
answer=5
print("Please guess number between 1 and 10")
guess=int(input())
if guess!=answer:
    if guess<answer:
        print("Please guess higher")
    else:
        print("Please guess lower")
    guess=int(input())
    if guess==answer:
        print("Well done, you guessed it")
    else:
        print("Sorry, you have not guessed,correctly")
else:
    print("You got if first time")

IN the following code we used and condition inside if condition.
age=int(input("How old are you?"))
if age>=16 and age<=65:
    print("have a good day at work?")


Following is the Simplify chained condition 
age=25
if 16<=age<=65:
    print("Have a good day at work?")
else:
    print("Enjoy your free time")
print("-"*80)
if age<16 or age>65:
    print("Enjoy your free time")
else:
    print("Have a good day at work?")



 


 



 



	day="Monday"
temperature=30
raining=True
if day=="Saturday" and temperature>27 or not raining:
    print("Go Swimming")
else:
    print("Learn Python")


day="Monday"
temperature=30
raining=True
if day=="Saturday" and temperature>27 and not raining:
    print("Go Swimming")

else:
    print("Learn Python")


day="Monday"
temperature=30
raining=True
if day=="Saturday" or temperature>27 or not raining:
    print("Go Swimming")
else:
    print("Learn Python")


 

In the following code we used the 
name=input("Please enter your name")
if name:
    print("Hello,{}".format(name))
else:
    print("Are you the mwan with no name")
    

In the following piece of code we used .format and ‘in’ clause inside the if clause.

parrot="Norwegian blue"
letter=input("Enter a character")
if letter in parrot:
    print("{} is in {}".format(letter,parrot))
else:
    print("I don't have that letter")

In the following piece of code we used ‘not in’ clause.
activity=input("What would you lke to do today?")
if "cinema" not in activity:
    print("But I want to go to the cinema")


age=int(input("Please, enter your age?"))
if 18< age <30:
    print("Welcome, to the board")
else:
    print("Sorry, you are not eligible."




 


parrot="Norwegian Blue"
for character in parrot:
    print(character)


 


In the following piece of code we created a variable called separator and assigned it a value empty string. After that we used for loop and if not char.isnumeric we used after that we used add separator to character after that we print separator.


number=input("please enter a series of nnumbers, using any separator you like")
separator=""
for char in number:
    if not char.isnumeric():
        separator=separator+char
print(separator)

In the following code we used isupper clause to get if there is any upper character in the alphabet.
quote="AbcD"
for char in quote:
    if char.isupper():
      print(char)



In the following code we used for loop and then print statement inside that print statement I used. The output of following code would not includes 20 its basically upto but not included 20.
for i in range(1,20):
    print("i in now{}".format(i))
    

In the following code number from 10 to 19 would be added.
for i in range(10,20):
    print("i in now{}".format(i))

	
We can also write code in the following form if we want to start from 0 which is default and we don’t need to mention it.
for i in range(10):
    print("i is now {}".format(i))
          
IN the following two piece of code we jumped into every 2nd value and in another piece of code is jumped over every 2nd column but in reverse way.

for i in range(0,10,2):
    print("i is now{}".format(i))
for i in range(10,0,-2):
    print("i in now{}".format(i))
    

In the following piece of code we include for loop inside for loop its like 


for i in range(1,13):
    for j in range(1,13):
        print("{0}times {1} is {2}".format(j,i,i*j))
    print("---")


	



In the following line of code we created a variable called shopping_list and into that list we enter six number of strings then we created a for loop in item in shopping_list variable and we entered print. The thing to note that we inside print clause we created Buy as String and then we added item.




shopping_list=["milk","pasta","eggs","spam","bread","rice"]
for item in shopping_list:
    print("Buy "+item)

In the following list of code we created a variable called shopping_list and in this list we created a list of items and we created a for loop and inside that for loop we created ‘item’ as variable now thing to consider is that in visual basic we need to declare variable item but here we don’t need to do that we can just we that variable and in shopping_list. Now inside that for loop we created a if function if item equal to spam then continue and skip that part and print.
shopping_list=["milk","pasta","eggs","spam","bread","rice"]
for item in shopping_list:
    if item=="spam":
        continue
    print("Buy "+item)

shopping_list=["milk","pasta","eggs","spam","bread","rice"]
for item in shopping_list:
    print("Buy "+item)

In the following code we entered list of item inside the shopping_list variable then we created for loop item.if item==”spam”: then we break that point and then entered print inside that print statement we created buy and item.


shopping_list=["milk","pasta","eggs","spam","bread","rice"]
for item in shopping_list:
    if item=="spam":
        break
    print("Buy "+item)





In the following code we create a variable called shopping_list and assigned to 6 values then in next line we declared another variable item_to_find and found_at and to former variable gave a string which we want to want in our case it is span in the next line found_at variable we assigned it None which is Null in sql language than in the for loop we created another loop called index in range clause we used len function after that we used if function in which we used if shopping_list [index]=item_to_find then we stored index value to the found_at variable. After that we used print statement and inside that print statement we stored we wrote the sentence and empty curly bracket where we would stored the values stored in found_at variable after that dot format and inside that dot format we inserted the variable where we wanted to stored the value.
shopping_list=["milk","pasta","eggs","spam","bread","rice"]
item_to_find='spam'
found_at=None

for index in range(len(shopping_list)):
    if shopping_list[index]==item_to_find:
        found_at=index
print("Item found at position {}".format(found_at))

In the following code we knew the length of the item in the string 

shopping_list=["milk","pasta","eggs","spam","bread","rice"]
print(len(shopping_list))


In the following code we created a variable called shopping_list and assigned it list of string in the next line of code we create we create another variable called item_to_find and assigned a value ‘milk’. In the next line of code we create another variable and assigned it None its null in sql then we created if condition if item in shopping list then found_at variable would be index number of that string in the next if condition we created if found_at variable has some value i.e. that string in the shopping list string then print this else print that..
shopping_list=["milk","pasta","eggs","spam","bread","rice"]
item_to_find='milk'
found_at=None
if item_to_find in shopping_list:
    found_at=shopping_list.index(item_to_find)
if found_at is not None:
    print("Item found at position {}".format(found_at))
else:
     print("{} not found".format(item_to_find))





 

	 


In the following piece of code we created for loop by variable I in range 0-10 and in the next line we created print statement and in that statement we 
for i in range(10):
    print("i is now {}".format(i))
    

In the following code we created a variable called I and assigned it value 0 after that we created while loop till variable i<10 the in the next line of code we write print clause inside t that clause in entered print statement then after that we increased the value of i by 1.
i=0
while i<10:
    print("i is now{}".format(i))
    i=i+1

In the following  code code we created a variable called available and assigned it values and then created a variable with empty string after that we created a while loop loop while chosen exit is not in available exit then when entered value inside the variable would match the value inside the variable available then print line would execute 

available_exits=["north","south","east","west"]
chosen_exit=""
while chosen_exit not in available_exits:
    chosen_exit=input("Please choose a direction")
print("arent you glasd you got out of there")


 














In the following line of code we created same varaiable and gave it list of values then then created another variable gave it empty string. Then created a while loop till input not in available_exits then after that we created a if condition and inside that if condition we created a criteria if input values would meet that criteria then print specified value then break else print another values.


	available_exits=["north","south","east","west"]
chosen_exit=""
while chosen_exit not in available_exits:
    chosen_exit=input("Please choose a direction")
    if chosen_exit.casefold()=="quit":
         print("Game Over")
    break
print("arent you glasd you got out of there")

In the following code we wanted all the number which are not equal to number which are divisible by 3 and 5.
for i in range(21):
    if i%3!=0 and i%5!=0:
         print(i)

In the following code we created a guessing game with the while loop it would loop until condition is met loop we created a while loop till guess variable is not equal to answer variable and after that we already created and assigned empty string to guess variable inside the while loop we enter values by user into the guess variable then we created if condition if it is equal to answer then print one statement else and inside else we again created if condition inside that if condition if lower then create statement that tell user about it if it higher it would create another statement then again assigned guess variable.


answer=random.randint(1,highest)
print("Please guess number between 1 and {}:".format(highest))
guess=””
while guess!=answer:
    guess=int(input())
    if guess==answer:
        print("You get it first time")
    else:
        if guess<answer:
            print("Please guess higher")
        else:
             print("Please guess lower")
guess=int(input())


we slightly modified the above code in the above code we assigned guess variable empty string while in the following code we assigned guess variable 0 number and inside the while variable we added another if condition if user enters 0 and this break the code.

import random
highest=10
answer=random.randint(1,highest)
print("Please guess number between 1 and {}:".format(highest))
guess=0
while guess!=answer:
    guess=int(input())
    if guess==0:
        break
    if guess==answer:
        print("You get it first time")
    else:
        if guess<answer:
            print("Please guess higher")
        else:
             print("Please guess lower")
guess=int(input())






 In the following  code we created a guessing game in the following code we created a variable highest and assigned a value 10, in the next line of code we used random module which we imported in first line of code random and randint. It is inside that module this is function of  the function of that module.and enter value between 1 and highest which we defined earlier. Then in next line of code we print a statement to tell user to enter number between  1 and highest number which we defined with the help of dot format function. After that in guess variable we entered values from user then we created if condition if guess variable is equal to answer variable which we used to generated random number then print the statement else if condition not satisfied then other statement and then again generated input statement with guess variable after that is that new entered value it equal to answer variable then generated positive statement else generate negative statement.
        import random
highest=10
answer=random.randint(1,highest)
print("Please guess number between 1 and {}:".format(highest))
guess=int(input())
if guess==answer:
    print("You get it first time")
else:
    if guess<answer:
        print("Please guess higher")
    else:
        print("Please guess lower")
    guess=int(input())
    if guess== answer:
        print("well done,you guessed it correctly")
    else:
        print("Sorry, you have not gueesed correctly.")



 
	 



	 






low=1
high=1000
print("Please think of a number between {} and {}".format(low,high))
input("Please enter to start")
guesses=1
while True:
    guess=low+(high-low)//2
    high_low=input("My guess is {}.Should I guess higher or lower?.Enter h or l,or c if my guess was correct".
                     format(guess)).casefold()
    if high_low=="h":
       low=guess+1
    elif high_low=="l":
        high=guess-1
    elif high_low=="c":
          print("I got it in {} guess".format(guesses))
    else:
          print("Please enter h,l or c")
    guesses=guesses+1
In the above code we defined a variable called low and assigned it a values then we created another variable high and assign it another higher value. After that we entered print statement inside that statement we created formatted string. Then we entered input clause to and we did not assigned it any values it then we created guesses variable to count the number of attempt and assigned it started value 1 then we initiated while loop here to noted that we write True after while clause to make the while loop looping infinite number then we created a variable guess and assigned it a value based on formula after that we created another variable high_low and asked user to input various parameter for high low and correct then user based variable which is high_low we created if condition if high_low parameter is H then add guess +1 to low variable if user input l to high_low variable then high to guess -1 and and another condition if entered values equal to c then print then statement and in the else statement we created print statement and in the last line of code as increased guesses to 1.

 

guess="Good "
guess+="Monrning"
guess*=5
print(guess)

In the above line of code we created a variable called guess and assigned a string value then with augmented assignment we added another string to the original string then multiply it with five times and then in the last line of code we printed guess. In the 3rd line of code we multiple it by 5 i.e. it would not print it with 5 times.
In the following line of code we created a variable called and assigned it to string values then we created another variable and assigned it to empty string then we created while loop till variable chosen_exit not in available variable in next line of code we created that variable and asked user to input into it now here starts the fun part we created a if condition and if user input is quit then print a exit statement and break the loop the point to note here is we wrote break inside if condition after that we created else clause if condition is met which is in while loop.
available_exits=["north","south","east","west"]
chosen_exit=""
while chosen_exit not in available_exits:
    chosen_exit=input("Please choose a direction")
    if chosen_exit.casefold()=="quit":
        print("Game Over")
        break
else:
    print("arent you glasd you got out of there")













In the following  piece of code we printed five statement with the help of print clause and then in 2nd print statement we concatenated string to a number with the help of \t clause after that we started while loop and write True after that and that is because we want to run this loop forever. Inside the while loop we created a variable called choice and asked user input to assign it after that we created if condition just like in above code we created if condition  if choice variable is 0 the break the loop else Now here to note in elif statement we said if choice variable input in and after that we created list of option we wanted to mention after that we write statement we that condition is true then print that particular statement and after that else statement if user input any other statement other than mentioned then again print entire set of statement again and this loop will condition because we mentioned while True in while statement.

print("Please choose your option from list below")
print("1:\tlearn Python")
print("2:\tlearn Java")
print("3:\tGo Swimming")
print("4:\tHave dinner")
print("5:\tGo to Bed")
print("0:\t Exit")

while True:
    choice=input()
    if choice=="0":
        break
    elif choice in"12345":
        print("You chose.{}".format(choice))
    else:
        print("Please choose your option from list below")
        print("1:\tlearn Python")
        print("2:\tlearn Java")
        print("3:\tGo Swimming")
        print("4:\tHave dinner")
        print("5:\tGo to Bed")
        print("0:\t Exit")

The following code gives the same output as the above code just we changed the code a little bit we removed choice from if condition we added it to while loop.

print("Please choose your option from list below")
print("1:\tlearn Python")
print("2:\tlearn Java")
print("3:\tGo Swimming")
print("4:\tHave dinner")
print("5:\tGo to Bed")
print("0:\t Exit")
choice="-"
while choice!="0":
    choice=input()

    if choice in"12345":
        print("You chose.{}".format(choice))
    else:
        print("Please choose your option from list below")
        print("1:\tlearn Python")
        print("2:\tlearn Java")
        print("3:\tGo Swimming")
        print("4:\tHave dinner")
        print("5:\tGo to Bed")
        print("0:\t Exit")



In the following code we created we simply if condition statement.
first =("Hi How are you")
second=("Hope you are doing greate")
third=("today is holiday")


choice=input("Please between 1,2 and 3")
if choice=="1":
    print(first)
elif choice=="2":
    print(second)
elif choice=="3":
    print(third)
else:
    print("How enter wrong input")










 

 

 



https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
•	WPM: 51
•	Accuracy: 95%
•	Total Words: 311 | Correct Words: 293 | Incorrect Words: 18 | Characters Typed: 1722





In the following line of code we created a variable called computer_parts and assigned in different string in different sequence all will be in double inverted comma, then we created for loop we created part as variable and stored complete list inside that variable and then we used that variable to print the complete sequence in the single string.
And next line of code we used large bracked and inside that we assigned as number basically what is does it give that sequence string. And next line of code we used slice statement it will give first 3 string as a slice and note it used large bracked to print that statement. In the large line of code that is basically idiom which is used to print last string.
computer_parts=["compouter","monitor","keyboard","mouse","mouse mat"]
for part in computer_parts:
    print(part)
print(computer_parts[2])
print(computer_parts[0:3])
print(computer_parts[-1])
compouter
monitor
keyboard
mouse
mouse mat
keyboard
['compouter', 'monitor', 'keyboard']
mouse mat

	 

 


Following is the example of imputable id here when we printing the following code both print id has same result.
	result="correct"
another_result=result
print(id(result))
print(id(another_result))



 

	 
shopping_list=["milk","pasta","eggs","spam","bread","rice"]
another_list=shopping_list
print(id(shopping_list))
print(id(another_list))
shopping_list+=["cookies"]
print(shopping_list)

In the above code we created a list and stored in a variable called shopping_list after that we created another variable and stored shopping_list variable into in. after that we added another item in the list with plus equal sign and in the list line we printed the list.
In the following code created 5 variable and stored same value as in another_list then we used append clause to add cream into the list. In the next line when we printed the c variable and d variable all have added cream into the list.
shopping_list=["milk","pasta","eggs","spam","bread","rice"]
another_list=shopping_list
a=b=c=d=e=f=another_list
print(a)
print("Adding Cream")
b.append("cream")
print(c)
print(d)



 

In the following code we typed different typed of operator min max len function we get values in the another code which have used .count operator we used different kind of 
	even=[2,4,6,8]
odd=[1,3,5,7,9]
print(min(even))
print(min(odd))
print(max(even))
print(max(odd))
print()
print(len(even))
print(len(odd))
print("mississippi".count("s"))
print("mississippi".count("iss"))











In the following piece of code we created a variable called current choice and assigned it some random string after that we created another  variable called computer_parts and assigned it a empty list. After that we started our while loop loop until user types 0 then in next line of code we created our if condition if current choice in mentioned list then print that line which we have added after that we created list of if condition if user types 1 and do add computer to the empty list which we have created if user enter 2 when enter monitor to the list if user enters 3 enter keyboard to the list if user enter 4 then add another item and so on. In else: statement we said print the list of item from which user need to select. And in the last part we created variable for user input and after that we printed the variable where list is stored.
current_choice="-"
computer_parts=[]
while current_choice!="0":
    if current_choice in "12345":
        print("Adding {}".format(current_choice))
        if current_choice=="1":
            computer_parts.append("Computer")
        elif current_choice=="2":
            computer_parts.append("Monitor")
        elif current_choice=="3":
            computer_parts.append("Keyboard")
        elif current_choice=="4":
            computer_parts.append("Mouse")
        elif current_choice=="5":
            computer_parts.append("Mouse Mat")

    else:
        print("Please add options from the list below:")
        print("1: Computer")
        print("2:Monitor")
        print("3.Keyboard")
        print("4.Mouse")
        print("5.Mouse Mat")
        print("0: to finish")
    current_choice=input()
print(computer_parts)


 

Following code is the example of how to use enumerate function it is basically add index number to each item in list.
	for index,character in enumerate("abcdefg"):
    print(index,character)

In the following code we created a variable called available_parts and inserted item into the list then we created another variables valid_choices and created a empty list inside it and we created our for loop I variable in range 1 to whatever the last row number and plus it with 1 because in python numbering starts from 0 then after that since it would create a loop in the next line we added these number to the variable which we have created in the string form because it is first number after that we print valid_choices variable and it would print all the item which are stored in that list.



available_parts=["Computer",
               "Monitor",
               "Keyboard",
               "Mouse",
               "Mouse Mat",
               "hdmi Cable"]
valid_choices=[]
for i in range(1,len(available_parts)+1):
    valid_choices.append(str(i))
print(valid_choices)

current_choice="-"
computer_parts=[]
while current_choice!="0":
    if current_choice in "123456":
        print("Adding {}".format(current_choice))
        if current_choice=="1":
            computer_parts.append("Computer")
        elif current_choice=="2":
            computer_parts.append("Monitor")
        elif current_choice=="3":
            computer_parts.append("Keyboard")
        elif current_choice=="4":
            computer_parts.append("Mouse")
        elif current_choice=="5":
            computer_parts.append("Mouse Mat")
        elif current_choice=="6":
            computer_parts.append("hdmi")

    else:
        print("Please add options from the list below:")
        for part in available_parts:
            print("{0}:{1}".format(available_parts.index(part)+1,part))
    current_choice=input()
print(computer_parts)

In the following line of code we created a variable in a list form and inserted 6 different values in the list and we created a variable with empty list then we created our for loop and i variable and range we created 1 to total length of items pluse one because in python index starts with 0 after that we appended that list to variable valid_choices which we have created then then we created another variable current_choice and entered into dummy string and created another variable and make it a empty list after that we created our while loop loop until user input 0 after that we created our if condition inside that if condition we created condition if user entered number is inside the variable valid_choises then print and after that print whatever is stored in the current_choice variable by the user after that we created another variable index and inside that index we created user input in the form of integer and subtracted it with 1 because in python index starts with 0 so its sensible to subtract 1 from that input so selected desired item. After that we created another variable called chosen_part and stored item which is required by the user then we and after that we stored tht value to the variable computer_parts with the help of append function.In the else section we created our list of item which we want to print after that we created variable for user to input and then we created print.

available_parts=["Computer",
               "Monitor",
               "Keyboard",
               "Mouse",
               "Mouse Mat",
               "hdmi Cable",
                 "HeadPhones"]
valid_choices=[]
for i in range(1,len(available_parts)+1):
    valid_choices.append(str(i))
print(valid_choices)

current_choice="-"
computer_parts=[]
while current_choice!="0":
    if current_choice in valid_choices:
        print("Adding {}".format(current_choice))
        index=int(current_choice)-1
        chosen_part=available_parts[index]
        computer_parts.append(chosen_part)
    else:
        print("Please add options from the list below:")
        for part in available_parts:
            print("{0}:{1}".format(available_parts.index(part)+1,part))
    current_choice=input()
print(computer_parts)

In the following piece of code we created a variable called data and inserted item in the form of a list and in the next line we created two variable and inserted two max and min value into it after that we created another variable to store index values in if condition and give it 0 values. After that we initiated our for loop and we give index value to the each item for that we used enumerate function now we have index and value, meaning for every item there is a index attached to it now we started our for loop for index and value. After that we started our if condition in if condition our criteria is if value is greater than value in min_value: so we defined it with variable after that if that is true in next line of code store that index values to stop variable which we have already defined before. After that we stopped this as soon as this condition is met we used  break function to stop the loop with first value we get.Now in next piece of code we printed that index values which we stored in stop function with to check whether we store correct index into it. After that we used del clause to delete the item upto that index with the next line of code after that we printed data.

data=[60,50,100,125,1303,400,153,60]
min_value=100
max_value=300
stop=0
for index,value in enumerate(data):
    if value>=min_value:
        stop=index
        break
print(stop)
del data[:stop]
print(data)











In the following code everything is same as above after that we created another variable called start and assigned a value zero after that  same we created our for loop since we already enumerated the variable data so we need to enumerated here. This time we started our for loop for index in range from len(data) from -1 to not 0 but -1 and in the last section we called -1 because we want reverse order so this should be clear. In next line of code we created our if condition and into that If condition we used data(index) clause what is does it give values to that index attached to that index number if value is less than max value then we stored that index number to start variable when we find that value after that we used break statement. In next line of code we print that variable after that we used delete clause to delete number till that point to end. And in the next line of code we print that data.

data=[60,50,100,125,1303,400,153,60]
min_value=100
max_value=300
stop=0
for index,value in enumerate(data):
    if value>=min_value:
        stop=index
        break
print(stop)
del data[:stop]
print(data)
start=0
for index in range(len(data)-1,-1,-1):
    if data[index]<=max_value:
        start=index-1
        break
print(start)
del data[start:]
print(data)

In the following piece of code we created a variable data and insert into item as a list then in next line we created a variable max,min and assigned it value. Then after that we created our for loop index in range and here len function is created total length of the item basically what It would do it would created a loop in al the item.After that inside the for loop we created our if condition if data of that index is less than min_valid or data index after than max value then print index as well as data and after that del that item after that we printed the updated data.
data=[104,101,4,105,308,103,5,107,100,306,106,102,108]
min_valid=100
max_valid=200
for index in range(len(data)-1,-1,-1):
    if data[index]<min_valid or data[index]>max_valid:
        print(index,data)
        del data[index]
print(data)



In the following code we created a variable called data and assigned it item which is in a list. After that we created two other variable and assigned it maximum and minimum values after that we created a variable called top_index and assigned it len of item subtracted it with 1 after that we printed after that we created our for loop in that loop in that for loop we mentioned index and value and enumerate it and we already know what enumerate does it give index values to each item after that we created our reversed and what reversed clause does it reversed the item in the list after that we created if condition if value is les than 100 or value is greater than 200 than delete that data and after that we wrote our print condition.
data=[104,101,4,105,308,103,5,107,100,306,106,102,108]
min_valid=100
max_valid=200
top_index=len(data)-1
print(top_index)
for index, value in enumerate(reversed(data)):
    print(index,value)
    if value<min_valid or value>max_valid:
        print(top_index-index,value)
        del data[top_index-index]

print(data)



print("ABC","DEF","GHI",sep="*******")
print("ABC","DEF","GHI",sep=" ")
print("Hello","Goodbye",end="!@#")
print("Hello")
print("A","B","C",sep="**",end="#")
print("A","B","C",end="#",sep="**")
	



print(3+7)
print(3.5+6.3)
print(10-4)
print(5*3)
print("BA"+"CON")
print("lolo"*20)





print(10+3.8)
print(5**3
)
print(4**4)
print(25**25)
print(628**7434)
print(4+5*4)
print((4+3)*3)

PANDAS Operation

Double slash remove number after decimals
print(14/3)
print(14//3)


Give me remainder 
print(14%3)
print(14%3)
print(16%3)
print(1%3)
print(2%3)
print(3%3)



print(3)
print(True)
print(False)
print("True"|
Print("False")
print("False")
print(5==5)
print(5==3)
print(5==2)
print(5==8)
print(8.3==8.3)
print(8.3==4.1)
print(5=="5")|
print("hmm"=="hmm")
print("Hmm"=="hmm")
print("Hmm"=="bacon")
print("5"=="5")
print(""=="")
print(5==5.0)
print(5==5.1)
print(True==True)
print(False==False)
print(True==False)
print(5!=5)
print(7!=5)
print(10!=8)
print(10!=10)
print("music"!="music")
print("music"!="noise")
print(1-)










Python Mathematical Operations

print(5<10)
print(10<7)
print(8<=8)
print(8<=11)
print(10>20)
print(9>=9)
print(9>=5)
print(5<8<=5)
print(5<8<=7)



 


print(245**5675)
print(2444**24445)
print(type(5))
print(type(10))
print(type("10"))
print(type(10.5))
print(type(5.0))
print(type("Vijay"))
print(type("Vijay S"))
print(type(5)==type(10))
print(type("Computer")==type("Laptop")
)
print(type(5)==type(5.0))
print(type(5)==type("5"))
print(type(True)==type("True"))
print(type(True))
print(type(True)==type(False))
print(type[1,2,3])



	



print(type(5))
<class 'int'>
>>> print(type(10))
<class 'int'>
>>> print(type("10"))
<class 'str'>
>>> print(type(10.5))
<class 'float'>
>>> print(type(5.0))
<class 'float'>
>>> print(type("Vijay"))
<class 'str'>
>>> print(type("Vijay S"))
<class 'str'>
>>> print(type(5)==type(10))
True
>>> print(type("Computer")==type("Laptop"))
True
>>> print(type(5)==type(5.0))
False
>>> print(type(5)==type("5"))
False
>>> print(type(True)==type("True"))       
False
>>> print(type(True))
<class 'bool'>
>>> print(type(True)==type(False))        
True
>>> print(type(1,2,3))
	


print(int(3.14))
print(int(3.99))
print(int("3"))
print(type(str(3)))
print(float(3))
print(float(6))
print(float("10.34"))
print(float(5.23))
print(str(5.35))
print(str(5))
print(str("Hello"))|
print(str(5)+"Hello")
print(3+3)
print(type(int(3.4+6.7)))


print(int(3.14))
3
>>> print(int(3.99))
3
>>> print(int("3"))
3
>>> print(str(3))
3
>>> print(type((str(3)))
...
... print(type(str(3)))
  File "<stdin>", line 3
    print(type(str(3)))
    ^
SyntaxError: invalid syntax
>>> print(float(3))
3.0
>>> print(float(6))
6.0
>>> print(float("10.34"))
10.34
>>> print(float(5.23)
...
... print(float(5.23))
  File "<stdin>", line 3
    print(float(5.23))
    ^
SyntaxError: invalid syntax
>>> print(str(5.35))
5.35
>>> print(str(5))
5
>>> print(str("Hello"))
Hello
>>> print(5+"Hello")
Traceback (most recent call last):        
  File "<stdin>", line 1, in <module>     
TypeError: unsupported operand type(s) for +: 'int' and 'str'
>>> print(str(5)+"Hello")
5Hello
>>> print(3+3)
6
>>> print(3.4+6.7)
10.1
>>> print(int(3.4+6.7))
10
>>> print(type(int(3.4+6.7)))
<class 'int'>


= is a assignment operator in python




>>> print("My name is",name,"and I am",age,"year old")
My name is Vijay and I am 30 year old
>>>	


 







	b=5
a=b=5
b=10
print(a)
print(b)
a,b=5,10
a,b,c=5,10,15
print(a)
print(b)
print(c)




a=5
a=a+1
print(a+1)
a=1
a+=2
print(a)
print("He"+"Good")
word="race"
word=word+" car"
print(word)

b=5
b=b+4
print(b)
b=5
b*=3
print(b)

	first=input("Enter you first Number")
first_number=int(first)
second=input("Enter you second number")
second_number=int(second)
print("The sum of both number is:",first_number+second_number)




first_number=int(input("Enter you first Number"))
second_number=int(input("Enter you second number"))
print("The sum of both number is:",first_number+second_number)






Function in python a any language is a set of instruction we have saved in a variable.Its also a variable but this time its not a single line but a set of code which gives a particular output.
def output_function():
    print("what is your first name")
    print("what is your last name")
    print("what is your age")
output_function()

 

In the following code we created a default parameter and now input is optional if user doesn’t provide input then default 
def p(a=0,b=0,c=0):
    return a+b+c

result=p(a=4,b=4,c=4)
print(result)
result=p()
print(result)




 

	 



	best_language_ever="Python"
print(type(best_language_ever[0]))
topic="programming"
print(topic[-1])
print(topic[-2])
print(topic[-3])
print(topic[-4])







In the following lines of code we used slicing to get the part of the string based in its indes position from first it start with zero while from last its starts with minus one.

 	
In the following code we slice from one point to the other and in the increment of number which we have mentioned in the end. In all the line of code we have 3 number starting point end point and the interval at which we would slice.
If we want to reverse the string just -1 

alphabet="abcdefghijklmnopqrstuvwxyz"
print(alphabet[0:10:2])
print(alphabet[0:26:3])
print(alphabet[:26:3])
print(alphabet[0::3])
print(alphabet[::3])
print(alphabet[4:20:5])
print(alphabet[-20:-8:5])
print(alphabet[::-3])
print(alphabet(::-2))
print(alphabet[::-1])



	
 
	

announcement="The winner of the prize are Vijay,Ramesh,Suresh"
print("Vijay" in announcement)
print("Steve" in announcement)
print("winner" in announcement)
print(" " in announcement)
print("," in announcement)
print("Vijay" not in announcement)
print("Steve" not in announcement)
print("winner" not in announcement)
print(" " not in announcement)
print("," not in announcement)



browser="Google chroma"
print(browser.find("c"))
print(browser.find("ch"))
print(browser.find("t"))
print(browser.find("C"))
print(browser.find("o"))
print(browser.find("o",5)



print(browser.index("o"))
print(browser.index("e"))
print(browser.index("c"))



salutation="Mr. Kermit the Frog"

print(salutation.startswith("M"))
print(salutation.startswith("Mr"))|
print(salutation.startswith("m"))
print(salutation.startswith("k"))
print(salutation.endswith("Frog"))|
print(salutation.endswith("g")
print(salutation.endswith("g"))
print(salutation.endswith("og"))
print(salutation.endswith("Frog"))

Count Method.

print(salutation.count("t"))
print(salutation.count("r"))
print(salutation.count("K"))












# Define a vowel_count function that accepts a string argument.
# The function should return the count of vowels in the string.
# The 5 vowels are "a", "e", "i", "o", and "u".
# You can assume the string will be in all lowercase.
#
# EXAMPLES:
# vowel_count("estate")        => 3
# vowel_count("helicopter")    => 4
# vowel_count("ssh")           => 0


def vowel_count(word):
    return word.count("a")+word.count("e")+word.count("i")+word.count("o")+word.count("u")
    

# Define a find_my_letter function that accepts two arguments: a string and a character
# The function should return the first index position of the character in the string
# The function should return a -1 if the character does not exist in the string
#
# EXAMPLES:
# find_my_letter("dangerous", "a")    => 1
# find_my_letter("bazooka", "z")      => 2
# find_my_letter("lollipop", "z")     => -1


def find_my_letter(string,character):
    return string.find(character)


story=story.title()
print(story)



print("winter".islower())
print("winter".isupper())
print("winter".isnumeric())
print("winter".isdigit())
print("winter".istitle())
print("winter".isspace())
print("winter".isprintable())
print("winter".isidentifier())
print("winter".isalpha())
print("winter".isdecimal())



 










Strip method


empty_space="           content       "
print(len(empty_space.rstrip()))
print(len(empty_space.lstrip()))
print(len(empty_space.strip()))

website="www..python.org"
print(website.lstrip("w"))
print(website.rstrip("org"))
print(website.strip("worg"))
print(website.s)


Replace Method

phone_number="987 1728 217"
print(phone_number.replace(" ","/"))
print(phone_number.replace("98","89"))
print(phone_number.replace("17","71"))
phone_number=phone_number.replace("72","27")
phone_number
phone_numnber











# Define a fancy_cleanup function that accepts a single string argument
# The function should clean up the whitespace on both sides of the
# argument. It should also replace every occurrence of the letter "g" with the
# letter "z" and every occurence of a space with an exclamation point (!).
#
# fancy_cleanup("       geronimo crikey  ")   => "zeronimo!crikey"
# fancy_cleanup("       nonsense  ")          => "nonsense"
# fancy_cleanup("grade")                      => "zrade"




def fancy_cleanup(word):
    return word.strip().replace("g","z").replace(" ","!")

Format Method
    # name, adjective,noun
mad_libs="{} laugh at the {} {}"
print(mad_libs.format("Bobby","green","alien"))
print(mad_libs.format("Robert","Maihel","Sheela"))
print(mad_libs.format("A","B","C"))
print(mad_libs.format("C","D","E"))
print(mad_libs.format("hot","cold","warm"))




first_name=input("Enter your first Name")
last_name=input("Enter your last Name")
print("Your first Name {} and your last name is {} ".format(first_name,last_name))

Output of the above code is 
Enter your first NameVijay
Enter your last NameSingh
Your first Name Vijay and your last name is Singh






hamesome=True
admin=False
print(2<4)
print(7>=8)
result=2<4
print(result)
print("xbox"=="xbox")
print("xbox"=="playstation")
print("xbox"=="Xbox")
print(5==4)
print("Vijay"=="Vijay")
print(True != False)
print(True==False)


if condition

if 5>3:
    print("Yup, that's true.This will be printed")
    print("Hee another line! Hoonray")
if 6>10:
    print("Hope, that is false, that will not  be printed")
if "boris"=="boris":
    print("Great name!")

if "dave"=="Dave":
    print("Awesome name")

if "dave"=="Dave":
    print("Haha, got you to print")
    print("Great Success")
if True:
    print("Alway true, always prints")
if False:
    print("never true,not fit to print")







If condition





if 10>3:
    print("Hello")
if 3:
    print("Hello")

if -1:
    print(Goodbe)
if "hello":
    print("La la la")
if "":
    print("This will not print")
print(bool(1))
print(bool(0))
print(bool(-1))
print(bool(5))
print(bool(""))
print(bool("Python"))







 


value=int(input("Enter a random number "))

if value%2==0:
    print("Numberis even")
else:
    print("Number if odd")













def positive_or_negative(number):
    if number >0:
        return("Positive")
    elif number <0:
        return("Negative")
    elif number==0:
        return("Neither! It's a zero")
    else:
        return("none")
number=int(input("Enter the Number"))
print(positive_or_negative(number))





def calculator(operation,a,b):
    if operation=="add":
        return a+b
    elif operation=="subtract":
        return a-b
    elif operation=="multiply":
        return a*b
    elif operation=="divide":
        return a/b
    else:
        return "I dont know"

print(calculator("add",3,4))
print(calculator("subtract",4,3))
print(calculator("multiply",3,4))
print(calculator("divide",3,4))
print(calculator("",3,4))





Calculator based on if condition


def calculator(operation,a,b):
    if operation=="add":
        return a+b
    elif operation=="subtract":
        return a-b
    elif operation=="multiply":
        return a*b
    elif operation=="divide":
        return a/b
    else:
        return "I dont know"
        
first_number=int(input("Please enter first number"))
second_number=int(input("Please enter second number "))
operat=str(input("Please enter your operation"))

print(calculator(operat,first_number,second_number))














# Declare a negative_energy function that accepts a numeric argument and returns its absolute value. 
# The absolute value is the number's distance from zero.
# 
# negative_energy(5)    => 5
# negative_energy(10)   => 10
# negative_energy(-5)   => 5
# negative_energy(-8)   => 8
# negative_energy(0)    => 0

def negative_energy(value):
    if value<0:
        return -1*value
    else:
        return value
        
Check keyword
 









And statement and if condition

	
if 5<7 and "rain"=="rain":
    print("Both of those condition evaluate to True")


if 5<7 and "rain"=="fire":
    print("This will not print because at least one of the condition is false")
if "rain"=="fire" and 5<7:
    print("This will not print")

if "rain"=="fire" and 5<3:
    print("This will not print")

value=95
if value>90 and value<100:
    print("This will print")

if 90<value<100:
    print("This will print")





if 5>8 or 7 < 11:
    print("At least one of the condition is true")
if "cat"=="cat" or "dog"=="donkey":
    print("At least one of the condition is true")
if "cat"=="cat" or "dog"=="dog":
    print("At least one of the condition is true")
if "apple"=="banana" or "organge"=="pear":
    print("Will this print? Noe!")
    


print(not True)
print(not False)
if "H" in "Hello":
    print("That character exists in the string!")
if "Z" not in "Hello":
    print("This character does not exists in the string!")





value=10
if  value>100:
    print("This will not print")
if value<100:
    print("This will print")
value=10
if not value>100:
    print("This will print")



if else statement

ingredient1="Pasta"
ingredient2="Chomein"

if ingredient1=="Pasta":
    if ingredient2=="Meatballs":
        print("I recomment making pasta and mealballs")
    else:
        print("I recommend making plain pasta")    
else:
    print("I have no recommendation")

if ingredient1=="Pasta" and ingredient2=="Meatballs":
    print("I recommend making pasta and meatballs")
elif ingredient1=="Pasta":
    print("I recommend making plain pasta")
else:
    print("I have no recommendation")


# Define a divisible_by_three_and_four function that accepts a number as its argument. 
# It should return True if the number is evenly divisible by both 3 and 4 . 
# It should return False otherwise.
#
# divisible_by_three_and_four(3)   => False
# divisible_by_three_and_four(4)   => False
# divisible_by_three_and_four(12)  => True
# divisible_by_three_and_four(18)  => False
# divisible_by_three_and_four(24)  => True


def divisible_by_three_and_four(number):
    if number%3==0 and number%4==0:
        return True
    # Declare a string_theory function that accepts a string as an argument. 
# It should return True if the string has more than 3 characters 
# and starts with a capital “S”. It should return False otherwise.
#
# string_theory("Sansa") => True
# string_theory("Story") => True
# string_theory("See") => False
# string_theory("Fable") => False

def string_theory(word):
    if word[0]=="S" and len(word)>3:
        return True
        


def fizzbuzz(number):
    bucket=0
    while bucket<number:
        if bucket%3==0:
            print("Fizz")
        elif bucket%5==0:
            print("Buzz")
        elif bucket%3==0 and bucket%5==0:
            print("FizzBuzz")
        else:
            print(bucket)
        bucket+=1
fizzbuzz(30)




In following piece of code we created a variable called count and signed a integer value 0 then while write our while statement this while statement check whether the condition is true or false if the condition is true then it initiate the code underneath it then it would print the count variable and then after then increment it by one in next code then again now variable has stored integer value 1 in it and previous 0 has been replaced after that then again it will check whether its true or false then same procedure execute if the condition is true.And this loopkeep looping until while condition becomes false.This is called while loop.







 
count=0
while count<=10:
    print(count)
    count+=1








	 

In the following piece of code we created a variable invalid_number and assigned a Boolean True and we created our while loop here until condition is true we created a user input and stored it in a variable called user_input than we check it through the if condition if condition is greater than 10 the we print one statement and changed the invalid_number to Boolean false else we created a print statement. And this loop will continue until the condition is met.
invalid_number=True
while invalid_number:
    user_input=int(input("Enter the number of your choice: "))
    if user_input>10:
        print("Congrate you entered the right number")
        invalid_number=False
    else:
        print("Please Enter again you did not entered desired input")
 
        

	











def fizzbuzz(number):
    bucket=0
    while bucket<number:
        if bucket%3==0 and bucket%5==0:
            print("FizzBuzz")
        elif bucket%3==0:
            print("Fizz")
        elif bucket%5==0:
            print("Buzz")
        
        else:
            print(bucket)
        bucket+=1
fizzbuzz(50)






















Recursion:-

 





def reverse(str):
    first_index=0
    last_index=len(str)-1
    reversed_string=""
    while last_index>=first_index:
        reversed_string=reversed_string+str[last_index]
        last_index-=1
    return reversed_string
print(reverse("straw"))










	 

def reverse(str):
    if len(str)<=1:
        return str
    return str[-1]+reverse(str(:-1))
reverse("fdfkdfjd")
	

In the following code we created a function called reverse which would accept string now we created a base case after which recursion would stop. Here we start our if condition if length of the string is equal 1 then return that string.
After that we called our recursion call str[-1] which is last string than we we



# Define a function called "factorial" that accepts a single number as input
#
# A factorial represents the product of all numbers up to, and including, that number. 
# For example, 5 factorial is 5 * 4 * 3 * 2 * 1 = 120
#
# Return the factorial calculation from your function. You should NOT use any kind of loops. 
# Instead, utilize recursion. Your function MUST call itself.
# See sample inputs and return values below
#
# factorial(1) => 1
# factorial(2) => 2
# factorial(3) => 6
# factorial(4) => 24
# factorial(5) => 120

def factorial(number):
    if number==1:
        return number
    return number*factorial(number-1)
    




 
	


sodas=["Coke",
        "Pepsi",
        "Dr.Pepper"]
print(len(sodas))
3
List in Python


web_browsers=["Chrome","Firefox","Safari","Opera","Edge"]
print(web_browsers[0])
print(web_browsers[1])
print(web_browsers[2])
print(web_browsers[3])

print(web_browsers[3][2])



presidents=["Washington","Adams","Jefferson"]
print(presidents[-1])
print(presidents[-2])
print(presidents[-3])














# Define a product_of_even_indices function that accepts a list of numbers. 
# The list will always have 6 total elements. 
# The function should return the product (multiplied total) of all numbers at an even index (0, 2, 4).
#
# product_of_even_indices([1, 2, 3, 4, 5, 6])    =>  15
# product_of_even_indices([3, 4, 3, 5, 3, 6])    =>  27


def product_of_even_indices(element):
    return element[0]*element[2]*element[4]


# Define a first_and_last function that accepts a list of strings. 
# The function should return a concatenation of the first element and the last element. 
# Assume the list will always have 1 or more elements.
#
# first_and_last(["a", "b", "c"])        => "ac"
# first_and_last(["bob", "tom", "rob"])  => "bobrob"
# first_and_last(["a"])                  => "aa"



def first_and_last(element):
    return element[0]+element[-1]


# Define a first_letter_of_last_string function that accepts a list of strings. 
# It should return one character — the first letter of the last string in the list. 
# Assume the list will always have at least one string.
#
# first_letter_of_last_string(["cat", "dog", "zebra"]) => "z"
# first_letter_of_last_string(["nonsense"]) => "n"
def first_letter_of_last_string(element):
    return element[-1][0]
    
    
    


print("progrmaming"[3:6])
muscles=["Biceps","Triceps","Deltoin",
          "Sartorius"]
print(muscles[1:3])
print(muscles[1:2])
print(muscles[0:2])
print(muscles[:2])
print(muscles[2:5])
print(muscles[2:])
print(muscles[-4:2])
print(muscles[-3:])
print(muscles[:-1])
print(muscles[1:-1])
print(muscles[::-2])
print(muscles[::-1])

# Define a split_in_two function that accepts a list and a number.
# If the number is even, return the list elements from the third element to the end of the list.
# If the number is odd, return the list elements from index 0 (inclusive) to 2 (exclusive)
#
# EXAMPLE:
# values = ["a", "b", "c", "d", "e", "f"]
# split_in_two(values, 3)     => ["a", "b"]
# split_in_two(values, 4)     => ["c", "d", "e", "f"]
# split_in_two(values, 1)     => ["a", "b"]
# split_in_two(values, 10)    => ["c", "d", "e", "f"]


def split_in_two(list,number):
    if number%2==0:
        return list[2:]
    else:
        return list[0:2]]





# Declare a nested_extraction function that accepts a list of lists and an index position.
#
# The function should use the index as the basis of finding both the nested list 
# and the element from that list with the given index position
#
# You can assume the number of lists will always be equal to 
# the number of elements within each of them.
#
# nl = [[3, 4, 5], [7, 8, 9], [10, 11, 12]]
# nested_extraction(nl, 0)  => 3
# nested_extraction(nl, 1)  => 8
# nested_extraction(nl, 2)  => 12

def nested_extraction(list,number):
    return int(list[number][number])
    
# Declare a beginning_and_end function that accepts a list of elements.
#
# It should return True if the first and last elements in the list are equal and False if they are unequal.
#
# Assume the list will always have at least 1 element.
#
# beginning_and_end([1, 2, 3, 1])     => True
# beginning_and_end([1, 2, 3, 4, 5])  => False
# beginning_and_end(["a", "b", "a"])  => True
# beginning_and_end([15])             => True

def beginning_and_end(list):
    if list[0]==list[-1]:
        return True
    else:
        return False




# Declare a long_word_in_collection function that accepts a list and a string. 
# The function should return True if 
#   - the string exists in the list AND
#   - the string has more than 4 characters.
#
# words = ["cat", "dog", "rhino"]
# long_word_in_collection(words, "rhino")  => True
# long_word_in_collection(words, "cat")    => False
# long_word_in_collection(words, "monkey") => False


def long_word_in_collection(list,word):
    return word in list and len(word)>4



dinner="Steak and Potatoes"

for character in dinner:
    print(character)

numbers=[2,3,4,6,7,10]
for number in numbers:
    print(number)





numbers=[2,3,4,6,7,10]
for number in numbers:
    print(number*number)






numbers=[2,3,4,6,7,10]
total=0
for number in numbers:
    total=total+number
print(total)






def sum_of_lengths(list):
    total=0
    for word in list:
        total=total+len(word)
    return total

print(sum_of_lengths(["Hello","Helo"]))

def product(list):
    total=1
    for number in list:
        total=total*number
    print(total)
product([4,5])










def odds_sum(numbers):
    total=0
    for number in numbers:
        if number%2!=0:
            total=total+number
    return total

odds_sum([2,4,5,6,7,11])


Greatest Number Function

def greatest_number(list):
    greatest=list[0]
    for number in list:
        if number>greatest:
            greatest=number
    return greatest
greatest_number([2,5,6])















the_simpsons=["Homer","Marge","Bart","Lisa","Maggie"]
for character in the_simpsons[::-1]:
    print(f"{character} has a total of {len(character)} characters.")
print(reversed(the_simpsons))
print(type(reversed(the_simpsons)))


Reverse operator in action


the_simpsons=["Homer","Marge","Bart","Lisa","Maggie"]
for character in reversed(the_simpsons):
    print(f"{character} has a total of {len(character)} characters.")



errands=["Go to gym","Grab lunch","Get promoted at work","Sleep"]
print(errands)
print(enumerate(errands))
for idx, task in enumerate(errands):
    print(f"{task} is number {idx+1} on my list of things to do today!")

errands
def in_list(string,element):
    for idx,word in enumerate(string):
        if element==word:
            return idx
        else:
            return -1

in_list(["a","b"],"a")



for number in range(0,11):
    print(number)

 for number in range(3,9,2):
     print(number) 

for number in range(100,10,-10):
    print(number)     

for number in range(100,10,-8):
    print(number)

print(3 in [1,2,3,4,5])

def contains(values,target):
    found=False
    for value in values:
        print(value)
        if value==target:
            found=True
            break
    return found
print(contains([1,2,3,4],3))

def sum_of_positive_numbers(values):
    total=0
    for number in values:
        if number >0:
            total+=number
            
    return(total)

print(sum_of_positive_numbers([1,2,-2]))

def sum_of_positive_numbers(values):
    total=0
    for number in values:
        if number <0:
            continue
        total+=number
            
    return(total)

print(sum_of_positive_numbers([1,2,5,-2]))

 

 



elements=["Red","Green","Yello"]
elements[1]="Violet"
print(elements)



	



 



elements=["Red","Green","Yello"]
elements[1]="Violet"
print(elements)

elements[1:3]=["Pink","Banana"]

print(elements)




# Given the great_directors list below, overwrite the “Steven Spielberg” string with a string of “Michael Bay”.
great_directors = ["Martin Scorsese", "Steven Spielberg", "Francis Ford Coppola"]


# Given the transformers list below, overwrite “Bumblebee” with “Grimlock”.
transformers = ["Optimus Prime", "Megatron", "Bumblebee", "Starscream"]


# Given the camping_trip_supplies list below, overwrite "Socks" with "Food".
camping_trip_supplies = ["Socks", "Flashlight", "Tent", "Blanket"]


# Given the tech_companies list below, overwrite the Microsoft, Blueberry, and IBM strings 
# with the strings “Facebook” and “Apple”. Use list slicing syntax.
tech_companies = ["Google", "Microsoft", "Blackberry", "IBM", "Yahoo"]


great_directors[1]="Michael Bay"
transformers[2]="Grimlock"
camping_trip_supplies[0]="Food"
tech_companies[1:4]=["Facebook","Apple"]	

Append Method:-
 



elements=["Red","Green","Yello"]
elements.append("Black")
print(elements)







# Declare a length_match function that accepts a list of strings and an integer.
# It should return a count of the number of strings whose length is equal to the number.
#
# EXAMPLES
# length_match(["cat", "dog", "kangaroo", "mouse"], 3))  => 2
# length_match(["cat", "dog", "kangaroo", "mouse"], 5))  => 1
# length_match(["cat", "dog", "kangaroo", "mouse"], 4))  => 0
# length_match([], 5))                                   => 0




def length_match(list,numbers):
    total=0
    for index,number in enumerate(numbers):
        if len(number)==numbers:
            total+=1
        else:
            return 0
    return total
    
# Declare a sum_from function that accepts two numbers as arguments.
# The second number will always be greater than the first number.
# The function should return the sum of all numbers from the first number to the second number (inclusive).
#
# EXAMPLES
# sum_from(1, 2)   # 1 + 2                  => 3
# sum_from(1, 5)   # 1 + 2 + 3 + 4 + 5      => 15
# sum_from(3, 8)   # 3 + 4 + 5 + 6 + 7 + 8  => 33
# sum_from(9, 12)  # 9 + 10 + 11 + 12       => 42


def sum_from(number1,number2):
    total=0
    for number in range(number1,number2+1):
        total+=number
        
    return total
    


# Declare a same_index_values function that accepts two lists.
# The function should return a list of the index positions in which the two lists have equal elements
#
# EXAMPLES
# same_index_values([1, 2, 3], [3, 2, 1])                         => [1]
# same_index_values(["a", "b", "c", "d"], ["c", "b", "a", "d"])   => [1, 3]





def same_index_values(list1,list2):
    common_index=[]
    for index, value in enumerate[list1]:
        if list2[index]== value:
            common_index.append(value)
            
    return common_index
    
    









power_square=[2,3,4,5,6]

def squares(numbers):
    bucket=[]
    for number in numbers:
        bucket.append(number**2)
    return bucket
print(squares(power_square))

	


power_square=[2,3,4,5,6]
def convert_to_float(numbers):
    bucket=[]
    for number in numbers:
        bucket.append(float(number))
    return bucket
print(convert_to_float(power_square))



power_square=[2,3,4,5,6]
def even_or_odd(numbers):
    bucket=[]
    for number in numbers:
        if number%2==0:
            bucket.append(True)
        else:
            bucket.append(False)
    return bucket
print(even_or_odd(power_square))







# Define a long_strings function that accepts a list of strings. 
# It should return a new list consisting of only the strings that have 5 characters or more.
#
# EXAMPLES
# long_strings(["Hello", "Goodbye", "Sam"])  => ["Hello", "Goodbye"]
# long_strings(["Ace", "Cat", "Job"])        => []
# long_strings([])                           => []



def long_strings(list):
    bucket=[]
    for number in list:
        if len(number)>=5:
            bucket.append(number)
    return bucket
    

# Define an only_evens function that accepts a list of numbers. 
# It should return a new list consisting of only the even numbers from the original list.
#
# EXAMPLES
# only_evens([4, 8, 15, 16, 23, 42]) => [4, 8, 16, 42]
# only_evens([1, 3, 5])              => []
# only_evens([])                     => []


def only_evens(list):
    bucket=[]
    for number in list:
        if number%2==0:
            bucket.append(number)
    return bucket
	


1.	Effect: . append() adds a single element to the end of the list while . extend() can add multiple individual elements to the end of the list.
2.	Argument: . append() takes a single element as argument while . extend() takes an iterable as argument (list, tuple, dictionaries, sets, strings).
Mar 22, 2020


Extend Method:-


list1=["Red","Green","Yellow"]
list2=["Black","Pink"]
list1.extend(list2)
print(list1)



Inser Method

list1.insert(1,"Brown")
print(list1)










# Write a factors function that accepts a positive whole number
# It should return a list of all of the number's factors in ascending order
# HINT: Could the range function be helpful here? Or maybe a while loop?
#
# EXAMPLES
# factors(1)  => [1]
# factors(2)  => [1, 2]
# factors(10) => [1, 2, 5, 10]
# factors(64) => [1, 2, 4, 8, 16, 32, 64]




def factors(numbers):
    bucket=[]
    for number in range(1,numbers+1):
        if numbers%number==0:
            bucket.append(number)
    return bucket
   

 POP METHOD   
 
list1=["Red","Green","Yellow"]
print(list1)
last_action=list1.pop(-1)
print(list1)






By Default it would remove the last element from the list 

list1=["Red","Green","Yellow"]
last_action=list1.pop()
print(list1)




del method is will delete the element from the list 


soups=["Onion","Chowder","Check","Miso","Wonton"]

del soups[1]
print(soups)

del soups[-1]
print(soups)

del soups[1:3]
print (soups)




Remove Method



games=["Zelda","Mario","Donkey Kong","Zelda"]

games.remove("Zelda")
print (games)

if "Zelda" in games:
    games.remove("Zelda")
print(games)




Clear Method empty the  the list




fruits=["Lemaon","Orange","Lime"]

fruits.clear()
print(fruits)




# Declare a push_or_pop function that accepts a list of numbers
# Build up and return a new list by iterating over the list of numbers
# If a number is greater than 5, add it to the end of the new list
# If a number is less than or equal to 5, remove the last element added to the new list
# Assume the order of numbers in the argument will never require removing from an empty list
#
# EXAMPLES
# push_or_pop([10])            => [10]
# push_or_pop([10, 4])         => []
# push_or_pop([10, 20, 30])    => [10, 20, 30]
# push_or_pop([10, 20, 2, 30]) => [10, 30]



def push_or_pop(list):
    bucket=[]
    for number in list:
        if  number>5:
            bucket.append(number)
        else:
            bucket.pop()
    return bucket




# Declare a delete_all function that accepts a list of strings and a target string
# Remove all occurrences of the target string from the list and return it
#
# EXAMPLES
# delete_all([1, 3, 5], 3)  => [1, 5]
# delete_all([5, 3, 5], 5)  => [3]
# delete_all([4, 4, 4], 4)  => []
# delete_all([4, 4, 4], 6)  => [4, 4, 4]



def delete_all(list,numbers):
    bucket=[]
    for number in list:
        if number!=numbers:
            bucket.append(number)
    return bucket
    



Reverse Method
Reverse method reverse the element in the list 



Vitamins=["A","B","C"]

Vitamins.reverse()

print(Vitamins)



Sort method

coffees=["Latte","Espresso","Macchiato","Frappuchino"]
coffees.sort()
print(coffees)




Sorted Method also do the same thing is sort the list in the alphabeticle order.

coffees=["Latte","Espresso","Macchiato","Frappuchino"]
sorted(coffees)
print(coffees)









 


Count Method count the number of item element occur in the list the syntax are following for the count method

counts=[3,4,3,4,3]
counting=counts.count(3)
print(counting)






	







Index Method used to get the position of the particular element.

pizzas=[

    "Mushroom",
    "Pepperoni",
    "Sausage",
    "Barbecue Chicken",
    "Pepperroni",
    "Sausage"
]

print(pizzas.index("Pepperoni"))

print(pizzas.index("Sausage"))

if "Olives" in pizzas:
    print(pizzas.index("Olives"))



print(pizzas.index("Sausage",2))












	

Copy Method
 





units=["meter","kilogram","Second","ampere"]
more_units=units.copy()        

print(units)
print(more_units)

even_more_unit=units[:]
print(even_more_unit)






 


Split Method List converts string into a list.


words="John, Sue, Randy, Meg"
list=words.split(", ")
print(list)

list2=words.split(", ",2)
print(list2)

sentence="I am learning how to code"
words=sentence.split(" ")
print(words)




Cleaning the list and converting it into a string 
def cleanup(strings):
    clean_strings=[]
    for string in strings:
        if string.isspace() or len(string)==0:
            continue
        clean_strings.append(string)
    return " ".join(clean_strings)

print(cleanup(["cat","er","pillar"]))


	








Join Method: Its join each element in a list into a single string.


address=["500 fifth Avenue","New York","NY","10036"]
print(" ".join(address))

print(",".join(address))
print("".join(address))










	print("-".join(["555","123","4567"]))
print("|".join(["555","123","4567"]))
print("****".join(["555","123","4567"]))






 


Zip function is also a oject type which stores values in 
breakfast=["Egg","Cereal","Banana"]
lunches=["Sushi","Chicken","Soup"]
dinners=["Steak","Meatballs","Pasta"]

print(zip(breakfast,lunches,dinners))
print(list(zip(breakfast,lunches,dinners)))
print(type(zip(breakfast,lunches,dinners)))



breakfast=["Egg","Cereal","Banana"]
lunches=["Sushi","Chicken","Soup"]
dinners=["Steak","Meatballs","Pasta"]

combined_list=zip(breakfast,lunches,dinners)
print(combined_list)
zip list is like a enumerate list is is not show any list but it stores it.








breakfast=["Egg","Cereal","Banana"]
lunches=["Sushi","Chicken","Soup"]
dinners=["Steak","Meatballs","Pasta"]

for breakfast,lunch,dinner in zip(breakfast,lunches,dinners):
        print(f"My meal for today was {breakfast} and {lunch} and {dinner}")


Output
My meal for today was Egg and Sushi and Steak
My meal for today was Cereal and Chicken and Meatballs
My meal for today was Banana and Soup and Pasta


 







bubble_tea_flavors=[
        ["Honeydew","Mango","Passion Fruit"],
        ["Peach","Plum","Strawberry","Taro"],
        ["Kiwi","Chocolate"]


]

print(len(bubble_tea_flavors))

print(bubble_tea_flavors[0])
print(bubble_tea_flavors[1])
print(bubble_tea_flavors[2])
print(bubble_tea_flavors[-1])
print(bubble_tea_flavors[-2])
print(bubble_tea_flavors[-3])

print(bubble_tea_flavors[0][0])
print(bubble_tea_flavors[0][1])
print(bubble_tea_flavors[0][2])

bubble_tea_flavors=[
        ["Honeydew","Mango","Passion Fruit"],
        ["Peach","Plum","Strawberry","Taro"],
        ["Kiwi","Chocolate"]


]
all_flavors=[]
for flavor_pack in bubble_tea_flavors:
    for flavor in flavor_pack:
        all_flavors.append(flavor)
print(all_flavors)





# Define a fancy_concatenate function that accepts a list of lists of strings
# The function should return a concatenated string
# The strings in a list should only be concatenated if the length of the list is 3
#
# EXAMPLES
# fancy_concatenate([["A", "B", "C"]])                        => "ABC"
# fancy_concatenate([["A", "B", "C"], ["D", "E", "F"]])       => "ABCDEF"
# fancy_concatenate([["A", "B", "C"], ["D", "E", "F", "G"]])  => "ABC"
# fancy_concatenate([["A", "B", "C"], ["D", "E"]])            => "ABC"
# fancy_concatenate([["A", "B"], ["C", "D"]])                 => ""




def fancy_concatenate(list):
    bucket=""
    for each_block in list:
        if len(each_block)==3:
            for alphabet in each_block:
                bucket+=alphabet
    return bucket


# Define a nested_sum function that accepts a list of lists of numbers
# The function should return the sum of the values
# The list may contain empty lists
#
# EXAMPLES
# nested_sum([[1, 2, 3], [4, 5]])            => 15
# nested_sum([[1, 2, 3], [], [], [4], [5]])  => 15
# nested_sum([[]])                           => 0


def nested_sum(list):
    total=0
    for each_block in list:
        for number in each_block:
            total+=number
    return total

 

List comprehensions
	numbers=[3,4,5,6,7]
squares=[number**2 for number in numbers]
print(squares)
rivers=["Amazon","Nile","Yangtze"]
print([len(river) for river in rivers])

expressions=["lol","rofl","lmao"]
print([expression.upper() for expression in expressions])

decimals=[4.65,3.43,6.43]
print([int(decimal) for decimal in decimals])

 



numbers=[3,4,5,6,7]
squares=[number**2 for number in numbers]
print(squares)
rivers=["Amazon","Nile","Yangtze"]
print([len(river) for river in rivers])

expressions=["lol","rofl","lmao"]
print([expression.upper() for expression in expressions])

decimals=[4.65,3.43,6.43]
print([int(decimal) for decimal in decimals])

print(["abcdefghijklmnopqrstuvwxyz".index(char) for char in "donut"])

print([number/2 for number in range(20)])

donuts=[
    "Boston Cream",
    "Jelly",
    "Vanilla Cream",
    "Glazed",
    "Chocolate Cream"
]

creamy_donuts=[donut for donut in donuts if "Cream" in donut]

print(creamy_donuts)


print([len(donut) for donut in donuts if "Cream" in donut])

print([donut.split(" ")[0] for donut in donuts if "Cream" in donut])





 

Map function



	 

numbers=[4,8,15,16,23,42]
def cube(number):
    return number ** 3
print(list(map(cube,numbers)))

animals=["cat","bear","zebra","donkey","cheetah"]
print(list(map(len,animals)))






animals=["cat","bear","zebra","donkey","cheetah"]
def is_long_animal(animal):
    return len(animal)>5
print(list(filter(is_long_animal,animals)))

	['donkey', 'cheetah']	


 


	metals=["gold","silver","plantinum","pallodium"]

print(list(filter(lambda metal: len(metal)>5,metals)))

print(list(filter(lambda et:len(et)>5,metals)))

print(list(filter(lambda word: "p" in word,metals)))

print(list(map(lambda word: word.count("l"),metals)))

print(list(map(lambda val: val.replace("s","$"),metals)))

# Declare a count_of_a function that accepts a list of strings.
# It should return a list with counts of how many “a” characters appear per string.
# Do NOT use list comprehension.
#
# EXAMPLES:
# count_of_a(["alligator", "aardvark", "albatross"])    => [2, 3, 2]
# count_of_a(["plywood"])                               => [0]
# count_of_a([])                                        => []


def count_of_a(lists):
    return list(map(lambda word: word.count("a"),lists))

	



# Declare an only_odds function.
# It should accept a list of whole numbers.
# It should return a list with only the odd numbers from the original list.
# Do NOT use list comprehension.
#
# EXAMPLES:
# only_odds([1, 3, 5, 6, 7, 8])      =>  [1, 3, 5, 7]
# only_odds([2, 4, 6, 8])            =>  []


def only_odds(lists):
    return list(filter(lambda number:number%2!=0,lists))


# Declare a right_words function that accepts a list of words and a number.
# Return a new list with the words that have a length equal to the number.
# Do NOT use list comprehension.
#
# EXAMPLES:
# right_words(['cat', 'dog', 'bean', 'ace', 'heart'], 3)     => ['cat', 'dog', 'ace']
# right_words(['cat', 'dog', 'bean', 'ace', 'heart'], 5)     => ['heart']
# right_words([], 4)                                         => []


def right_words(lists,number):
    return list(filter(lambda word: len(word)==number,lists))

	

print(all([True]))

print(all([True,False]))
print(all([True,True,True]))
print(all([1,2,3,0]))

print(all(["a","b"]))

print(all(["a","b",""]))

print(any([True,False]))

print(any([False,False]))

print(any([0,1]))


print(any([0]))

print(any([" ",""]))

print(any([""]))

print(any([])



 


print("pasta".__add__("and meatballs"))

print("st" in "pasta")
print("pasta".__contains__("st"))
 	


number=0.123456789
print(format(number,"f"))

print(type(format(number,"f")))

print(format(number,".2f"))
print(format(number,".1f"))
print(format(number,".3f"))

print(format(0.5,"%")
)

print(format(8123456,","))



 


Example of tuble
ood="Sushi","Steak","Guacamole"
food=("Sushi","Steak","Guacamole")
print(type(food))

empty=()
print(type(empty))

mystery=(1,)
print(type(mystery))

mystery=1,
print(type(mystery))


print(tuple(["Sushi","Steak","Guacamole"]))
print(type(tuple(["Sushi","Steak","Guacamole"])))

print(tuple(["abc"]))


# Declare a months tuple with the last 4 months of the year (September, October, November, December) as strings.
# Make sure the first letter of each month is capitalized.
months=("September","October","November","December")

# Create a faves variable with a list of your 3 three favorite movies as strings. 
# Use the tuple function to convert the list to a tuple and save the result in a movies variable.
faves=["Wolf of Wall Street","Dark Knight","Iron Man"]
movies=tuple(faves)

# Create a numbers_a, numbers_b, and numbers_c tuple. 
# Each tuple should contain 3 integers. 
# Declare an all_numbers tuple containing these three tuples.


tuple(faves)

numbers_a=(1,2,4)
numbers_b=(5,6,7)
numbers_c=(8,9,10)

all_numbers=(numbers_a,numbers_b,numbers_c)


 
	




birthday=(14,2,1991)
birthday1=[14,2,1991]

print(type(birthday))
print(type(birthday1))

print(birthday[1])
print(birthday[2])
print(birthday[-1])
print(birthday[-2])
print(birthday[-3])


addresses=(
["Hudson Street","New York","NY"],
["Franklin Street","San Francisco","CA"]




)

print(type(addresses))

addresses[1][0]="Washington"

print(addresses)



	

	employee=("Bob","Johnson","Manager",50)

first_name=employee[0]
last_name=employee[1]
position=employee[2]
age=employee[3]

first_name,last_name,position,age=employee
print(first_name,last_name,position,age)

first_name,last_name,title=employee
first_name,last_name,position,age,salary=employee

a=5
b=10
b,a=a,b
print(a)
print(b)











 	



employee=("Bob","Johnson","Manager",50)

first_name,last_name,*details=employee
print(first_name)
print(last_name)
print(details)


*name,position,age=employee
print(position)
print(age)
print(name)


first_name,*details,age=employee
print(first_name)
print(details)
print(age)
















# Given the tuple below, destructure the three values and
# assign them to position, city and salary variables
# Do NOT use index positions (i.e. job_opening[1])
job_opening = ("Software Engineer", "New York City", 100000)

position,city,salary=job_opening




# Given the tuple below, 
# - destructure the first value and assign it to a street variable
# - destructure the last value and assign it to a zip_code variable
# - destructure the middle two values into a list and assign it to a city_and_state variable
address = ("35 Elm Street", "San Francisco", "CA", "94107")


street,*city_and_state,zip_code=address




# Declare a sum_of_evens_and_odds function that accepts a tuple of numbers.
# It should return a tuple with two numeric values:
# -- the sum of the even numbers
# -- the sum of the odd numbers.
#
# sum_of_evens_and_odds((1, 2, 3, 4))   => (6, 4)
# sum_of_evens_and_odds((1, 3, 5))      => (0, 9)
# sum_of_evens_and_odds((2, 4, 6))      => (12, 0)

def sum_of_evens_and_odds(list):
    bucket=[0,0]
   
    for number in list:
        if number%2==0:
            bucket[0]+=number
        else:
            bucket[1]+=number
 
    return tuple(bucket)



 




def my_max(nonsense,*numbers):
    print(nonsense)
    greatest=numbers[0]
    for number in numbers:
        if number>greatest:
            greatest=number
    return greatest

print(my_max(2,4,5,6))

print(my_max(2,4,6,7,9,333))

print(my_max("Clarke",1,2,4,5,6))

print(my_max("Simpso",1,3,5,5,6,6,7))

	 


 






a=5
b=a

print(a)
print(b)

a=[1,2,3,4]
b=a 
a.append(5)
print(a)
print(b)




 	


students=["Bob","Sally","Sue"]
athletes=students
nerds=["Bob","Sally","Sue"]
print(students==athletes)
print(students==nerds)

print(students is athletes)
print(students is nerds)

a=1
b=1
print(a==1)
print(a is b)

a=3.14
b=3.14
print(a==b)
print(a is b)

a="hello"
b="hello"
print(a==b)
print(a is b)




 











	 







 





 

	





 







 


gym_membership_packages={

29: ["Machines"],
49:["Machines","Vitamin Supplments"],
79:["Machines","Vitamin Supplements","Sauna"]

}

print(gym_membership_packages[49])
print(gym_membership_packages[29])
print(gym_membership_packages[79])



Get method to call the dictionary
	print(gym_membership_packages.get(80,"Empty"))



	



 

Pokemon dictionary

pokemon={

"Fire":["Charmander","Charmeleon","charizard"],
"Water":["Squirtle","Warturtle","Blastoise"],
"Grass":["Bulbasaur","Venusaur","Ivysaur"]

}

print ("Fire" in pokemon)
print("Water" in pokemon)
print("Grass" in pokemon)

print("Electric" not in pokemon)
print("Fire" not in pokemon)
print("Water" not in pokemon)

if "Fire" in pokemon:
    print(pokemon["Fire"])
else:
    print("The category does not present in pokemon")


 Adding or Modifying key value pair in dictionary
 




 

In the following code we created dictionary and altered it

american_foot_team={

"New England Patriots":["Tom Brady","Julian Edelman"],
"New York Giants": ["Eli Manning","Odell Beckham"],
"Pittsburgh Steelers":["Ben Roethlisberger","Antonio Brown"]
}

print(american_foot_team)

american_foot_team["New York Giants"]=["Tom Robert", "Stifal Mihael"]

print(american_foot_team)

american_foot_team["New England Patriots"]=["Eli Manning"]

american_foot_team

video_game_options={}
print(video_game_options)
video_game_options["Subtitles"]=True
video_game_options["difficulty"]="Medium"
video_game_options["volume"]=7

print(video_game_options)

video_game_options["difficulty"]="Hard"
video_game_options["Subtitles"]=False
video_game_options["volume"]=14
print(video_game_options)

words=["danger","beware","danger","beware","beware"]

def count_word(words):
    counts={}
    for word in words:
        if word in counts:
            counts[word]+=1
        else:
            counts[word]=1
    return counts

print(count_word(words))





film_directors={
"The GodFather":"Francis Ford Coppola",
"The Rock":"Michael Bay",
"Goodfellas": "Martin Scrosese"


}

print(film_directors)

print(film_directors.get("Goodfellas"))
print(film.directors.get("Bad Boys","Michael Bay"))
print(film_directors)

print(film_directors)

film_directors.setdefault("Bad Boys")
print(film_directors)

film_directors.setdefault("Bad Boys","Michael Bay")

print(film_directors)

film_directors.setdefault("Bad boys","A good director")
print(film_directors)





 

	





 


 
	


limit={
    "Python":"1991",
    "Ruby":"1995",
    "Java":"1995",
    "Go":"2007"
    }
new_list=limit.pop("Python")

print(limit)
print(new_list)

limit.pop("Go",2000)





















	# Declare a delete_keys function that accepts two arguments:
# a dictionary and a list of strings. 
# For each string in the list, if the string exists as a dictionary key, 
# delete the key-value pair from the dictionary. 
#
# If the string does not exist as a dictionary key, avoid an error. 
# The return value should be the modified dictionary object.
#
# EXAMPLE:
# my_dict = {
#   "A": 1,
#   "B": 2,
#   "C": 3
# }
#
# strings = ["A", "C"]
# delete_keys(my_dict, strings) => {'B': 2}




def delete_keys(dict,list):
    for element in list:
        if element in dict:
            dict.pop(element,0)
    return dict




 

Clear and del method in dictionary

	website={

"Wikipedia":"http://www.wikipedia.org",
"Google": "http://www.google.com",
"Netflix": "http://www.netflix.com"

}

print(website)

website.clear()

print(website)

del website
print(website)




 


In the following example we used update method to update one dictionary to another dictionary


	employee_salaries={

"Guido":100000,
"James":50000,
"Brandon":900000

}

print(employee_salaries)
extra_employ_salaries={
"Yukihiro":1000000,
"Guido":3333333


}


print(employee_salaries)

employee_salaries.update(extra_employ_salaries)
print(employee_salaries)

extra_employ_salaries.update(employee_salaries)

print(extra_employ_salaries)






 
Converting list to a dictionary with dic method:-

list("abc")
employee_title=[
["Mary","Senior Mananger"],
["Brian","Vice President"],
["Julie","Assistant Vice President"]

]

print(employee_title)

employe_dict=dict(employee_title)

employee_title

print(employe_dict)

 


	
 	

Nested Dictionary
tv_shows={
"The X-Files":{
    "Season 1":{
        "Episodes":["Scary Monster","Scary Alien"],
        "Genre": "Science Ficiton",
        "Year":1993
    },
    "Season 2":{
        "Episodes":["Scary Conspiracy"],
        "Genre": "Horror",
        "Year":1994
    }

},
"Lost":{
    "Season 1":{
        "Episodes":["What The Heck is Happening On This Ilsand?"],
        "Genre":"Science Fiction",
        "Year":2004
    }
    
}

}

print(tv_shows)

print(tv_shows["Lost"]["Season 1"]["Episodes"])
print(tv_shows["The X-Files"]["Season 1"]["Episodes"])
print(tv_shows["The X-Files"]["Season 2"]["Episodes"])
print(tv_shows["The X-Files"]["Season 2"]["Year"])


 



 












chinese_food={
    "Sesame Chicken":9.99,
    "Boneless Spare Ribs": 7.99,
    "Fried Rice": 1.99
    
}

for food in chinese_food:
    print(f"The food is {food} and its price is {chinese_food[food]}")

pounds_to_kilogram={
    5:2.26796,
    10:4.53592,
    25:11.3398

}

for weight_in_pounds in pounds_to_kilogram:
    print(f"{weight_in_pounds} is equal to {pounds_to_kilogram[weight_in_pounds]}")





	
 
	

Item Method



 










college_courses={
    "History":"Mr.Washington",
    "Math":"Mr. Newton",
    "Science":"Mr.Einstein"

}

print(college_courses)

for _,professor in college_courses.items():
    print(f"The next professor is {professor}")
    for course,professor in college_courses.items():
    print(f"The course {course} is being taught by {professor}")

	
















# Declare an invert function that accepts a dictionary object. 
# The function should return a new dictionary where the keys and values from the original dictionary are inverted. 
# Each key should now be a value, and each value should be a key. 
# Assume both the keys and values of the dictionary are immutable.
#
# EXAMPLE:
# my_dict = {
#   "A": "B", 
#   "C": "D",
#   "E": "F"
# }
#
# invert(my_dict) => {'B': 'A', 'D': 'C', 'F': 'E'}


def invert(list):
    di={}
    for key,list_values in list.items():
        di[list_values]=key
    return di
        
# Declare a count_of_value function that accepts a dictionary and an integer.
# It should return a count of the number of times the integer appears 
# as a value among the dictionary’s values.
#
# EXAMPLE:
# my_dict = { "a" : 5, "b" : 3, "c" : 5 }
#
# count_of_value(my_dict, 5) => 2
# count_of_value(my_dict, 3) => 1

def count_of_value(alpha,number):
    count=0
    for key,values in alpha.items():
        if alpha[key]==number:
            count+=1
    return count



# Declare a sum_of_values function that accepts a dictionary and a list of strings.
# The dictionary will have keys of strings and values of numbers.
#
# The function should return the sum of values for dictionary 
# keys that are also found in the list.
#
# NOTE: sum is a reserved keyword in Python. Don’t use it as a variable name.
#
# EXAMPLES:
# my_dict = { "a": 5, "b": 3, "c": 10 }
#
# sum_of_values(my_dict, ["a"])            => 5
# sum_of_values(my_dict, ["a", "c"])       => 15
# sum_of_values(my_dict, ["a", "c", "b"])  => 18
# sum_of_values(my_dict, ["z"])            => 0



def sum_of_values(my_dict,list):
    count=0
    for word in list:
        for keys,values in my_dict.items():
            if word==keys:
                count+=values
    return count







 

crypto_currency = {
    "Bitcoin":400000,
    "Ethereum":7000,
    "Litecoin":10

}

print(crypto_currency.keys())
print(crypto_currency.values())

for currency in crypto_currency.keys():
    print(f"The next currency is {currency}")


for price in crypto_currency.values():
    print(f"Ths next price is {price}")
# Declare a common_elements function that accepts a dictionary
# It should return a list with all of the elements that are found
# as both a key and a value in the dictionary
#
# HINT: Use the in operation to check for inclusion in a view or list object
#
# EXAMPLE:
# my_dict = {
#   "A": "K",
#   "B": "D",
#   "C": "A",
#   "D": "Z"
# }
#
# common_elements(my_dict) => ["A", "D"]

def common_elements(dct):
    list=[]
    for keys in dct.keys():
        for values in dct.values():
            if keys==values:
                list.append(keys)
    return list
	

pythonic way to deal with this problem.

def common_elements(dct):
    return [keys for keys in dct.keys() if keys in dct.values()]

print(common_elements({1:2,1:1}))

	
 





Sorted Method

wheel_count={
    "truck":4,
    "car":4,
    "bus":8

}

for vehicles,count in sorted(wheel_count.items()):
    print(f"The next vehicles is a {vehicles} and its number is{count}")






	
 










 



 



	
collect_keyword_arguments(a=2,b=3,c=4,d=5)

def collect_keyword_arguments(**kwargs):
    print(kwargs)
    print(type(kwargs))

    for key, value in kwargs.items():
        print(f"The key is {key} and the value is {value}|")

collect_keyword_arguments(a=2,b=3,c=4,d=5)        

def args_and_kwargs(a,b,*args,**kwargs):
    print(f"The total of your regular arguments a and b is {a+b}")
    print(f"The total of your args tuple is {sum(args)}")
    dict_total=0
    for value in kwargs.values():
        dict_total+=value
    print(f"The total of your kwargs dictionary is {dict_total}")

args_and_kwargs(1,2,3,4,5,6,x=8,y=9,z=10)






 






def height_to_meters(feet,inches):
    total_inches=(feet*12)+inches
    return total_inches* 0.0254

print(height_to_meters(5,11))

states={

    "feet":5,
    "inches":11,
}

print(states)

print(height_to_meters(**states))

	


# Declare a plenty_of_arguments function that accepts two parameters (a and b)
# and an additional **kwargs parameter.
#
# The function should return True if the sum of a, b, and the values of 
# **kwargs is greater than 100. It should return False otherwise.
#
# EXAMPLES:
# plenty_of_arguments(20, 30)                          => False
# plenty_of_arguments(a = 50, b = 75)                  => True
# plenty_of_arguments(a = 50, b = 25, c = 50)          => True
# plenty_of_arguments(a = 25, b = 25, c = 25, d = 25)  => False
# plenty_of_arguments(a = 25, b = 25, c = 25, d = 26)  => True


def plenty_of_arguments(a,b,**kwargs):
    bucket=a+b
    for key,values in kwargs.items():
        bucket+=values
    if bucket>100:
        return True
    
    




    
 



languages=["Python","JavaScript","Ruby"]
lengths={language:len(language) for language in languages}
print(lengths)
lengths={language:len(language) for language in languages if "t" in language}

print(lengths)

word="superficialmaterialistic"
letter_counts={letter:word.count(letter) for letter in word}
print(letter_counts)




 




capitals={
    "New York":"Albany",
    "California":"Sacramento",
    "Texas":"Austin"

}

print(capitals)
inverted={capital:states for states,capital in capitals.items()}

print(inverted)





















# Declare a coaster_conversion function that accepts a dictionary
# The keys of the dictionary will be strings representing roller coasters
# The values will be the heights of each coaster in meters
#
# Return a new dictionary with the same keys.
# The values should be the heights converted from meters to feet,
# The final values (in feet) should also be rounded to the closest integer
# HINT: 1 meter is equal to 3.28084 feet
# HINT: The round function rounds a number to the nearest integer
#
# coasters = {
#   "Kingda Ka": 139,
#   "Top Thrill Dragster": 130,
#   "Superman: Escape From Krypton": 126
# }
#
# coaster_conversion(coasters) => {'Kingda Ka': 456, 'Top Thrill Dragster': 426, 'Superman: Escape From Krypton': 413}


def coaster_conversion(dict):
    return {keys:round(height*3.28084) for keys,height in dict.items()}





















# You are writing a Python program to model a remote control
# for a television set. Declare a stations_to_numbers
# function that accepts a dictionary. The keys will be
# channel numbers and the values will be the station names.
# For example...
# channels = {
#   2: "CBS",
#   4: "NBC",
#   5: "FOX",
#   7: "ABC"
# }
# The stations_to_numbers function should return an
# inverted dictionary where the keys are the station names
# and the values are the channel numbers
#
# stations_to_numbers(channels) => {'CBS': 2, 'NBC': 4, 'FOX': 5, 'ABC': 7}


def stations_to_numbers(dct):
     return {channel:keys for keys,channel in dct.items()}
      


 
 




	 


stocks={"MSFT","FB","IBM","FB"}
print(stocks)
price={1,2,3,4,4,5,6,7,8}
print(price)
lottery_numbers={(1,2,3),(4,5,6),(1,2,3)}

print(len(stocks))
print(len(price))

print(lottery_numbers)


print("MSFT" not in stocks)
print("IBM" not in stocks)
print("GOOG" not in stocks)

squares={number**2 for number in [-5,-4,-3,-2,5,4,3,2]}

print(squares)
print(len(squares))
	



 




	
print("MSFT" not in stocks)
print("IBM" not in stocks)
print("GOOG" not in stocks)

squares={number**2 for number in [-5,-4,-3,-2,5,4,3,2]}

print(squares)
print(len(squares))

set1=(set([1,2,3,3,2,1]))

print(list(set1))

set(("abc"))
print(set("aabbcc"))

print(set({"key":"value"}))

philosophers=["Plato","Socrates","Aristotle",
                "Aristotle","Pythagoras",
                "Socrates","Plato"]

print(philosophers)
philosophers_set=set(philosophers)
print(philosophers_set)
philosophers=list(philosophers_set)
print(philosophers)





print("MSFT" not in stocks)
print("IBM" not in stocks)
print("GOOG" not in stocks)

squares={number**2 for number in [-5,-4,-3,-2,5,4,3,2]}

print(squares)
print(len(squares))

set1=(set([1,2,3,3,2,1]))

print(list(set1))

set(("abc"))
print(set("aabbcc"))

print(set({"key":"value"}))

philosophers=["Plato","Socrates","Aristotle",
                "Aristotle","Pythagoras",
                "Socrates","Plato"]

print(philosophers)
philosophers_set=set(philosophers)
print(philosophers_set)
philosophers=list(philosophers_set)
print(philosophers)








 
	







disney_characters={
    "Mickey Mouse",
    "Minnie Mouse",
    "Elsa"

}

print(disney_characters)

disney_characters.add("Arial")
print(disney_characters)

disney_characters.update(["Donald Duck","Goofy"])
print(disney_characters)
disney_characters.update("Simba","Pluto","Mic



 



	disney_characters.update(["Donald Duck","Goofy"])
print(disney_characters)
disney_characters.update("Simba","Pluto","Mickey MOuse")

agents={"Mulder","Scully","Doggett","Reyes"}

agents.remove("Mulder")
print(agents)
agents.remove("Skinner")

agents.discard("Skinner")
agents.discard("Mulder")
print(agents)





	candy_bars={"Milky Way","Snickers","100 Grand"}
sweet_things={"Sour Patch Kids","Reses Pieces","Snickers"}

print(candy_bars)
print(sweet_things)

print(candy_bars.intersection(sweet_things))
print(candy_bars&sweet_things)

values={3.0,4.0,5.0}
more_values={3,4,5,6}

print(values)
print(more_values)

print(values.intersection(more_values))
print(more_values.intersection(values))
print(values & more_values)
print(more_values&values)

 





 


candy_bars={"Milky Way","Snickers","100 Grand"}
sweet_things={"Sour Patch Kids","Reses Pieces","Snickers"}

print(candy_bars.union(sweet_things))
print(sweet_things.union(candy_bars))

print(candy_bars|sweet_things)

print(sweet_things|candy_bars)

	


 




candy_bars={"Milky Way","Snickers","100 Grand"}
sweet_things={"Sour Patch Kids","Reses Pieces","Snickers"}

print(candy_bars.difference(sweet_things))
print(candy_bars-sweet_things)

print(sweet_things.difference(candy_bars))
print(candy_bars-sweet_things)


	

 


candy_bars={"Milky Way","Snickers","100 Grand"}
sweet_things={"Sour Patch Kids","Reses Pieces","Snickers"}

print(candy_bars.symmetric_difference(sweet_things))
print(candy_bars^sweet_things)

print(sweet_things.symmetric_difference(candy_bars))
print(sweet_things^candy_bars)

	

The issubset and issuperset Method
 	

 

a={1,2,3,4}
b={1,2,3,4,5}

print(a.issubset(b))
print(b.issubset(a))

print(b.issuperset(a))
print(a.issuperset(b))

print(a>b)
print(b>a)

frozenset object
 
	







mr_freeze=frozenset([1,2,3,4])
print(mr_freeze)

mr_freeze.add(4)

regular_set={1,2,3,4}
print(regular_set:"Some value")
print({mr_freeze:"Some value"})


	 

import  calculator
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py

print(calculator.creature)

print(calculator.add(45,50))




import math

print(math.ceil(4.5))
print(math.floor(4.8))
print(math.sqrt(8))
print(math.sqrt(31))
print(math.pi)









import math
import calculator

print(math.__name__)
print(calculator.__name__)

print(__name__)




 







	 



	import math
import calculator as calc

print(math.__name__)
print(calc.__name__)

if __name__=="__main__":
    print("This will only run when calculator run as a main file"
    print(subract(4,5))












Writing alias as nickname

import math
import calculator as calc
import datetime as dt

print(calc.add(3,5))
print(dt.datetime(2020,4,12))






from calculator import creator,add,subtract
from math import sqrl


print(creator)
print(add(2,4))
print(subtract(10,5))
print(sqrl(49))

#Name collision could happen make sure 


	print(add(3,5))
print(creature)
# it is discourage becaused we dont know from which mobule the 
  #The attribute came from 

	



from calculator import *
from math import *

print(add(3,5))
print(creature)
# it is discourage becaused we dont know from which mobule the 
  #The attribute came from 



 



import feature.copyright
print(feature.copyright.date_of_copyright)



	 	



 
	import feature.subfeature.calculator
import feature.copyright
#print(feature.subfeature.calculator.add(5,6))
print(feature.copyright.date_of_copyright)


To open file in python we need it to give it a proper path not relative path 


myfile = open(r"C:\Users\ASUS\Desktop\PythonCodeFile\learn-to-code-with-python-incomplete (1)\learn-to-code-with-python\04-Variables\cupcake.txt")
txt = myfile.read()
print(txt)
myfile.close()

	



Both the code with work identically open the file

with open(r"C:\Users\ASUS\Desktop\PythonCodeFile\learn-to-code-with-python-incomplete (1)\learn-to-code-with-python\04-Variables\cupcake.txt","r") as file_object:
     print(file_object.read()) 

myfile = open(r"C:\Users\ASUS\Desktop\PythonCodeFile\learn-to-code-with-python-incomplete (1)\learn-to-code-with-python\04-Variables\cupcake.txt")
txt = myfile.read()
print(txt)
myfile.close()







with open(r"C:\Users\ASUS\Desktop\PythonCodeFile\learn-to-code-with-python-incomplete (1)\learn-to-code-with-python\04-Variables\cupcake.txt","r") as file_object:
    for line in file_object:
        print(line.strip())





Creating a file a writing inside the file in the same directory


file_name="my_first_file.txt"

with open(file_name,"w") as file_object:
    file_object.write("Hello file!")


file_name=r"C:\Users\ASUS\Desktop\PythonCodeFile\learn-to-code-with-python-incomplete (1)\learn-to-code-with-python\04-Variables\cupcake.txt"
with open(file_name,'w') as file_object:
    file_object.write("Third line is the best line")
file_name="my_first_file.txt"










Higher order function
 




def add(a,b):
    return a+b
def subtract(a,b):
    return a-b


add(2,3)

subtract(4,2)

def calculator(func,a,b):
    return func(a,b)

calculator(add,2,3)






# Define an invoke_thrice function.
# It should accept a single argument (which will be a function)
# In its body, the invoke_thrice function should invoke
# the function that's passed in exactly three times.


    
def invoke_thrice(function):
    return [function(),function(),function()]
    



	 






In the following function we created multi level function first we created a main function called convert_gallon_to_cups in this function we created three internal function which are linked to one another, first function which is gallon_to_quarts taking its its argument from main function now after that it return a result based on calculation. Than we saved this function into a variable quarts now whatever result this function would return will be save to this variable. Now forget about function now this variable will act as an argument for next function which is quarts_to_pints and its  argument would be quarts variable now this would return a value based on the calculation and return a value now we will save this function into another variable called pints. Now forget about this function and its return values has been saved to pints variable.Now we will write our third function that variable pints will act as an argument for this function and now based on calculation this function would return a value and we would save this value to variable cup and then we would return cup as final values and now we would save this function to cups variable and that’s how this full function works.
def converts_gallon_to_cups(gallons):
    def gallon_to_quarts(gallons):
        print(f"Converting {gallons} to quarts")
        return gallons*4
    quarts= gallon_to_quarts(gallons)
    def quarts_to_pints(quarts):
        print(f"Converting {quarts} to pints")
        return quarts*2
    pints= quarts_to_pints(quarts)
    def pints_to_cups(pints):
        print(f"Converting {pints} to cups")
        return pints*2
    cups= pints_to_cups(pints)
    
    
    return cups

print(converts_gallon_to_cups(3))








 

	 
	
def calculator(operation):
    def add(a,b):
        return a+b
    
    def subtract(a,b):
        return a-b
    if operation=="add":
        return add
    elif operation=="subtract":
        return subtract

print(calculator("add")(10,4))
print(calculator("subtract")(7,7))

In the above example we created a function called calculator and inside that function we defined two other function add and subtract after that we created a if condition if user define add than return add function and if user enter subtract than return subtract function was simple as that. The point to  be noted that inside if condition we didn’t write add() but simple add and its because we wrote the name of the function.
def add(a,b):
    return a+b

def subtract(a,b):
    return a-b

def divide(a,b):
    return a-b

print(add(3,5))
operation=[add,subtract,divide]

for func in operation:
    print(func(4,5))

In the above code we created three function add,subtract and divide and after that we entered these three function in a list than we wrote our for loop and inside that loop we give the argument for each function.
 

# Define an "outer" function that accepts no arguments
# Inside the body of "outer", define an "inner" function
# The "inner" function should return the value 5.
# From "outer", return the uninvoked "inner" function


def outer():
    def inner():
        return 5
    return inner


 



 
	

 



 


Here tax_rate is global variable whereas. Global variable can be used inside function but local variable which is created inside function cannot used outside the function this is called local variable. We cannot used outside the function.

tax_rate=25

def food_after_tax(a):
    return 8*tax_rate

def tip_for_food(b):
    return 7*tax_rate


food_after_tax(6)
tip_for_food(7)

	

 










 



	food_after_tax(6)
tip_for_food(7)

def outer():
    bubble_tea_flavor="Black"
    def inner():
        nonlocal bubble_tea_flavor
        bubble_tea_flavor="Taro"
    inner()

    return bubble_tea_flavor

print(outer())







 



	 






Decorator

def be_nice(fn):
    def inner():
        print("Nice to meet you!I'm honored to execute your function for you!")
        fn()
        print("It was my plesure executing your function!Have a nice day!")
    return inner



def complex_busines_logic():
    print("Something complex!")


result=be_nice(complex_busines_logic)()








 
	




 
	


 



	 

	

 


 




	


 





	
class Person():
    pass

class DatabaseConnection():
    pass

boris=Person()
sally=Person()

print(boris)
print(sally)

dc=DatabaseConnection()
print(dc)






# Declare a Country class with an empty body.


class Country():
    pass

# Instantiate an object from the class and assign it to an “america" variable.
america=Country()



# Instantiate another object from the class and assign it to a “canada” variable.

canada=Country()


# Instantiate a third object from the class and assign it to a “mexico” variable.

mexico=Country()



	# Declare a Superhero class with an empty body.

class Superhero():
    pass

# Instantiate an object from the class and assign it to an “spiderman" variable.
spiderman=Superhero()
# Instantiate another object from the class and assign it to a “batman” variable.
batman=Superhero()


# Instantiate a third object from the class and assign it to a “superman” variable.

superman=Superhero()



 



class Guitar():
    def __init__(self):
        print(f"A new guitar is being created! This object is {self}")

accoustic=Guitar()
print(accoustic)

electric=Guitar()
print(electric)


 




 
	



class Guitar():
    def __init__(self,wood):
        self.wood=wood
        

accoustic=Guitar("Alder")
electric=Guitar("Mahogany")

print(accoustic.wood)
print(electric.wood)

baritone=Guitar("Alder")
print(baritone.wood)





	# Declare a Skyscraper class that accepts name and year parameters. 

# In the initialization process for an object, assign the name parameter to a name attribute 
# and the year parameter to a year attribute.

# Instantiate a Skyscraper object with the name “Empire State Building”  and the year 1931. 
# Assign it to a “empire" variable.

# Instantiate a Skyscraper object with the name “One World Trade Center” and the year 2014. 
# Assign it to a “wtc" variable.

class Skyscraper():
    def __init__(self,name,year):
        self.name=name
        self.year=year

empire=Skyscraper("Empire State Building",1931)


wtc=Skyscraper("One World Trade Center",2014)





# Declare a Shape class that accepts a sides parameter. 

# In the initialization process for an object, assign the sides parameter to a sides attribute on the object.

# Instantiate a Shape object with 3 sides and assign it to a “triangle" variable.

# Instantiate a Shape object with 4 sides and assign it to a “square" variable.

# Instantiate a Shape object with 10 sides and assign it to a “decagon" variable.


class Shape():
   def  __init__(self,sides):
        self.sides=sides
        
triangle=Shape(3)

square=Shape(4)

decagon=Shape(10)





# Declare a Musical class that accepts a name parameter. 
# In the initialization process for an object, assign the
# name parameter to a name attribute on the object.
#

class Musical():
    def __init__(self,name):
        self.name=name
# Instantiate a Musical object with the name “Rent” 
# and assign it to an “rent" variable.
rent=Musical("Rent")

# Instantiate a second Musical object with the name “Book of Mormon" 
# and assign it to a “mormon” variable.

mormon=Musical("Book of Mormon")

# Instantiate a third object from the class with the name “Chicago" 
# and assign it to a “chicago” variable.

chicago=Musical("Chicago")











 



class Book():
    def __init__(self,title,author,price=14.99):
        self.title=title
        self.author=author
        self.price=price

animal_farm=Book("Animal Farm","George Orwell",19.99)
gatsby=Book("The Great Gatsby", "F. Scott Fitzgerald",15.55)

print(gatsby)

altas=Book(title="Atlas Shrugged",author="Ayn Rand")
jude=Book(author="Thomas Hardy",price=24.99,title="Jude the Obscure")






# Declare a Zombie class that accepts health and brains_eaten parameters. 

    
# In the initialization process for a Zombie object, assign the 
# two parameters to two attributes with the same name.



# If the instantiation does not pass a health parameter, 
# it should be assigned a default value of 100.
#
# If the instantiation does not pass a brains_eaten parameter, 
# it should be assigned a default value of 5.

# Instantiate a Zombie object with 80 health and 5 brains eaten. 
# Assign it to a “bob” variable.
#
# Instantiate a Zombie object with 120 health and 3 brains eaten.
# Assign it to a “sally” variable.
#
# Instantiate a Zombie object with no custom parameters.
# Assign it to a “benjamin” variable.
#

class Zombie():
    def __init__(self,health=100,brains_eaten=5):
        self.health=health
        self.brains_eaten=brains_eaten
bob=Zombie(health=80,brains_eaten=5)
sally=Zombie(health=120,brains_eaten=3)
benjamin=Zombie()




 


 











	
class Pokemon():
    def __init__(self,name,speciality,health=100):
        self.name=name
        self.speciality=speciality
        self.health=health
    def roar(self):
        print("Raaarrrrr")

    def describe(self):

        print(f"I am {self.name}.I am a {self.speciality}")
    
    def take_damage(self,amount):
        self.health-=amount

print(Pokemon())



squirtle=Pokemon("Squirtle","Water")

print(squirtle.name)
charmander=Pokemon(name="Charmander",speciality="Fire",health=110)

print(charmander.speciality)

squirtle.roar()
squirtle.describe()

charmander.describe()

charmander.roar()
print(squirtle.health)

squirtle.take_damage(amount=50)

print(squirtle.health)






# Declare a Musician class that accepts age and income parameters. 

# In the instantiation process for an object, assign the two parameters
# to two attributes with the same name.

# Declare an enter_club instance method. 
# If the musician is less than 21 years old, the method should 
# return the string "Access denied!”. 
# If the musician is 21 or older, the method should
# return the string "Access granted!".

# Declare a play_show instance method. The method should
# increment the musician’s income by 5.

# EXAMPLES


class Musician():
    def __init__(self,age,income):
        self.age=age
        self.income=income
    def enter_club(self):
        if self.age<21:
            return("Access denied!")
        else:
            return("Access granted!")
            
    def play_show(self):
        self.income+=5
            
	


 

class Smartphone():
    def __init__(self):
        self._company="Apple"
        self._firmware=10.0
    def get_os_version(self):
        return self._firmware
    def Update_firmware(self):
        print("Reaching out to the sever for the next version")
        self._firmware+=1

iphone=Smartphone()

print(iphone._company)
print(iphone._firmware)

print(iphone.get_os_version)
print(iphone.Update_firmware())
print(iphone._firmware)






# book.py

# Let’s say we want to model a Book as a Python object. 
# A Book has an author and a publisher, which are characteristics that cannot change. 
# A Book also has a page_count, which could be altered if you rip some pages from the book.

# Declare a Book class that accepts author, publisher, and page_count parameters. 
# Each of the parameters should be assigned to an attribute. 
# The author and publisher attributes should be designated as protected (use an underscore). 
# The page_count attribute should be designated public.

# Define a copyright instance method that returns a string with information about the copyright. 
# It should look the string below, where “Grant Cardone” is the value of the protected
# author attribute and “10X Enterprises” is the value of the protected publisher attribute.

# => Copyright Grant Cardone, 10X Enterprises

# The public page_count attribute can always be manually modified. 
# However, we can still define an instance method that modifies it. 

# Declare a rip_in_half instance method. 
# If the book has more than 1 page, it should halve the page_count. 
# If the book has 1 page or less, it should set the page_count to 0.

# See sample execution below

class Book():
    def __init__(self,author,publisher,page_count):
        self._author=author
        self._publisher=publisher
        self.page_count=page_count
    def copyright(self):
        return(f"Copyright {self._author}, {self._publisher}")
    def rip_in_half(self):
        if self.page_count>1:
            self.page_count=self.page_count/2
        else:
            self.page_count=0
            
        
        
        


	 


class Height():
    def __init__(self,feet):
        self._inches=feet * 12
    def _get_feet(self):
        return self._inches/12

    def _set_feet(self,feet):
        self._inches=feet*12
    
    feet= property(_get_feet,_set_feet)

h=Height(5)
print(h.feet)
h.feet=6
print(h.feet)

h.feet=-19
print(h.feet)



 	





Getting and setting with decorator method.
class Currency():
    def __init__(self,dollars):
        self._cents=dollars*100
    @property
    def dollars(self):
        return self._cents/100

    @dollars.setter
    def dollars(self,dollars):
        if dollars>=0:
            self._cents=dollars*100

bank_account=Currency(50)
print(bank_account.dollars)


	# Declare a PizzaPie class that accepts a total_slices parameter. 
# In the instantiation process for an object, assign the parameter to an 
# attribute with the same name. 

# A PizzaPie object should also be initialized with a _slices_eaten 
# protected attribute set to 0.

# Define a slices_eaten property. 
# The getter method should retrieve the value of the _slices_eaten attribute. 
# The setter method should set a new value for the _slices_eaten attribute
# but only if the argument is less than total_slices.

# Define a percentage property that calculates how much of the pie has been eaten 
# (the number of slices eaten divided by the total slices available). 
# The percentage property should be read-only.

# See sample execution below
#
# cheese = PizzaPie(8)
# cheese.slices_eaten = 2
# print(cheese.percentage) # 0.25
#
# cheese.slices_eaten = 4
# print(cheese.percentage) # 0.5
#
# cheese.slices_eaten = 10 # _slices_eaten should not change because there's only 8 slices in pie
# print(cheese.percentage) # 0.5
#
# ERROR - AttributeError: can't set attribute
# cheese.percentage = 0.50

class PizzaPie():
    def __init__(self,total_slices):
        self._slices_eaten=0
        self.total_slices=total_slices
    @property   
    def slices_eaten(self):
        return self._slices_eaten
        
    @slices_eaten.setter
    def slices_eaten(self,slices_eaten):
        if slices_eaten<=self.total_slices:
            self._slices_eaten=slices_eaten
            
    def percentage(self):
        return self._slices_eaten/self.total_slices
        
        
        



 



stats={
    "name":"BBQ Chicken",
    "price": 19.99,
    "size": "Extra Large",
    "ingredients":["Chicken","Onions","BBQ Sauce"]

    
}

print(stats)
class Pizza():
    def __init__(self,stats):
        for key,value in stats.items():
            setattr(self,key,value)

bbq=Pizza(stats)
print(bbq.size)
print(bbq.ingredients)

for attr in ["price","name","diameter","discounted"]:
    print(getattr(bbq,attr,"Unknown"))
	
	

 





print(stats)
class Pizza():
    def __init__(self,stats):
        for key,value in stats.items():
            setattr(self,key,value)

bbq=Pizza(stats)
print(bbq.size)
print(bbq.ingredients)

for attr in ["price","name","diameter","discounted"]:
    print(getattr(bbq,attr,"Unknown"))

stats_to_delete=["size","diameter","spiciness","ingreadients"]

print(stats_to_delete)
for stats in stats_to_delete:
    if hasattr(bbq,stats):
        delattr(bbq,stats)

print(bbq.size)






 


class SushiPlatter():
    def __init__(self,salmon,tuna, shrimp, squid):
        self.salmon=salmon
        self.tuna=tuna
        self.shrimp=shrimp
        self.squid=squid

    @classmethod
    def lunch_special_a(cls):
        return cls(salmon=2,tuna=2,shrimp=2,squid=5)
    @classmethod
    def tuna_lover(cls):
        return cls(salmon=0,tuna=10,shrimp=0,squid=4)

boris=SushiPlatter(salmon=8,tuna=4,shrimp=5,squid=3)
print(boris.salmon)



lunch_eater=SushiPlatter.lunch_special_a()

print(lunch_eater.salmon)
print(lunch_eater.squid)
tuna_fan=SushiPlatter.tuna_lover()
print(tuna_fan.salmon)

	
# Define a Chocolate class that accepts and assigns a cacao_content attribute.

# Define a "sweet" class method that returns a 
# Chocolate object with a cacao_content value of 30.

# Define a "semisweet" class method that returns a 
# Chocolate object with a cacao_content value of 50.

# Define a "bittersweet" class method that returns a 
# Chocolate object with a cacao_content value of 70.

# Define a "bitter" class method that returns a 
# Chocolate object with a cacao_content value of 99.


class Chocolate():
    def __init__(self,cacao_content):
        self.cacao_content=cacao_content
        
    @classmethod
    def sweet(cls):
        return cls(cacao_content=30)
    @classmethod
    def semisweet(cls):
        return cls(cacao_content=50)
    @classmethod
    def bittersweet(cls):
        return cls(cacao_content=70)
    @classmethod
    def bitter(cls):
        return cls(cacao_content=99)
        
    



 




 








	 



	class Example():
    data="Class attribute!"
e1=Example()
e2=Example()
print(e1.data)

print(e2.data)

e1.data="Instance attribute"
print(e1.data)

del e1.data
print(e1.data)


>>> e1=Example()
>>> e2=Example()
>>> print(e1.data)
Class attribute!
>>> e2=Example()
>>> print(e2.data)
Class attribute!
>>> e1.data="Instance attribute"
>>> print(e1.data)
Instance attribute
>>> del e1.data
>>> print(e1.data)
Class attribute!



 


	










class WeatherForecast():
    def __init__(self,temperature):
        self.temperature=temperature
    @staticmethod
    def convert_from_fahrenheit_to_celsius(fahr):
        calculation=5/9*(fahr-32)
        return round(calculation,2)
    def in_celsius(self):
        return [self.convert_from_fahrenheit_to_celsius(temp) for temp in self.temperature]

    
wf=WeatherForecast([100,90,80,70,50])
wf.temperature

print(wf.in_celsius())




wf=WeatherForecast([100,90,80,70,50])
>>> wf.temperature
[100, 90, 80, 70, 50]
>>> print(wf.in_celsius())
[37.78, 32.22, 26.67, 21.11, 10.0]




 


	class Card():
    def __init__(self,rank,suit):
        self.rank=rank
        self.suit=suit 
    def __str__(self):
        return f"{self.rank} of {self.suit}"
    def __repr__(self):
        return f'Card("{self.rank}","{self.suit}")'


c=Card("Ace","Spades")

print(c)

print(c.__str__())
print(c.__repr__())
	>>> c=Card("Ace","Spades")
>>> print(c)
Ace of Spades
>>> print(c.__str__())
Ace of Spades
>>> print(c.__repr__())
Card("Ace","Spades")
>>>



 

# Part A: Instantiation

# Define a BusTrip class that is initialized with a destination, 
# a bus company, and a price for the trip. 
# Preserve the arguments as attributes on the object.
# The choice of whether to use protected attributes is up to you.

# Part B: String Representation

# The string representation of a BusTrip object must be a string in the form of:
#    "You paid 24.99 to Greyhound to go to Boston.""
# In this example, “Boston” is the destination, “Greyhound” is the bus company, and 24.99 is the price.
# These are all fed in as arguments when a BusTrip object is initialized.

# Part C: Equality

# Implement equality logic between two different BusTrip objects.
# Two BusTrips object are considered equal if:
#   -- they have the same destination
#   -- their price is within 3 dollars of each other
# HINT: Use Python’s abs function to calculate the absolute value of a number.

# Sample Execution

class BusTrip():
    def __init__(self,destination,company,price):
        self.destination=destination
        self.company=company
        self.price=price
   
    def __str__(self):
        return f"You paid {self.price} to {self.company} to go to {self.destination}."
    def __eq__(self,other_bustrip):
        if self.destination==other_bustrip.destination and (abs(self.price-other_bustrip.price)<3 or abs(other_bustrip.price-self.price)<3):
            return True
            
    





boston1 = BusTrip(destination = "Boston", company = "Greyhound", price = 24.99)
boston2 = BusTrip(destination = "Boston", company = "Megabus", price = 22.99)
boston3 = BusTrip(destination = "Boston", company = "Megabus", price = 49.99)
philly  = BusTrip(destination = "Philadelphia", company = "Peter Pan", price = 12.99)

print(boston1)            # You paid 24.99 to Greyhound to go to Boston.
print(boston1 == philly)  # False - different destinations
print(boston1 == boston2) # True - same destination and insignificant price difference
print(boston1 == boston3) # False - large price difference






	

 




class Student():
    def __init__(self,math,history,writing):
        self.math=math
        self.history=history
        self.writing=writing
    @property
    def grades(self):
        return self.math+self.history+self.writing
    def __eq__(self,other_student):
        return self.grades==other_student.grades

bob=Student(math=90,history=90,writing=90)
moe=Student(math=100,history=90,writing=80)
joe=Student(math=40,history=45,writing=50)

print(bob.grades)

print(moe.grades)
print(joe.grades)




	print(moe.grades)
print(joe.grades)
print(bob==moe)
print(moe==joe)
print(moe!=joe)
print(moe==joe)


	bob=Student(math=90,history=90,writing=90)
>>> moe=Student(math=100,history=90,writing=80)
>>> joe=Student(math=40,history=45,writing=50)
>>> print(bob.grades)
270
>>> print(bob.grades)
270
>>> print(moe.grades)
270
>>> print(joe.grades)
135
>>> print(bob==moe)
True
>>> print(moe==joe)
False
>>> print(moe!=joe)
True





 


	
class Student():
    def __init__(self,math,history,writing):
        self.math=math
        self.history=history
        self.writing=writing

    @property
    def grades(self):
        return self.math+self.history+self.writing
    def __eq__(self,other_student):
        return self.grades==other_student.grades
    def __gt__(self,other_student):
        return self.grades>other_student.grades
    def __le__(self,other_student):
        return self.grades<=other_student.grades
    def __add__(self,other_student):
        return self.grades+other_student.grades
    def __sub__(self,other_student):
        return self.grades-other_student.grades




bob=Student(math=90,history=90,writing=90)
moe=Student(math=100,history=90,writing=80)
joe=Student(math=40,history=45,writing=50)

print(bob.grades)
print(bob+moe)
print(bob-moe)
print(bob>moe)
print(bob<=moe)





	 

	

print(bob.grades)
270
>>> print(bob+moe)
540
>>> print(bob-moe)
0
>>> print(bob>moe)
False
>>> print(bob>moe)
False
>>> print(bob<=moe)
True
>>>





# Part A: Instantiation

# Define a BusTrip class that is initialized with a destination, 
# a bus company, and a price for the trip. 
# Preserve the arguments as attributes on the object.
# The choice of whether to use protected attributes is up to you.

# Part B: String Representation

# The string representation of a BusTrip object must be a string in the form of:
#    "You paid 24.99 to Greyhound to go to Boston.""
# In this example, “Boston” is the destination, “Greyhound” is the bus company, and 24.99 is the price.
# These are all fed in as arguments when a BusTrip object is initialized.

# Part C: Equality

# Implement equality logic between two different BusTrip objects.
# Two BusTrips object are considered equal if:
#   -- they have the same destination
#   -- their price is within 3 dollars of each other
# HINT: Use Python’s abs function to calculate the absolute value of a number.

# Sample Execution

class BusTrip():
    def __init__(self,destination,company,price):
        self.destination=destination
        self.company=company
        self.price=price
   
    def __str__(self):
        return f"You paid {self.price} to {self.company} to go to {self.destination}."
    def __eq__(self,other_bustrip):
        if self.destination==other_bustrip.destination and (abs(self.price-other_bustrip.price)<3 or abs(other_bustrip.price-self.price)<3):
            return True

	


 







	 

	


 



	 






class CollegeStudent():
    """Blueprint for a student at an institution of higher learning"""
    def __init__(self,college_name):
        self.college_name=college_name
        
    def sleep(self):
        """Sleep through class"""
        return True
        
    def eat(self):
        """Go to the cafeteria"""
        return True
    def party(self):
        """Hit the books hard"""
        return True
        
         




class Emotion():
    def __init__(self,positivity,negativity):
        self.positivity=positivity
        self.negativity=negativity
    def __bool__(self):
        return self.positivity>self.negativity
my_emotional_state=Emotion(positivity=50,negativity=75)

if my_emotional_state:
    print("This will not print because I have more negativity than positivity")

my_emotional_state.positivity=300
if my_emotional_state:
    print("This will print becasue my positivty is greater than my negativity")

print(my_emotional_state.positivity)
print(my_emotional_state.negativity)






 


class CrayonBox():
    def __init__(self):
        self.crayons=[]
    def add(self,crayon):
        self.crayons.append(crayon)
    def __getitem__(self,index):
        return self.crayons[index]
    def __setitem__(self,index,value):
        self.crayons[index]=value

    cb=CrayonBox()
    cb.add("Yellow")
    print(cb.crayons)
    cb.add("Red")
    cb.add("green")
    cb.add("blue")


    print(cb[0])

    cb[0]="Violet"

print(cb.crayons())|
for crayon in cb:
    print(crayon)

>>> for crayon in cb:
...     print(crayon)
...
Violet
Red
green
blue	




# Define a Car class that accepts a maker (string), model (string),
# and year (number) parameters and assigns them to respective
# attributes

# Define a Dealership class. Each Dealership object should instantiate
# with a "cars" attribute set to an empty list.

# A Dealership object should have a accept_delivery instance method
# that accepts a Car object and adds it to the Dealership's internal
# "cars" list

# Indexing into a Dealership with a number should access a specific
# Car object in the Dealership.

# An index position in a Dealership should also be overwriteable
# with a new Car object (see examples below)

class Car():
    def __init__(self,maker,model,year):
        self.maker=maker
        self.model=model
        self.year=year

class Dealership():
    def __init__(self):
        self.cars=[]
    def accept_delivery(self,car):
        self.cars.append(car)
    def __getitem__(self,index):
        return self.cars[index]
    def __setitem__(self,index,value):
        self.cars[index]=value
        





	





# Declare a Newspaper class. 

# Each Newspaper will have a 'pages' attribute set to an integer 
# and a 'sections' attribute set to a dictionary.
# The keys in 'sections' will be strings representing a section (i.e. "Politics") 
# and the values will be the starting page for that section (i.e. "A5").

# The length of a newspaper should be equal to the number of pages it holds.

# Indexing the newspaper by a section should return the starting pasge for that section.

# Make it so two newspapers are considered equal if they have the 
# same number of pages AND the same number of sections

# EXAMPLE:

class Newspaper():
    def __init__(self,pages,sections):
        self.pages=pages
        self.sections=sections
    def __eq__(self,other_newspaper):
        self.pages==other_newspaper.pages and len(self.sections)==len(other_newspaper.sections)
    def __getitem__(self,index):
        return self.sections[index]
    def __len__(self):
        return self.pages
        
        





 



 
 



	

class Store():
    def __init__(self):
        self.owner="Boris"
    def exclaim(self):
        return "Lot of stuff to buy, come inside!"
class CoffeeShop(Store):
    pass

starbucks=CoffeeShop()
print(starbucks.owner)
print(starbucks.exclaim())

Output

>>> print(starbucks.owner)
Boris
>>> print(starbucks.exclaim())
Lot of stuff to buy, come inside!
	 




# Declare a HardwareStore subclass that inherits from the Store superclass.
# Do not define any attributes and methods on the subclass. 
# Use the pass keyword to avoid a class body in HardwareStore.
# Instantiate a new instance of the HardwareStore class and assign it to a home_depot variable.
# Access the value of the "owner" attribute on your HardwareStore instance.
# Invoke the exclaim instance method on your HardwareStore instance.

class Store():
    def __init__(self):
        self.owner = "Boris"
  
    def exclaim(self):
        return "I'm defined in the superclass!"
        
        
class HardwareStore(Store):
    pass
home_depot=HardwareStore()
print(home_depot.owner)
print(home_depot.exclaim)
 









 



class Employee():
    def do_work(self):
        print("I'am working!")
class Manager(Employee):
    def waste_time(self):
        print("Wow, this Youtube video looks fun")
class Director(Manager):
    def fire_employee(self):
        print("You're fired!")
e=Employee()
m=Manager()
d=Director()

e.do_work()
e.waste_time()
m.do_work()
m.waste_time()
m.fire_employee()
d.fire_employee()
d.waste_time()
d.do_work()

	

e.do_work()
I'am working!
>>> e.waste_time()
Traceback (most recent call last):	

m.do_work()
I'am working!
>>> m.waste_time()
Wow, this Youtube video looks fun
>>> m.fire_employee()

d.fire_employee()
You're fired!
>>> d.waste_time()
Wow, this Youtube video looks fun
>>> d.do_work()
I'am working!



 






	
class Teacher():
    def teach_class(self):
        print("Teaching stuff...")
    def grab_lunch(self):
        print("Yum yum yum!")
    def grade_tests(self):
        print("F! F! F!")

class CollegeProfessor(Teacher):
    def publish_book(self):
        print("Horray,I'm an author")
    def grade_tests(self):
        print("A! A! A!")

teacher=Teacher()
professor=CollegeProfessor()
teacher.teach_class()\
teacher.grab_lunch()
teacher.grade_tests()
professor.publish_book()
professor.teach_class()
professor.grab_lunch()
professor.grade_tests()




	t=Teacher()
>>> teacher=Teacher()
>>> professor=CollegeProfessor()
>>> teacher.teach_class()
Teaching stuff...
>>> teacher.grab_lunch()
Yum yum yum!
>>> teacher.grade_tests()
F! F! F!
>>> professor.publish_book()
Horray,I'm an author
>>> professor.teach_class()
Teaching stuff...
>>> professor.grab_lunch()
Yum yum yum!
>>> professor.grade_tests()
A! A! A!
>>>








# Define a Clothing superclass with wear and sell instance methods.
# The wear method should return the string “I'm wearing this fashionable piece of clothing!”
# The sell method should return the string “Buy my piece of clothing!”

# Define a Socks subclass that inherits from the Clothing superclass.
# It should define a lose_one instance method that 
# returns the string “Where did my other one go?”
# It should override the wear method to 
# return the string “Take a look at my socks! They're gorgeous!”
# It should override the sell method to 
# return the string “Buy my socks!”


class Clothing():
    def wear(self):
        print("I'm wearing this fashionable piece of clothing!")
    def sell(self):
        print("Buy my piece of clothing!")

class Socks(Clothing):
    def lose_one(self):
        print("Where did my other one go?")
    def wear(self):
        print("Take a look at my socks! They're gorgeous!")
    def sell(self):
        print("Buy my socks!")
        



 


	class Animal():
    def __init__(self,name):
        self.name=name
    def eat(self,food):
        return f"{self.name} is enjoying the {food}"

class Dog(Animal):
    def __init__(self,name,breed):
        super().__init__(name)
        self.breed=breed

watson=Dog("Watson","Golden Retriever")
print(watson.name)
print(watson.breed)


print(watson.name)
Watson
>>> print(watson.breed)
Golden Retriever
>>> print(watson)
<__main__.Dog object at 0x0000015D8D717160>



# Declare a Musician class that accepts a name argument in its initialization.
# The initialization should assign a name argument to a name attribute. 
# In addition, each Musician object should have an "albums" attribute 
# that begins as an empty list.
# Define a release_album instance method on a Musician that accepts a title (string). 
# It should append the string to the end of the list held by the
# albums attribute (see examples below).
#
# Declare a Drummer subclass than inherits from the Musician superclass. 
# In addition to a name, a drummer should also have a stamina attribute 
# represented by an integer. 
# The subclass should invoke the Musician superclass’s initialization procedure
# and pass it the drummer’s name.
# It should also set the stamina attribute in its own initialization process.
#



class Musician():
    def __init__(self,name):
        self.name=name
        self.albums=[]
    def release_album(self,title):
        self.albums.append(title)
class Drummer(Musician):
    def __init__(self,name,stamina):
        self.stamina=stamina
        super().__init__(name)
     







class Person():
    def __init__(self,name,height):
        self.name=name
        self.height=height
    def __len__(self):
        return self.height
value=[
    "Vijay",
    [1,2,3],
    (4,5,6,7),
    {"a":1,"b":2},
    Person(name="Vijay",height=76)

]

print(len(value))
for values in value:
    print(len(values))

5
3
4
2
76

 
 


Random move with polymorphism:-

class Player():
    def __init__(self,games_played,victories):
        self.games_played=games_played
        self.victories=victories
    @property
    def win_ratio(self):
        return self.victories/self.games_played

class HumanPlayer(Player):
    def make_move(self):
        print("Let's player make the decision")
class ComputerPlayer(Player):
    def make_move(self):
        print("Run advanced algorithm to calculate best move")

hp=HumanPlayer(games_played=30,victories=15)
cp=ComputerPlayer(games_played=1000,victories=999)

print(hp.games_played)
print(cp.games_played)
print(cp.victories)
print(hp.victories)

import random


game_players=[hp,cp]
starting_player=random.choice(game_players)
starting_player.make_move()



 


	class Nonsense():
    def __init__(self):
        self.__some_attribute="Hello"

    def __some_method(self):
        print("This is coming from some_method")
class SpecialNonsense(Nonsense):
    pass

n=Nonsense()
sn=SpecialNonsense()


n.__some_attribute
n._Nonsense__some_attribute
sn._Nonsense__some_method()
n._Nonsense__some_attribute

sn._Nonsense__some_attribute



 




Multiple Inheritance
	class FrozenFood():
    def thaw(self,minutes):
        print(f"Thawing for {minutes} minutes")

    def store (self):
        print("Putting in the freezer!")
class Dessert():
    def and_weight(self):
        print("Putting onthe pounds!")

    def store(self):
        print("PUtting in the refregerator!")
class IceCream(Dessert,FrozenFood):
    pass

ic=IceCream()
ic.and_weight()
ic.thaw(5)
ic.store()


OUtput
> ic.thaw(5)
Thawing for 5 minutes
>>> ic.store()
PUtting in the refregerator!
>>> class IceCream(FrozenFood,Dessert):
...     pass
...
>>> ic=IceCream()
>>> ic.and_weight()
Putting onthe pounds!
>>> ic.thaw(5)
Thawing for 5 minutes
>>> ic.store()
Putting in the freezer!
>>>





 



	class Restaurant():
    def make_reservation(self,party_size):
        print(f"Booked a table for {party_size}")
class Steakhouse(Restaurant):
    pass

class Bar():
    def make_reservation(self,party_size):
        print(f"Booked a lounge for {party_size}")

class BarAndGrill(Steakhouse,Bar):
    pass
bag=BarAndGrill()
bag.make_reservation(2)



>>> bag=BarAndGrill()
>>> bag.make_reservation(2)
Booked a table for 2


 



 


	


 











	 




 



	



class FilmMaker():
    def give_interview(self):
        print("I love making movies!")
class Director(FilmMaker):
    pass

class Screenwriter(FilmMaker):
    def give_interview(Self):
        print("I love writing scripts!")
class JackOfAllTrades(Director,Screenwriter):
    pass

stallone=JackOfAllTrades()
stallone.give_interview()
print(JackOfAllTrades.mro())


stallone.give_interview()
I love writing scripts!
>>> print(JackOfAllTrades.mro())
[<class '__main__.JackOfAllTrades'>, <class '__main__.Director'>, <class '__main__.Screenwriter'>, <class '__main__.FilmMaker'>, <class 'object'>]__.Screenwriter'>, <class '__main__.FilmMaker'>, <class 'object'>]
>>>


class FilmMaker():
    def give_interview(self):
        print("I love making movies!")
class Director(FilmMaker):
    pass

class Screenwriter(FilmMaker):
    def give_interview(Self):
        print("I love writing scripts!")
class JackOfAllTrades(Screenwriter,Director):
    pass



print(JackOfAllTrades.mro())
[<class '__main__.JackOfAllTrades'>, <class '__main__.Screenwriter'>, <class '__main__.Director'>, <class '__main__.FilmMaker'>, <class 'object'>]



 

	 


class Person():
    pass

class SuperHero(Person):
    pass

arnold=Person()
boris=SuperHero()

print(isinstance(boris,SuperHero))
print(isinstance(boris,Person))

print(isinstance(boris,Person))
print(isinstance(arnold,SuperHero))
print(isinstance(arnold,Person))






 




	 

	
print(divide_five_by_number(10))
print(divide_five_by_number("Nonsense"))



e
def divide_five_by_number(n):
    try:
        return 5/n
    except:
        return 5
print (divide_five_by_number(0))
print(divide_five_by_number(10))
print(divide_five_by_number("Nonsense"))



	 



 






def divide_by_number(n):
    try:
        calculation=5/n
    except ZeroDivisionError:
        return "You can't divide by zero!"
    except TypeError as e:
        return f"No dividing by invalid object!{e}"
    return calculation


print(divide_by_number(10))
print(divide_by_number(0))
print(divide_by_number("nonsense"))

> print(divide_by_number(10))
0.5
>>> print(divide_by_number(0))
You can't divide by zero!
>>> print(divide_by_number("nonsense"))
No dividing by invalid object!unsupported operand type(s) for /: 'int' and 'str'
>>>



 	



def add_positive_numbers(a,b):
    try:
        if a<=0 or b<=0:
            raise ValueError("One or both of the values is invalid ")
        return a+b
    except ValueError as e:
        return f"Caught the ValueError:{e}"
        

print(add_positive_numbers(10,3))
print(add_positive_numbers(-2,3))
print(add_positive_numbers(5,-8))





	



 

	

class NegativeNumberError(Exception):
    """One or more inputs are negative"""
    pass
def add_positive_numberss(a,b):
    try:
        if a<=0 or b<=0:
            raise NegativeNumbersError
    except NegativeNumberError:
        return "Shame on you, not valid!"

print(add_positive_numbers(-5,-2))




>>> print(add_positive_numbers(-5,-2))
Caught the ValueError:One or both of the values is invalid
>>>



	 


 



class Mistake(Exception):
    pass
class StupidMistake(Mistake):
    pass
class SillyMistake(Mistake):
    pass
try:
    raise StupidMisake("Extra stupid mistake")
except StupidMistake as e:
    print(f"Caugh the error:{e}")
try:
    raise StupidMistake("Extra stupid misake")
except Mistake as e:
    print(f"Caugh the error: {e}")
try:
    raise SillyMistake("Super silly misake")
except Mistake as e:
    print(f"Caugh the error: {e}")


x=10
try:
    print(x+5)
except NameError:
    print("Some variable is not defined!")
else:
    print("This will print if there is no error in the try.")

finally:
    print("This will print with or without exception")
    print("Closing file...")
    











from datetime import date
birthday=date(1991,2,14)
print(birthday)
print(type(birthday))

moon_landing=date(year=1969, month=7,day=2)
print(moon_landing)
print(birthday.year)
print(birthday.month)
print(birthday.day)

today=date.today()
print(today)
print(type(today))
 







	
from datetime import date
birthday=date(1991,2,14)
print(birthday)
print(type(birthday))

moon_landing=date(year=1969, month=7,day=2)
print(moon_landing)
print(birthday.year)
print(birthday.month)
print(birthday.day)

today=date.today()
print(today)
print(type(today))

	birthday=date(1991,2,14)
>>> print(birthday)
1991-02-14
>>> print(type(birthday))
<class 'datetime.date'>
>>> moon_landing=date(year=1969, month=7,day=2)
>>> print(moon_landing)
1969-07-02
>>> print(birthday.year)
1991
>>> print(birthday.month)
2
>>> print(birthday.day)
14
>>> today=date.today()
>>> print(today)
2021-03-16
>>> print(type(today))
<class 'datetime.date'>


	 


	
from datetime import date
birthday=date(1991,2,14)
print(birthday)
print(type(birthday))

moon_landing=date(year=1969, month=7,day=2)
print(moon_landing)
print(birthday.year)
print(birthday.month)
print(birthday.day)

today=date.today()
print(today)
print(type(today))

from datetime import time
start=time()
print(start)
print(type(start))
print(start.hour)
print(start.minute)
print(start.second)
print(time(6))
print(time(hour=6))
print(time(12,5))
print(time(hour=12,minute=15,second=12))
print(time(23,34,33))
evening=time(hour=22,minute=12,second=5)
print(evening)
print(evening.hour)
print(evening.minute)
print(evening.second)



print(time(6))
06:00:00
>>> print(time(hour=6))
06:00:00
>>> print(time(12,5))
12:05:00
>>> print(time(hour=12,minute=15,second=12))
12:15:12
>>> print(time(23,34,33))
23:34:33
>>> evenng=time(hour=22,minute=12,second=5)
>>> print(evennng)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'evennng' is not defined
>>> evening=time(hour=22,minute=12,second=5)
>>> print(evening)
22:12:05
>>> print(evening.hour)
22
>>> print(evening.minute)
12
>>> print(evening.second)
5





	# Declare a titanic variable pointing to a date object representing April 14th, 1912
# Declare an independence_day variable pointing to a date object representing July 4th, 1776
# Declare an alarm_clock variable set to a time object representing 05:45:00AM
# Declare a one_second_away variable set to a time object representing 11:59:59PM

from datetime import date,time
titanic=date(year=1912,month=4,day=14)
independence_day=date(year=1776,month=7,day=4)
alarm_clock=time(5,45,00)
one_second_away=time(hour=23,minute=59,second=59)


	 



	
from datetime import time
start=time()
print(start)
print(type(start))
print(start.hour)
print(start.minute)
print(start.second)
print(time(6))
print(time(hour=6))
print(time(12,5))
print(time(hour=12,minute=15,second=12))
print(time(23,34,33))
evening=time(hour=22,minute=12,second=5)
print(evening)
print(evening.hour)
print(evening.minute)
print(evening.second)

from datetime import datetime

today=datetime.today()
print(today.strftime("%m"))
print(today.strftime("%m %d"))
print(today.strftime("%m %d %Y"))
print(today.strftime("%Y-%m-%d"))
print(today.strftime("%A"))
print(today.strftime("%B"))









today=datetime.today()
>>> print(today.strftime("%m"))
03
>>> print(today.strftime("%m %d"))
03 16
>>> print(today.strftime("%m %d %Y"))
03 16 2021
>>> print(today.strftime("%Y-%m-%d"))
2021-03-16
>>> print(today.strftime("%A"))
Tuesday
>>> print(today.strftime("%B"))
March
	



 



# Define a one_from_two function that accepts a date object and a time object
# It should return a datetime object consisting of 
#     - the year, month and day from the date object 
#     - the hour, minutes, and seconds from the time object
#
# EXAMPLE:
#
# from datetime import date, time, datetime
# some_date = date(2002, 2, 22)
# some_time = time(9, 45, 23)
# one_from_two(some_date, some_time) => datetime object representing 2002-02-22 09:45:23




from datetime import datetime

def one_from_two(some_date,some_time):
    year=some_date.year
    month=some_date.month
    day=some_date.day
    hour=some_time.hour
    minute=some_time.minute
    second=some_time.second
    
    return datetime(year,month,day,hour,minute,second)



	 



	
from datetime import datetime,timedelta

birthday=datetime(1990,2,14,6,25)
today=datetime.now()
my_life_span=today-birthday
print(my_life_span)
print(my_life_span.total_seconds())
20000000/86400

3600*24
two_thirty_one=timedelta(days=231,hours=12)
print(two_thirty_one)
print(birthday+two_thirty_one)
print(today+two_thirty_one)

 
	import random
print(random.random()*100)
print(random.randint(1,5))
print(random.randrange(0,50,5))




 








import random
lottery_numbers=random.choice(["Bob","Moe","Curly"])
lottery_numbers=[random.randint(1005,10000) for value in range(50)]
print(random.sample(lottery_numbers,1))
print(random.sample(lottery_numbers,2))
print(random.sample(lottery_numbers,6))

	



	 



	
import random
character=["Warrior","Druid","Hunter","Rogue","Mage"]
clone=character[:]
print(clone)
random.shuffle(clone)
print(clone)
print(character)

 



	 










	def add(x,y):
    assert isinstance(x,int) and isinstance(y,int), "This is not a valid input"
    return x+y

print(add(3,5))
print(add(4,"5"))


 


 



	def sum_of_list(numbers):
    """Return the sum of all numbers in a lits.
    >>>  sum_of_list([1,2,3])
    6
    >>> sum_of_list([5,8,14])
    27
    """
    total=0
    for num in numbers:
        total+=num
    return total

if __name__=="__main__":
    import doctest
    doctest.testmod()
    


 




import unittest

class TestStringMethods(unittest.TestCase):
    def test_split(self):
        pass

if __name__=="__main__":
    unittest.main()


------------------------------------------------------python\04-Variables\tempCodeRunnerFile.py"----------------
Ran 1 test in 0.001s                                  ----------------

OK






	 




import unittest

class TestStringMethods(unittest.TestCase):
    def test_split(self):
        a=[1,2,3]
        b=a
        c=[1,2,3]

        self.assertEqual(a,b)
        self.assertEqual(a,c)
        self.assertIs(a,b)
        self.assertIsNot(a,b)
        self.assertIsNot(b,c)

if __name__=="__main__":
    unittest.main()


	Ran 1 test in 0.001s

FAILED (failures=1)


 














import unittest

class TruthinessAndFalsiness(unittest.TestCase):
    def test_truthiness(self):
        self.assertTrue(3<5)
        self.assertTrue(1)
        self.assertTrue("hello")
        self.assertTrue(["a"])
        self.asertTrue({"b":5})

    def test_falsiness(self):
        self.assertFalse(False)
        self.assertFalse(0)
        self.assertFalse("")
        self.assertFalse([])
        self.assertFalse({})

if __name__=="__main__":
    unittest.main()
    


	

	 




	import unittest

def explicit_return_sum(a,b):
    return a+b

def implicit_return_sum(a,b):
    print(a+b)

class TestNone(unittest.TestCase):
    def test_sum_functions(self):
        self.assertIsNone(implicit_return_sum(3,5))
        self.assertIsNotNone(explicit_return_sum(10,2))

if __name__=="__main__":
    unittest.main()







 


	import unittest

class InclusionTests(unittest.TestCase):
    def test_inclusion(self):
        self.assertIn("k","king")
        self.assertIn(1, [1,2,3])
        self.assertIn(5,(6,5,7))
        self.assertIn("a",{"a":1,"b":2})
        self.assertIn("a",{"a":1,"b":2}.keys())
        self.assertIn(2,{"a":1,"b":2}.values())
        self.assertIn(55, range(50,59))
    
    def test_non_inclusion(self):
        self.assertNotIn("w","king")
        self.assertNotIn(10,[1,2,3])
        self.assertNotIn(15,(6,5,7))
        self.assertNotIn("c",{"a":1,"b":2})
        self.assertNotIn("c",{"a":1,"b":2}.keys())
        self.assertNotIn(5,{"a":1,"b":2}.values())
        self.assertNotIn(65, range(50,59))

if __name__== "__main__":
    unittest.main()


















	import unittest
class ObjectTypeTests(unittest.TestCase):
    def test_is_instance(self):
        self.assertIsInstance(1,int)
        self.assertIsInstance(8.765,float)
        self.assertIsInstance([],list)
        self.assertIsInstance({"a":1},dict)

    def test_not_is_instance(self):
        self.assertNotIsInstance(5,list)
        self.assertNotIsInstance(5,float)
        self.assertNotIsInstance(5,set)
        self.assertNotIsInstance(5,dict)


if __name__=="__main__":
    unittest.main()

 



 

	import unittest
def divide(x,y):
    if y==0:
        raise ZeroDivisionError
    return x/y

class DivideTestCase(unittest.TestCase):
    def test_divide(self):
        self.assertRaises(ZeroDivisionError,divide, 10,0)
    def test_divide_another_way(self):
        with self.assertRaises(ZeroDivisionError):
            divide(10,0)
if __name__=="__main__":
    unittest.main()




 
	 
 


	import unittest
class Address():
    def __init__(self,city,state):
         self.city=city
         self.state=state

class Owner():
    def __init__(self,name,age):
        self.name=name
        self.age=age

class Restaurant():
    def __init__(self,address,owner):
        self.address=address
        self.owner=owner

    @property
    def owner_age(self):
        return self.owner.age
    def summary(self):
        return f"This restaurant is owned by {self.owner.name} and is located at {self.address.city}"

class TestRestaurant(unittest.TestCase):
    def setUp(self):
        print("This will run before each test!")
        address=Address(city="New York",state="New York")
        owner=Owner(name="Jackie",age=60)
        self.golden_palace=Restaurant(address,owner)
    def tearDown(self):
        print("This will run after each test!")
    def test_owner_age(self):
        self.assertEqual(self.golden_palace.owner_age,60)
    def test_summary(self):
        self.assertEqual(self.golden_palace.summary,
        "This restaurant is owned by Jackie and is located at New York")

if __name__=="__main__":
    unittest.main()

     
        


Ran 2 tests in 0.009s

FAILED (failures=1)

 



	import unittest
class TestOperation(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        print("This will run Once before the test suits start")
    def setUp(self):
        print("This will run before Each test!")
    def tearDown(self):
        print("This will run after Each test")
    @classmethod
    def tearDownClass(cls):
        print("This will run Once the test suits end")

    def test_more_stuff(self):
        self.assertEqual([],[])


if __name__=="__main__":
    unittest.main()

This will run Once before the test suits start
This will run before Each test!
This will run after Each test
.This will run Once the test suits end


 



	from unittest.mock import Mock

pizza=Mock()
print(pizza)
print(type(pizza))
pizza.configure_mock(size="Large",price=19.99,toppings=["Pepperroni","Mushroom","Sausage"])

pizza.size="Large"
pizza.price="19.99"
pizza.toppings=["Pepperoni","Mushroom","Sausage"]

print(pizza.size)
print(pizza.price)
print(pizza.toppings)

print(pizza.anything)
print(pizza.anything.we.want)
print(pizza.cover_with_cheese())
print(pizza.cover_with_cheeses())




 
	

 
 


	from unittest.mock import Mock
from random import randint
def  generate_number():
    return randint(1,10)
call_me_maybe=Mock()
print(call_me_maybe)

call_me_maybe.return_value=10
call_me_maybe.side_effect=generate_number
print(call_me_maybe.side_effect)

print(call_me_maybe())
print(call_me_maybe())
print(call_me_maybe())
three_item_list=Mock()
three_item_list=Mock()
three_item_list.pop.side_effect=[3,2,1,IndexError("pop from empty list")]

print(three_item_list.pop())
print(three_item_list.pop())
print(three_item_list.pop())
print(three_item_list.pop())
mock=Mock(side_effect=NameError("Some error message"))
mock.side_effect=None
print(mock())

	

 


	 



	from unittest.mock import Mock,MagicMock

plain_mock=Mock()
magic_mock=MagicMock()

print(len(magic_mock))
print(magic_mock[3])
print(magic_mock[100])
print(magic_mock["hello"])
magic_mock.__len__.return_value=50
print(len(magic_mock))

magic_mock.__bool_.return_value=False
 

if magic_mock:
    print("hello")

magic_mock.__getitem__.return_value=100
print(magic_mock[3])
print(magic_mock[100])








	 


 


import unittest
from unittest.mock import MagicMock

class MockCallsTest(unittest.TestCase):
    def test_mock_calls(self):
        mock=MagicMock()
        mock()
        mock.assert_called()

    def test_not_called(self):
        mock=MagicMock()
        mock.assert_not_called()
    def test_called_with(Self):
        mock=MagicMock()
        mock(1,2,3)
        mock.assert_called_with(1,2,3)
        

if __name__=="__main__":
    unittest.main()


	 





	import unittest
from unittest.mock import MagicMock

class Actor():
    def Jump_out_of_helicopter(self):
        return "Nope, not doing it!"
    def light_on_fire(self):
        return "Heck no, where's my agent"

class Movie():
    def __init__(self,actor):
        self.actor=actor

    def start_filming(self):
        self.actor.jump_out_of_helicopter()
        self.actor.light_on_fire()


class MovieTest(unittest.TestCase):
    def test_start_filming(self):
        stuntman=MagicMock()
        movie=Movie(stuntman)
        
        movie.start_filming()
        stuntman.jump_out_of_helicopter.assert_called()
        stuntman.light_on_fire.assert_called()
    

if __name__=="__main__":
    unittest.main()




	----------------------------------------------------------------------
Ran 1 test in 0.014s

OK
	 












	 




	import unittest
from unittest.mock import MagicMock
class BurritoBowl():
    restaurant_name="Bobo's Burritos"
    @classmethod
    def steak_special(cls):
        return cls("Steak","White",1)
    def __init__(self,protein,rice,guacamole_portions):
        self.protein=protein
        self.rice=rice
        self.guacamole_portions=guacamole_portions
    def add_guac(self):
        self.guacamole_portions+=1

lunch=BurritoBowl.steak_special()
print(lunch.protein)
lunch.add_guac()
print(lunch.guacamole_portions)
lunch=BurritoBowl.restaurant_name

print(lunch)

class_mock=MagicMock(spec=BurritoBowl)
print(class_mock.restaurant_name)
print(class_mock.steak_special())
# print(class_mock.chicken_special())
# print(class_mock.city)

instance_mock=MagicMock(spec_set=BurritoBowl.steak_special())
print(instance_mock.protein)
print(instance_mock.rice)
print(instance_mock.guacamole_portions)
print(instance_mock.add_gua())
print(instance_mock.add_cheese())


	 


	 

import urllib.request
import unittest
from unittest.mock import patch
class Webrequest():
    def __init__(self,url):
        self.url=url
    def execute(self):
        response=urllib.request.urlopen(self.url)
        if response.status==200:
            return "SUCCESS"

        return "Failure"

# wr=Webrequest("http://www.google.com")
# print(wr.execute())

class WebRequestTest(unittest.TestCase):
    def test_execute_with_success_response(self):
        with patch('urllib.request.urlopen') as mock_urlopen:
            mock_urlopen.return_value.status=200
            wr=Webrequest("http://www.google.com")
            self.assertEqual(wr.execute(),"SUCCESS")
        
    def test_execute_with_failure_response(self):
        with patch('urllib.request.urlopen') as mock_urlopen:
            mock_urlopen.return_value.status=404
            wr=Webrequest("http://www.google.com")
            self.assertEqual(wr.execute(),"Failure")
        
if __name__=="__main__":
    unittest.main()



import urllib.request
import unittest
from unittest.mock import patch
class Webrequest():
    def __init__(self,url):
        self.url=url
    def execute(self):
        response=urllib.request.urlopen(self.url)
        if response.status==200:
            return "SUCCESS"

        return "Failure"

# wr=Webrequest("http://www.google.com")
# print(wr.execute())

class WebRequestTest(unittest.TestCase):
    @patch('urllib.request.urlopen')
    def test_execute_with_success_response(self):
        mock_urlopen.return_value.status=200
        wr=Webrequest("http://www.google.com")
        self.assertEqual(wr.execute(),"SUCCESS")
    @patch('urllib.request.urlopen') 
    def test_execute_with_failure_response(self):
        mock_urlopen.return_value.status=404
        wr=Webrequest("http://www.google.com")
        self.assertEqual(wr.execute(),"Failure")
        
if __name__=="__main__":
    unittest.main()




 

	 



	import unittest

def product(a,b):
    return a*b

class TestProduct(unittest.TestCase):
    def test_multiples_two_number_together(self):
        self.assertEqual(product(3,5),15)

if __name__=="__main__":
    unittest.main()



























						CARD GAME PROJECT
 

 




 
	

	 


 
	
	 




	 






	 



 




	 



 

 




	 
 



	 



	 



	 





	 

	


Checking if card in sequencing 

 


	 

	
 

 







 





	 


	 

The NSFG is not representative; instead it is deliberately oversampled.
The designers of


 


	 





	 

 








	 
	

 



 
	




	 










	 
 




	 





 
	

	 



	 




	import sys
>>> sys.path.append(r'C:\Users\ASUS\Desktop\PythonCodeFile\PokerGame\test') 
>>> from Main import deck,cards,hand1,hand2,player1,player2

	











 




 
	
 
	
	 


 



 
	

 	

	 




	 




 


	



 









	 






	 

	



 



	 





 





	  



	

 














	 





	 
	 












	 






	import re
pattern=re.compile("flower")
print(type(pattern))
print (pattern.search("candy"))
match=pattern.search("a red flower in the field flower")
print(type(match))
if match:
    print(match.group())
    print(match.start())
    print(match.end())
    print(match.span())











num_1=input("Enter first Numbers :")
num_2=input("Enter Second Number")

num_1=int(num_1)
num_2=int(num_2)
sum_1=num_1+num_2
difference=num_1-num_2
product=num_1*num_2
quotient=num_1/num_2
remainder=num_1 % num_2

print("{} + {}={}".format(num_1,num_2,sum_1))
print("{} - {}={}".format(num_1,num_2,difference))
print("{} * {}={}".format(num_1,num_2,product))
print("{} / {}={}".format(num_1,num_2,quotient))
print("{} % {}={}".format(num_1,num_2,remainder))



miles=int(input("Enter Miles"))
Kilometers=miles * 1.60934
print("{} miles equal {} kilometers".format(miles,Kilometers))




import math
print("ceil(4.4)=",math.ceil(4.4))
print("floor(4.4)=",math.floor(4.4))
print("fabs(-4.4)=",math.fabs(-4.4))
print("factorial(4)=",math.factorial(4))
print("fmod(5,4)=",math.fmod(5,4))
print("trunc(4.2)=",math.trunc(4.2))
print("pow(2,2)=",math.pow(2,2))





miles=2
kilometers=miles*1.60934
print("{} miles equals {} kilometers".format(miles,kilometers))

drink=input("Pick One(Coke or Pepsi:")
if drink=="Coke":
    print("Here is your Coke")
elif drink=="Pepsi":
    print("Here is your pepsi")
else:
    print("Here is your water")





num_1,operator,num_2=input("Enter Calculation:").split()
num_1=int(num_1)
num_2=int(num_2)
if operator=="+":
    print("{} + {} = {}".format(num_1,num_2,num_1+num_2))
elif operator=="-":
    print("{}-{}={}".format(num_1,num_2,num_1-num_2))
elif operator=="*":
    print("{}*{}={}".format(num_1,num_2,num_1*num_2))
elif operator=="/":
    print("{}/{}={}".format(num_1,num_2,num_1/num_2))
    





age=int(input("Enter Age: "))
if (age>=1) and (age<=18):
     print("Important Birthday")
elif(age==21) or (age==50):
    print("Important Birthday")
elif not age<65:
    print("Important Birthday")
else:
    print("Sorry Not IMportant Birthday")



age=int(input("Enter Age: "))
if age==5:
    print("Go to Kindergarten")
elif age>5 and age<=17:
    print("Go to Grade 6")
else:
    print("Go to College")



age=int(input("What is your age?"))
can_vote=True if age>=18 else False
print("You can vote:",can_vote)




for i in [2,4,6,8,10]:
    print("i=",i)

for i in range(2,7):
    print("i=",i)






your_float=input("Enter a float: ")
your_float=float(your_float)
print("Rounded to 2 Decimals: {:.2f}".format(your_float))






investment=float(input("Enter your investment amount: "))
interest=10
for i in range(1,11):
    investment=investment+(investment*interest*i)/100
    print(investment)




money=input("How much to invest:")
interest=input("Interest Rate:")

money=float(money)
interest=float(interest)*.01

for i in range(10):
    money=money+(money*interest*i)

print("Investment after 10 years: ${:.2f}".format(money))
     


for i in range(1,21):
    if i%2!=0:
        print(i)


import random
rand_num=random.randrange(1,51)
i=1
while i!=rand_num:
    i+=1
print("The random value is :",rand_num)




i=1
while i<=20:
    if (i%2)==0:
        i+=1
        continue
    if i==15:
        break
    print("Odd:",i)
    i+=1



while True:
    try:
        number=int(input("Please enter a number:"))
        break
    except ValueError:
        print("You didn't enter a number")
    except:
        print("An unknown error occurred")
print("Thank you for entering a number")




secret_number=7

while True:
    Guess=int(input("Enter a number:"))
    if Guess==secret_number:
        print("You guess it right")
        break
    


norm_string=input("Enter a string to hide in uppercase:")
secret_string=""
for char in norm_string:
    secret_string+=str(ord(char))
print("Secret Message:",secret_string)
norm_string=""
for i in range(0,len(secret_string)-1,2):
    char_code=secret_string[i]+secret_string[i+1]
    norm_string+=chr(int(char_code))
print("Original Message:",norm_string)





rand_string="this is an important string"

rand_string=rand_string.lstrip()
rand_string=rand_string.rstrip()
print(rand_string)


rand_string="        this is an important string        "

rand_string=rand_string.lstrip()
rand_string=rand_string.rstrip()
print(rand_string)





rand_string="        this is an important string        "
rand_string=rand_string.strip()
print(rand_string)



rand_string="        this is an important string        "
print(rand_string.strip().upper().lower().capitalize())


rand_string="This is an important string"
print("Where is:",rand_string.replace("an","a kind of"))



a_list=["Bunch","of","random","words"]
print(" ".join(a_list))


a_list=["Bunch","of","random","words"]
print(",".join(a_list))



orig_string=input("Convert fo Acronym:")
orig_string=orig_string.upper()
list_of_words=orig_string.split()
for word in list_of_words:
    print(word[0],end="")





while True:
    message=input("Enter you message:")
    key=int(input("how many characters should we shift (1-26):"))
    secret_message=""

    for char in message:
        if char.isalpha():
            char_code=ord(char)
            char_code+=key

            if char.isupper():
                if char_code>ord("Z"):
                    char_code-=26
                elif char_code<ord("A"):
                    char_code+=26
            else:
                if char_code>ord("z"):
                    char_code-=26
                elif char_code<ord("a"):
                    char_code+=26
            secret_message+=chr(char_code)
        else:
            secret_message+=char
    print("Encrpyted:",secret_message)





while True:
    message=input("Enter you message:")
    key=int(input("how many characters should we shift (1-26):"))
    secret_message=""

    for char in message:
        if char.isalpha():
            char_code=ord(char)
            char_code+=key

            if char.isupper():
                if char_code>ord("Z"):
                    char_code-=26
                elif char_code<ord("A"):
                    char_code+=26
            else:
                if char_code>ord("z"):
                    char_code-=26
                elif char_code<ord("a"):
                    char_code+=26
            secret_message+=chr(char_code)
        else:
            secret_message+=char
    print("Encrpyted:",secret_message)

    key=-key
    original_message=""
    for char in secret_message:
        if char.isalpha():
            char_code=ord(char)
            char_code+=key

            if char.isupper():
                if char_code>ord("Z"):
                    char_code-=26
                elif char_code<ord("A"):
                    char_code+=26
            else:
                if char_code>ord("z"):
                    char_code-=26
                elif char_code<ord("a"):
                    char_code+=26
            original_message+=chr(char_code)
        else:
            original_message+=char
    print("Decrpyted:",original_message)








def solve_eq(equation):
    x,add,num_1,equal,num_2=equation.split()
    num_1,num_2=int(num_1),int(num_2)
    return "x= "+str(num_2-num_1)

print(solve_eq("x + 7 = 9"))





def mult_divide(num_1,num_2):
    return (num_1*num_2),(num_1/num_2)

mult,divide=mult_divide(5,6)
print("5*4=",mult)
print("5/4=",divide)





def is_prime(num):
    for i in range(2,num):
        if(num%i)==0:
            return False
    return True

print(is_prime(6))


def sum_all(*args):
    sum_1=0
    for i in args:
        sum_1+=i
    return sum_1

print("Sum:",sum_all(1,2,3,4))



import math
while True:

    def get_area(shape):
        shape=shape.lower()
        if shape=="rectangle":
            rectangle_area()
        elif shape=="circle":
            circle_area()
        else:
            print("Please enter rectangle or circle")

    def rectangle_area():
        length=float(input("Enter the length"))
        width=float(input("Enter the width"))
        area=length*width
        print("The area of the rectangle is",area)

    def circle_area():
        radius=float(input("Enter the radius:"))
        area=math.pi*(math.pow(radius,2))
        print("The area of the cirlce is{:.2f}".format(area))

    def main():
        shape_type=input("Get area for what shape:")
        get_area(shape_type)

    main()






rand_list=["string",1.234,28]
one_to_ten=list(range(11))
rand_list=rand_list+one_to_ten
print(rand_list[0])
print("List length",len(rand_list))
first_3=rand_list[0:3]
print(first_3)

for i in first_3:
    print("{}:{}".format(first_3.index(i),i))
print(first_3[0]*3)
print("string" in first_3)

print("Index of string",first_3.index("string"))



import random
num_list=[]
for i in range(5):
    num_list.append(random.randrange(1,9))

for i in num_list:
    print(i)



import random
num_list=[]
for i in range(5):
    num_list.append(random.randrange(1,9))

for i in num_list:
    print(i)


	my_list=[5,2,9,1]
print("Length :",len(my_list))
print("1st Index :",my_list[0])
print("1st 3 Values :",my_list[:3])
print("9 in List :",9 in my_list)
print("Index for 2 :",my_list.index(2))



total=0
for i in my_list:
    if i==2:
        total+=1
print("How Many 2s :",total)

my_list.remove(1)
del my_list[0]
my_list.insert(0, 10)
print(my_list)

def fib(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        result=fib(n-1)+fib(n-2)
        return result

num_fib_vals=int(input("How many Fibonacci values should be found: "))
i=1
while i<num_fib_vals:
    fib_value=fib(i)
    print(fib_value)
    i+=1






def factorial(n):
    if n==1:
        return 1
    else:
        return n*factorial(n-1)
        
print("Factorial of 4 =",factorial(4))
        
     
class Dog:
    def __init__(self,name="",height=0,weight=0):
        self.name=name
        self.height=height
        self.weight=weight
    
    def run(self):
        print("{} the dog runs".format(self.name))
    def eat(self):
        print("{} the dog eats".format(self.name))
    def bark(self):
        print("{} the dog barks".format(self.name))

def main():
    spot=Dog("Spot",66,26)
    spot.bark()
main()



class Square:
    def __init__(self,height="0",width="0"):
        self.height=height
        self.width=width
    @property
    def height(self):
        print("Retrieving the height")
        return (self.__height)
    @height.setter
    def height(self,value):
        if value.isdigit():
            self.__height=value
        else:
            print("Please only enter numbers for height")
    @property
    def width(self):
        print("Retrieving the width")
        return self.__width

    @width.setter
    def width(self,value):
        if value.isdigit():
            self.__width=value
        else:
            print("Please only enter numbers for height")
    def get_area(self):
        return int(self.__width)* int(self.__height)

def main():
    square=Square()
    height=input("Enter Height:")
    width=input("Enter width:")
    square.height=height
    square.width=width
    print("Height :",square.height)
    print("Width:",square.width)
    print("The area is:",square.get_area())

main()


	
 
import random 
import math

class Warrior:
    def __init__(self,name="Warrior",health=0,attk_max=0,block_max=0):
        self.name=name
        self.health=health
        self.attk_max=attk_max
        self.block_max=block_max

    def attack(self):
        attk_amt=self.attk_max*(random.random()+.5)
        return attk_amt
    def block(self):
        block_amt=self.block_max*(random.random()+.5)
        return block_amt

class Battle:
    def start_fight(self,warrior1,warrior2):
        while True:
            if self.get_attack_result(warrior1,warrior2)=="Game Over":
                break
            if self.get_attack_result(warrior2,warrior1)=="Game Over":
                break
    def get_attack_result(self,warriorA,warriorB):
        warrior_a_attk_amt=warriorA.attack()
        warrior_b_block_amt=warriorB.block()
        damage_2_warrior_b=math.ceil(warrior_a_attk_amt-warrior_b_block_amt)
        warriorB.health=warriorB.health-damage_2_warrior_b
        print("{} attacks{} and deals{} damage".format(warriorA.name,warriorB.name,damage_2_warrior_b))
        print("{} is down to {} health".format(warriorB.name,warriorB.health))
        if warriorB.health<=0:
            print("{} has died and {} is Victorious".format(warriorB.name,warriorA.name))
            return "Game Over"
        else:
            return "Fight Again"

def main():
    thor=Warrior("Thor",50,20,10)
    loki=Warrior("Loki",50,20,10)
    battle=Battle()
    battle.start_fight(thor,loki)

main()

  


























class Animal:
    def __init__(self,birth_type="Unknown",appearance="Unknown",blooded="Unknown"):
        self._birth_type=birth_type
        self._appearance=appearance
        self._blooded=blooded

    @property
    def birth_type(self):
        return self._birth_type
    @birth_type.setter
    def birth_type(self,birth_type):
        self._birth_type=birth_type
    
    
    @property
    def appearance(self):
        return self._appearance
    @appearance.setter
    def appearance(self,appearance):
        self._appearance=appearance
    
    @property
    def blooded(self):
        return self._blooded
    @blooded.setter
    def blooded(self,blooded):
        self._blooded=blooded
    
    def __str__(self):
        return "A {} is {} it is {} it is {}".format(
            type(self).__name__,self.birth_type,self.appearance,self.blooded)

class Mammal(Animal):
    def __init__(self,birth_type="born alive",appearance="hair or fur",blooded="warm blood",nurse_young=True):
        Animal.__init__(self,birth_type,appearance,blooded)
        self._nurse_young=nurse_young

    @property
    def nurse_young(self):
        return self._nurse_young
    @nurse_young.setter
    def nurse_young(self,nurse_young):
        self._nurse_young=nurse_young

    def __str__(self):
        return super().__str__() + " and it is {} they nurse their young".format(self.nurse_young)
    

class Reptile(Animal):
    def __init__(self,birth_type="born in an egg or born alive",appearance="dry scales",blooded="cold blooded"):
        Animal.__init__(self,birth_type,appearance,blooded)

def main():
    animal1=Animal("born alive")
    print(animal1.birth_type)
    print(animal1)
    mammal1=Mammal()
    print(mammal1)
    print(mammal1.birth_type)
    print(mammal1.appearance)
    print(mammal1.blooded)
    print(mammal1.nurse_young)
    print()
main()













class Time:
    def __init__(self,hour=0,minute=0,second=0):
        self.hour=hour
        self.minute=minute
        self.second=second
    
    def __str__(self):
        return "{}:{:02d}:{:02d}".format(self.hour,self.minute,self.second)
    
    def __add__(self,other_time):
        new_time=Time()
        if(self.second+other_time.second)>=60:
            self.minute+=1
            new_time.second=(self.second+other_time.second)-60
        else:
            new_time.second=self.second+other_time.second
        
        if(self.minute+other_time.minute)>=60:
            self.hour+=1
            new_time.minute=(self.minute+other_time.minute)-60
        else:
            new_time.minute=self.minute+other_time.minute

        if(self.hour+other_time.hour)>=24:
               new_time.hour=(self.hour+other_time.hour)-24
            
        else:
            new_time.hour=self.hour+other_time.hour

        return new_time

def main():
    time1=Time(1,20,30)
    print(time1)
    time2=Time(24,41,30)
    print(time1+time2)

main()

	




class Sum:
    @staticmethod
    def get_sum(*args):
        sum_1=0
        for i in args:
            sum_1+=i
        return sum_1

def main():
    print ("Sum :",Sum.get_sum(1,2,3,4,5))

main()





class Dog:
    num_of_dogs=0
    
    def __init__(self,name="Unknown"):
        self.name=name 
        Dog.num_of_dogs+=1
    @staticmethod

    def get_num_of_dogs():
        print("There are currently {} dogs".format(Dog.num_of_dogs))

def main():
    spot=Dog("Spot")
    doug=Dog("Doug")
    spot.get_num_of_dogs()

main()






class DogNameError(Exception):
    def __init__(self,*args,**kwargs):
        Exception.__init__(self,*args,**kwargs)
try:
    dog_name=input("What is your dogs name: ")

    if any(char.isdigit() for char in dog_name):
        raise DogNameError
except DogNameError:
    print("Your dogs name can't contain a number")





def get_func_mult_by_num(num):
    def mult_by(value):
        return num*value
    return mult_by
generated_func=get_func_mult_by_num(5)
print("5*9=",generated_func(9))




def mult_by_2(num):
    return num*2

time_two=mult_by_2
print("4*2=",time_two(4))

def do_math(func,num):
    return func(num)

print("8*2=",do_math(mult_by_2,8))

def get_func_mult_by_num(num):
    def mult_by(value):
        return num*value
    return mult_by

generated_func=get_func_mult_by_num(5)
print("5*9=",generated_func(9))



generated_func=get_func_mult_by_num(5)
print("5*9=",generated_func(9))

list_of_funcs=[time_two,generated_func]

print("5*9=",list_of_funcs[1](9))






def is_it_odd(num):
    if num%2==0:
        return False
    else:
        return True

def change_list(list,func):
    odd_list=[]
    for i in list:
        if func(i):
            odd_list.append(i)
    return odd_list

a_list=range(1,20)
print(change_list(a_list,is_it_odd))





def random_func(name:str,age:int,weight:float)->str:
    print("Name:",name)
    print("Age:",age)
    print("Weight:",weight)
    return "{} is {} years old and weighs {}".format(name,age,weight)
print(random_func("Derek",41,165.1))

    





sum_1=lambda x,y:x+y
print("Sum:",sum_1(4,5))


can_vote=lambda age: True if age>=18 else False
print("Can Vote:",can_vote(16))


	

power_list=[lambda x: x**2,
            lambda x:x**3,
            lambda x:x**4
]

for func in power_list:
    print(func(4))
    







attack={'quick':(lambda:print("Quick Attack")),
        'power':(lambda:print("PowerAttack")),
        "miss":(lambda:print("The Attack Missed"))
}

attack['quick']()




attack={'quick':(lambda:print("Quick Attack")),
        'power':(lambda:print("PowerAttack")),
        "miss":(lambda:print("The Attack Missed"))
}

attack['quick']()

import random
attack_key=random.choice(list(attack.keys()))
attack[attack_key]()






import random
flip_list=[]
for i in range(1,101):
    flip_list+=random.choice(['H','T'])

print("Head:",flip_list.count('H'))
print("Tails:",flip_list.count('T'))




	
one_to_10=range(1,11)
def dbl_num(num):
    return num*2

print(list(map(dbl_num,one_to_10)))
print(list(map((lambda x:x*3),one_to_10)))


a_list=list(map((lambda x,y:x+y),[1,2,3],[1,2,3]))

print(a_list)






import random
rand_list=list(random.randint(1,1001) for i in range(100))
print(rand_list)
print(list(filter((lambda x:x%9==0),rand_list)))













class Alphabet:
    def __init__(self):
        self.letters="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        self.index=-1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.index>=len(self.letters)-1:
            raise StopIteration
        self.index+=1
        return self.letters[self.index]
    
alpha=Alphabet()

for letter in alpha:
    print(letter)





	
derek={"f_name":"Derek","l_name":"Banas"}

for key in derek:
    print(key,derek[key])







class Fib_Generator:
    def __init__(self):
        self.first=0
        self.second=1
    def __iter__(self):
        return self

    def __next__(self):
        fib_num=self.first+self.second
        self.first=self.second
        self.second=fib_num
        return fib_num

fib_seq=Fib_Generator()

for i in range(10):
    print("Fib:",next(fib_seq))    






print(list(map((lambda x:x*2),range(1,11))))



print([2*x for x in range(1,11)])



print(list(filter((lambda x: x%2!=0),range(1,11))))

print([x for x  in range(1,11) if x%2!=0])




print([i**2 for i in range(50) if i%8==0])




print([x*y for x in range(1,3) for y in range(11,16)])

	
print([x for x in [i*2 for i in range(10)] if x%8==0])



import random

print([x for x in [random.randint(1,1001) for i in range(50)] if x%9==0])





multi_list=[[1,2,3],[4,5,6],[7,8,9]]

print([col[1] for col in multi_list])

print([multi_list[i][i] for i in range(len(multi_list))])










def is_prime(num):
    for i in range(2,num):
        if num%i==0:
            return False
        return True
def gen_prime(max_number):
    for num1 in range(2,max_number):
        if is_prime(num1):
            yield num1

prime=gen_prime(50)

print("Prime:",next(prime))
print("Prime:",next(prime))

print("Prime:",next(prime))
print("Prime:",next(prime))




double=(x*2 for x in range(10))
print("Double:",next(double))
print("Double:",next(double))

for num in double:
    print(num)


import re 
all_apes=re.findall("ape","The ape was at the apex")
for i in all_apes:
    print(i)
    






import re 
the_str="The ape was at the apex"
for i in re.finditer("ape.",the_str):
    loc_tuple=i.span()
    print(loc_tuple)
    print(the_str[loc_tuple[0]:loc_tuple[1]])




import re

animal_str="Cat rat mat fat pat"
some_animals=re.findall("[crmfp]at",animal_str)

for i in some_animals:
    print(i)





import re

animal_str="Cat rat mat fat pat"

some_animals=re.findall("[c-mC-M]at",
    animal_str)

for i in some_animals:
    print(i)







import re
owl_food="rat cat mat pat"
regex=re.compile("[cr]at")
owl_food=regex.sub("owl",owl_food)
print(owl_food)


import re
owl_food="rat cat mat pat"
regex=re.compile("[cr]at")
owl_food=regex.sub("owl",owl_food)
print(owl_food)







import re
rand_str="F.B.I. I.R.S. CIA"
print("Matches :",len(re.findall(".\..\..",rand_str)))






import re
rand_str="""This is a long string that goes on for many lines"""

print(rand_str)
regex=re.compile("\n")
rand_str=regex.sub(" ",rand_str)
print(rand_str)





import re
rand_str="12345"
if re.search("\d{5}",rand_str):
    print("It is a zip code")



import re
rand_str="123 12345 123456 1234567"
print("MatchesZ:",len(re.findall("\d{5,7}",rand_str)))


import re
print("Matches:",len(re.findall("a+","a as ape bug")))





import re

rand_str="cat cats"
regex=re.compile("[cat]+s?")
matches=re.findall(regex,rand_str)
for i in matches:
    print(i)
    



import re
rand_str="doctor doctors doctor's"
regex=re.compile("[doctor]+['s]*")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))







import re
rand_str="doctor doctors doctor's"
regex=re.compile("[doctor]+['s]*")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))






import re
long_str="""Just some words and some more and more"""

print("Matches:",len(re.findall(r"[\w\s]+[\r]?\n",long_str)))

matches=re.findall("[\w\s]+\r]?\n",long_str)

for i in matches:
    print(i)




import re

rand_str="<name>Life On Mars</name><name>Freaks and Geeks</name>"
regex=re.compile(r"<name>.*?</name>")
matches=re.findall(regex,rand_str)

print("Matches:",len(matches))
for i in matches:
    print(i)
    



import re
rand_str="ape at the apex"
regex=re.compile(r"ape")




import re
rand_str="ape at the apex"
regex=re.compile(r"ape")
regex_2=re.compile(r"\bape\b")
matches=re.findall(regex,rand_str)
matches_2=re.findall(regex_2,rand_str)
print("Matches 1:",len(matches))
print("Matches 2:",len(matches_2))



import re
rand_str="doctor doctors doctor's"
regex=re.compile("doctor]+['s]*")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))




import re
rand_str="<name>Life on Mars</name><name>Freaks and Geeks</name>"
regex=re.compile(r"<name>.*?</name>")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))
for i in matches:
    print(i)





import re
rand_str="ape at the apex"
regex=re.compile(r"ape")
regex_2=re.compile(r"\bape\b")
matches=re.findall(regex,rand_str)
matches_2=re.findall(regex_2,rand_str)
print("Matches 1:",len(matches))
print("Matches 2:",len(matches_2))







import re
rand_str="Matches everything up to @"
regex=re.compile(r"^.*[^@]")

rand_str="""Ape is big 
Turtle is slow
 Cheetah is fast"""
regex=re.compile(r"(?m)^.*?\s")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))
for i in matches:
    print(i)
    



import re
rand_str="My number is 412-555-1212"
regex=re.compile(r"412-(.*)")
matches=re.findall(regex,rand_str)
print("Matches:",len(matches))
for i in matches:
    print(i)



import re
rand_str="412-555-1212 412-555-1213 412-555-1214"
regex=re.compile(r"412-(.*)")
matches=re.findall(regex,rand_str)
print("Matches :",len(matches))
for i in matches:
    print(i)





	C:\Users\ASUS\Desktop\db>cd studentdb.db
The system cannot find the path specified.

C:\Users\ASUS\Desktop\db>sqlite3 studentdb3.db
SQLite version 3.35.5 2021-04-19 18:32:05
Enter ".help" for usage hints.
sqlite> create table sex(
   ...> id text primary key not null,
   ...> sex_type integer);
sqlite>


          2
sqlite> .schema sex
CREATE TABLE sex(
id text primary key not null,
sex_type integer);
sqlite>


sqlite> create table student(
   ...> f_name varchar(23) not null,
   ...> l_name varchar(23) not null,
   ...> sex character(1) not null,
   ...> id integer primary key autoincrement,
   ...> foreign key(sex) references sex(id));


 


sqlite> create table test(
   ...> data date not null,
   ...> test_type int not null,
   ...> id integer primary key autoincrement,
   ...> foreign key(test_type) references test_type(id));
sqlite> create table test_score(
   ...> student_id integer not null,
   ...> test_id integer not null,
   ...> score integer not null,
   ...> foreign key (test_id) references test(id),
   ...> foreign key(student_id) references student(id),
   ...> primary key(test_id,student_id))
   ...> create table absence(
   ...> student_id integer not null,
   ...> date Date not null,
   ...> primary key(student_id,date),
   ...> foreign key(student_id) references student(id));
Error: near "create": syntax error
sqlite> create table test_score(
   ...> student_id integer not null,
   ...> test_id integer not null,
   ...> score integer not null,
   ...> foreign key (test_id) references test(id),
   ...> foreign key(student_id) references student(id),
   ...> primary key(test_id,student_id));
sqlite> create table absence(
   ...> student_id integer not null,
   ...> date Date not null,
   ...> primary key(student_id,date),
   ...> foreign key(student_id) references student(id));	





.schema student


import random
f_names=["Michael","Christopher","Joshua","Matthew","David","Daniel","Andrew","Joseph","Justin","James",
        "Jessica","Ashley","Brittany","Amanda","Melissa","Stephanie","Jennifer","Samantha",
        "Sarah","Megan","Lauren"]

l_names=["Smith","Johnson","Williams","Jones","Brown","Davis","Miller","Willson","Moore",
            "Taylor","Anderson","Thomas","Jackson","White","Harris","Martin","Thompson","Garcia","Martinez",
            "Robinson"]

def create_students(how_many):
    for i in range(how_many):
        f_name=f_names[random.randint(0,len(f_names)-1)]
        l_name=l_names[random.randint(0,len(l_names)-1)]
        sex=random.choice(['M','F'])
        print(f"Insert into student(f_name,l_name,sex) values ('{f_name}','{l_name}','{sex}');")

create_students(10)

sqlite> insert into test values (date('now'),1,null);

update test_score
   ...> set score = -1
   ...> where student_id=1 and test_id=1;
sqlite> select * from test_score
   ...> ;


update test_score
   ...> set score=-1
   ...> where student_id=2 and test_id=1;
sqlite> update test_score
   ...> set score=-1
   ...> where student_id=3 and test_id=1;
sqlite> select * f rom test_score;
Error: near "f": syntax error
sqlite> select * from test_score;


select f_name,l_name,score,test_type,data
   ...> from test,test_score,student
   ...> where data='2018-10-1'
   ...> and test.id=test_score.test_id
   ...> and test_score.student_id=student.id;

select f_name||''||l_name as Name,
   ...> count(absence.date) as Absences
   ...> from student, absence
   ...> where absence.student_id=student.id
   ...> group by id;

select f_name || ' '|| l_name as Name, score, test_id
   ...> from test_score join student
   ...> on student_id=id;


select f_name || ' ' || l_name as Name,
   ...> count(Absence.date) as Absence
   ...> from student left join absence
   ...> on absence.student_id=student.id
   ...> group by id;



select * from test_score
   ...> where score
   ...> between 15 and 20;































import random
from random import randrange
flip_list=[]
for i in range(1,101):
    flip_list+=random.choice(['H','T'])

print("Heads:",flip_list.count("H"))
print("Tails:",flip_list.count("T"))




dice_list=[]
for i in range(1,501):
    dice_list.append((randrange(1,7)+randrange(1,7)))

for i in range(2,13):
    print(f"{i}:{dice_list.count(i)}:{dice_list.count(i)/500:.2f}")
    




 






 
	





	 





	 




	import random
import re

dice_values=[0]*13

def prob_dice_rolls():
    for i in range(100000):
        die_1=random.randint(1,6)
        die_2=random.randint(1,6)
        dice_sum=die_1+die_2
        dice_values[dice_sum]+=1
    for j in range(2,13):
        print(f"{j}:{dice_values[j]/100000}")

def dud_variance(min_val,max_val):
    numerator=(max_val-min_val+1)**2
    print(f"DUD Variance:{numerator/12}")

def dud_expected_value(max_value,num):
    sum=0
    for k in range(num):
        sum+=(max_val+1)/2
    print(f"Expected Value:{sum}")

prob_dice_rolls()
dud_variance(1,6)
dud_expected_value(6,2)






 







 




	 





 






	 




 




	import numpy as np
import matplotlib.pylab as plt
from numpy import random
list_1=[1,2,3,4,5]
np_arr_1=np.array(list_1,dtype=np.int8)
np_arr_1
m_list_1=[[1,2,3],[4,5,6],[7,8,9]]
np_m_arr_1=np.array(m_list_1)
np.arange(1,10)
np.linspace(0,5,5)
np.zeros(4)
np.ones((2,3))
np.random.randint(10,30,size=(2,3))





import numpy as np
from numpy import random
arr_3=np.array([1,2,3,4])
arr_4=np.array([2,4,6,8])
arr_3-arr_4
arr_3/arr_4
arr_5=random.randint(100, size=(4))
arr_6=random.randint(100,size=(2,3))
arr_3.sum()
print(arr_6)
arr_6.sum(axis=0)
arr_6.cumsum(axis=1)
arr_6.min(axis=1)
arr_6.max(axis=1)
np.add(arr_3,5)
np.add(arr_3,arr_4)
np.subtract(arr_3,arr_4)
np.multiply(arr_3,arr_4)
np.divide(arr_3,arr_4)
arr_5=np.array([[1,2],[3,4]])
arr_6=np.array([[2,4],[6,9]])

np.remainder(arr_6,arr_5)
np.power(arr_6,arr_5)
np.sqrt(arr_3)
np.absolute(arr_3)
np.exp(arr_3)
np.log2(arr_3)
np.log10(arr_3)
np.gcd.reduce([9,12,15])
np.lcm.reduce([9,12,15])
np.floor([1.2,2.5])
np.ceil([1.2,2.5])
sq_arr=np.arange(6)**2
sq_arr[arr_3]
arr_7=np.random.randint(10,size=(5,3))
mc_index=arr_7.argmax(axis=0)
mc_index
import pandas as pd
from numpy import genfromtxt
