The following code is use the get the location of the server where anaconda is installed

C:\Users\ASUS>conda info –envs

*  C:\Users\ASUS\anaconda3
The following code is used to update the conda packages
conda update conda

The following code is used to create the play_ground where we want to 
>conda create --name play_ground
Here play_ground is called conda environment

The following code is use to activate conda environment
conda activate play_ground
Following code is used to open jupyter notebook
jupyter notebook


The process of working in Anaconda is first activate the play_ground open the Jupyter notebook by typing Jupyter Notebook. Create of work on existing notebook save the work close the notebook close the service by control C
Keyboard Short Cut
H key is for help mode to get the detail of all the shortcut
B  key is to create new cell below the existing cell.
A key is to cerate new cell above the existing cell.
D D twice to delete the cell


The following code is used to import pandas library

import pandas as pd
import numpy as np
The following code is used to get the version of the particular pandas library

pd.__version__

# sign before the code makes it and commends and python ignores that line.


None is empty container in python 

5+3
In above expression 5 and 3 are operands and + is operator

 
 
"Mahi"*11

Out[9]:
'MahiMahiMahiMahiMahiMahiMahiMahiMahiMahiMahi'

In the above code the use * sign is just multiply the same string multiple times.

PEMDAS
Parenthesis, Expression Multiplication Division Addition Subtraction

10/2
The above command would give us floating point numbers
While 
10//2
But the above command would give us integer part of number.
14%3
The above percent would give us what is the remainder 

Equality operator
Double equal sign
1==1
In the above code equality operator see whether the statement is true or false.
Not equality Operator
What Not equality operator does is check whether argument is false
Is false then It would give us true if true it would give us false
Variable
Variable are the 

Functions
Len(“This is a cat”)
It give the length of the function
Str(“3.14”)
Is convert the length 
Int(“10”)
It convert it into integer
Type(10)
The above function returns the data type what type of data it is .

Type(5)== Type(15)

In the following line of code we created  function named convert_to_ferenheit as assign a variable called celcius this vary

def convert_to_ferenheit(celcius):
    product=celcius*3
    return product

<function __main__.convert_to_ferenheit(celcius)>
In [7]:
 
x
profession="Developer"
In [8]:
 
x
profession.upper()
Out[8]:
'DEVELOPER'
In [9]:
 
xxxxxxxxxx
 
profession.lower()
Out[9]:
'developer'
In [10]:
 
xxxxxxxxxx
 
profession.swapcase()
Out[10]:
'dEVELOPER'
In [ ]:
 
 


MUTABLE=CAPABLE OF CHANGE
IMMUTABLE =INCAPABLE OF CHANGE

In the following code title me called method which we applying to a variable or string this will give us new object with initial capital letter. The point here to be noted that it does not change the original string or variable it is immutable.


'dEVELOPER'
In [11]:
 
 
"Once Upon a Time".title()
Out[11]:
'Once Upon A Time'



'Once upon a time'
In [16]:
 
x
"vijay s0".title()
Out[16]:
'Vijay S0'

In the following code we used the lstrip, rstrip and strip to remove initial latter and complete space from the string.


'Vijay S0'
In [17]:
 
 
profession="     developer     "
In [18]:
 
xxxxxxxxxx
 
profession.lstrip()
Out[18]:
'developer     '
In [19]:
 
xxxxxxxxxx
 
profession.rstrip()
Out[19]:
'     developer'
In [20]:
 
xxxxxxxxxx
 
profession.strip()
Out[20]:
'developer'
In [ ]:
 
 



In the following code we are using two method first method remove the space and then create a new object then second method replaces e with #
'developer'
In [21]:
 
 
profession.strip().replace("e","@")
Out[21]:
'd@v@lop@r'
In [ ]:
 
 




'developer'
In [21]:
 
 
profession.strip().replace("e","@")
Out[21]:
'd@v@lop@r'
In [ ]:
 
 




'd@v@lop@r'
In [22]:


 In the following code we used startswith method to check whether the string starts with a particular strings is gives true and false expression.
animal="government"
In [25]:
 
 
animal.startswith("g")
Out[25]:
True
In [26]:
 
 
animal.startswith("G")
Out[26]:
False
In [ ]:
 
 




False
In [27]:
 


IN the same way endswith deal with ending string whether it exist or not.
 
animal.endswith("l")
Out[27]:
False
In [28]:
 
 
animal.endswith("t")
Out[28]:
True


In keyworkd is used to check whether particular string is present in string or not and it gives bolean expresson.

True
In [29]:
 
 
"ver" in animal
Out[29]:
True



True
In [30]:
 



Not in used to whether particular string not present in particular string
xxxxxxxxxx
 
"go" not in animal
Out[30]:
False
In [31]:
 
xxxxxxxxxx
 
"x" not in animal
Out[31]:
True
In 



True
In [32]:
 
 
[1,2,3,4]

Out[32]:
[1, 2, 3, 4]
In [ ]:
 
 


In [35]:
 
 
playground
Out[35]:
[1, 2, 3, 4]
In 
True
In [33]:
 


The following is as list from where we can declare a list is came as array it generally hold same datatype in sequences. It is surrounded by large bracket and we can create a variable and assign it a list.
 
playground=[1,2,3,4]

In [35]:
 
 
playground
Out[35]:
[1, 2, 3, 4]
In [ ]:
 
 




[1, 2, 3, 4]
In [37]:
 
 


In the following code we create a list and assigned it into variable called party_attendee
party_attendee=("Michael","George","Robert")
In [39]:
 
 
len(party_attendee)
Out[39]:
3
In [ 





In the following code we used append method to add string to a list 
In [41]:
 
 
president=["a","b","c"]
In [42]:
 
xxxxxxxxxx
 
president
Out[42]:
['a', 'b', 'c']
In [43]:
 
xxxxxxxxxx
 
president.append("d")
In [44]:
 
xxxxxxxxxx
 
president
Out[44]:
['a', 'b', 'c', 'd']
In 


['a', 'b', 'c', 'd']
In [45]:
 
 

The opposite of append method is pop method which remove the last item from the list.

president.pop()
Out[45]:
'd'
In [46]:
 
 
president
Out[46]:
['a', 'b', 'c']




['a', 'b', 'c']




The opposite of remove method which removes the particular string or object from the list.
In [48]:
 
 
president.remove("a")
In [49]:
 
 
president
['b', 'c']
. . .
In [50]:
 
 
president.remove("c")
In [51]:
 
 
president
Out[51]:
['b']
In [ ]:
 
 





['b']
In [52]:
 
Xxxxxxxxxx

In the above code we created a list and assigned it to a variable called planet then  we check particular object is present in the list by in keyboard. 
planet=["Mercury","Venus","Earth"]
In [53]:
 
xxxxxxxxxx
 
planet
Out[53]:
['Mercury', 'Venus', 'Earth']
In [54]:
 
 
"Earth" in planet
Out[54]:
True
In [55]:
 
xxxxxxxxxx
 
"Pluto" in planet
Out[55]:
False
In [ ]:
 
 


Not in is opposite of in keyboard 

False
In [56]:
 
 
"Pluto" not in planet

Out[56]:
True
In
'e'
In [63]:
 
 In the following code we created a list and assigned it to a variable called superheroes than. The index position in python starts with 0 while is backward direction is starts with -1
superheroes=("IronMan","SuperMan","BatMan")
In [64]:
 
xxxxxxxxxx
 
len(superheroes)
Out[64]:
3
In [68]:
 
xxxxxxxxxx
 
superheroes[-1]
Out[68]:
'BatMan'
In 
'BatMan'
In [69]:
 
 








In the following code we created a list and used slicing method for slicing the 
superheroes[1:3]
Out[69]:
('SuperMan', 'BatMan')
In [70]:
 
xxxxxxxxxx
 
superheroes[2:]
Out[70]:
('BatMan',)
In [71]:
 
xxxxxxxxxx
 
superheroes[1:]
Out[71]:
('SuperMan', 'BatMan')
In [ ]:
 
 

('SuperMan', 'BatMan')
In [72]:
 
 

In the following code we used slicing at second string to not including last string

superheroes[1:-1]
Out[72]:
('SuperMan',)







('SuperMan',)
In [73]:
 
 

In the following example we created a dictionary we assigned it a value in dictionary there is a unique key and we assigned it a value. Value can dubplicate but unique key is always be unique for every pair. We cannot have to unique key in a dictionary. So basically menu is name of the dictionary.

menu={"a":2,"b":2,"C":3}
In [74]:
 
xxxxxxxxxx
 
len(menu)
Out[74]:
3
In [ ]:
 
 





2
In [76]:
 

In the following way we can add item in the dictionary 



menu["d"]=5
In [77]:
 
xxxxxxxxxx
 
menu



In the following keyword we check whether particular item is present in the dictionary with in method.
In [79]:
 
 
"d" in menu
Out[79]:
True
In [80]:
 
 
"e" in menu
Out[80]:
False



False
In [83]:
 


In the following code we used the values method to the value the values attached to the key.
 
menu.values()
Out[83]:
dict_values([2, 2, 3, 5])
In [84]:


 
xxxxxxxxxx
 
2 in menu.values()
Out[84]:
True



In the following we created a list then we added pd. Series because since we have imported as pd you can name it anything 

lottery=[34,545,42,6787]
pd.Series(lottery)








In [15]:
 


In the following code we created a dictionary and assigned it list then we created a Series function to convert it into string.

x
Designation={"Banana":"Fruit","Ball":"Play","Iron":"Metal"}
In [17]:
 
 
pd.Series(Designation)
Out[17]:
Banana    Fruit
Ball       Play
Iron      Metal
dtype: object










Banana    Fruit
Ball       Play
Iron      Metal
dtype: object
In [18]:
 
 




IN the following code we created a list and then as imported series from panda library then we stored that output into s variable the we used method function to get values for value and index to get index information. Here point to note that we did not used bracket in methods.
gadgets=["Mobile","Laptop","Charger"]
In [21]:
 
xxxxxxxxxx
 
s=pd.Series(gadgets)
In [22]:
 
xxxxxxxxxx
 
s

Out[22]:
0     Mobile
1     Laptop
2    Charger
dtype: object
In [23]:
 
xxxxxxxxxx
 
s.index
Out[23]:
RangeIndex(start=0, stop=3, step=1)
In [24]:
 
xxxxxxxxxx
 
s.values
Out[24]:
array(['Mobile', 'Laptop', 'Charger'], dtype=object)
In [ ]:
 
 



In the following list we created a list and then converted into series through pandas library and stored them into a s variable then we did our operation through method operation. Difference between method and attribute it that method do some kind of computation while attribute don’t do that.




Marks=[56,43,34,65]
s=pd.Series(Marks)
In [26]:
 
xxxxxxxxxx
 
s
Out[26]:
0    56
1    43
2    34
3    65
dtype: int64
In [28]:
 
 
s.sum()
Out[28]:
198
In [29]:
 
 
s.product()
Out[29]:
5321680
In [30]:
 
 
s.mean()
Out[30]:
Parameter and Argument
Difficulty= easy,medium, difficult
Volume= 1 to 10

So parameter is the name of the option and argument is the choice we can make in that option. So here difficulty is a parameter and easy, medium and difficult is argument.


In [31]:
 
x
 fruits=["banana","graphs","oranges","gavava"]
In [32]:
 
 
weekdays=["Monday","Tuesday","Wednesday","Thursday"]
In [36]:
 
 
pd.Series(data=fruits,index=weekdays)
Out[36]:
Monday        banana
Tuesday       graphs
Wednesday    oranges
Thursday      gavava

Here data is parameter and fruits in argument



In [12]:
 
 

The following code is used to import csv file from the computer


pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv')


In [12]:
 
 
pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv')
. . .
In [14]:
 


The following code used which column I want to use and what operation I want to perform.

pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',usecols={"Pokemon"},squeeze=True)
Out[14]:
0       Bulbasaur
1         Ivysaur
2        Venusaur
3      Charmander
4      Charmeleon
          ...    
716       Yveltal
717       Zygarde
718       Diancie
719         Hoopa
720     Volcanion
Name: Pokemon, Length: 721, dtype: object



Name: Stock Price, Length: 3012, dtype: float64
In [26]:
 

Head method gives top 5 row while tail method give bottom 5 rows and its default. We can specify any number of row we want from top or bottom.



pokemon.head()
Out[26]:
0     Bulbasaur
1       Ivysaur
2      Venusaur
3    Charmander
4    Charmeleon
Name: Pokemon, dtype: object
In [27]:
 
 
google.tail()
Out[27]:
3007    772.88
3008    771.07
3009    773.18
3010    771.61
3011    782.22
Name: Stock Price, dtype: float64


sorted(google)
type(pokemon)
 


 
google=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\google_stock_price.csv',squeeze=True)

It would give us a dictionary

dict(google)

dict(google)

In [38]:
 
 Min function give min function gives minimum value  max function gives maximum value

max(google)
Out[38]:
782.22
In [39]:
 
x
min(google)
Out[39]:
49.95


Pokemon.is_unique function gives us Boolean expression whether its true or false.


In [40]:
 
x
pokemon.is_unique
Out[40]:
True
In [41]:
 
x
google.is_unique
Out[41]:
False

In the following code we used values method to get the values of python.


721 rows × 2 columns
In [8]:
 
 
pokemon.values
Out[8]:
array([['Bulbasaur', 'Grass'],
       ['Ivysaur', 'Grass'],
       ['Venusaur', 'Grass'],
       ...,
       ['Diancie', 'Rock'],
       ['Hoopa', 'Psychic'],
       ['Volcanion', 'Fire']], dtype=object)
In [9]:
 
xxxxxxxxxx
 
google.values
Out[9]:
array([ 50.12,  54.1 ,  54.65, ..., 773.18, 771.61, 782.22])










The following code would give us values sorted by ascending order or descending order as the case may be, which 

pokemon.sort_values("Pokemon",ascending=True).head()
	Pokemon	Type
459	Abomasnow	Grass
62	Abra	Psychic
358	Absol	Dark
616	Accelgor	Bug
680	Aegislash	Steel




In [18]:
 
x
google.sort_values().head()
Out[18]:
11    49.95
9     50.07
0     50.12
10    50.70
12    50.74
Name: Stock Price, dtype: float64

In the following code we sorted the list in descending order the replace the with the new data 
google.sort_values(ascending=False,inplace=True)

In [32]:
 


The following code would sort it index column.
x
pokemon.sort_index()
Out[32]:
	Pokemon	Type
0	Bulbasaur	Grass
1	Ivysaur	Grass
2	Venusaur	Grass
3	Charmander	Fire
4	Charmeleon	Fire
...	...	...
716	Yveltal	Dark
717	Zygarde	Dragon
718	Diancie	Rock
719	Hoopa	Psychic
720	Volcanion	Fire
721 rows × 2 columns


 
 


The  following code would sort it in descending order

pokemon.sort_index(ascending=False)
Out[33]:
	Pokemon	Type
720	Volcanion	Fire
719	Hoopa	Psychic
718	Diancie	Rock
717	Zygarde	Dragon
716	Yveltal	Dark
...	...	...
4	Charmeleon	Fire
3	Charmander	Fire
2	Venusaur	Grass
1	Ivysaur	Grass
0	Bulbasaur	Grass
721 rows × 2 columns




In [36]:
 
x
"Bulbasur" in pokemon.values
Out[36]:
False


In [48]:
 
x
pokemon[:50]
Out[48]:
	Pokemon	Type
0	Bulbasaur	Grass
1	Ivysaur	Grass
2	Venusaur	Grass
3	Charmander	Fire
4	Charmeleon	Fire
5	Charizard	Fire
6	Squirtle	Water
7	Wartortle	Water
8	Blastoise	Water
9	Caterpie	Bug
10	Metapod	Bug
11	Butterfree	Bug
12	Weedle	Bug
13	Kakuna	Bug
14	Beedrill	Bug
15	Pidgey	Normal
16	Pidgeotto	Normal
17	Pidgeot	Normal
18	Rattata	Normal
19	Raticate	Normal
20	Spearow	Normal
21	Fearow	Normal
22	Ekans	Poison
23	Arbok	Poison
24	Pikachu	Electric
25	Raichu	Electric
26	Sandshrew	Ground
27	Sandslash	Ground
28	Nidoran	Poison
29	Nidorina	Poison
30	Nidoqueen	Poison
31	Nidoran♂	Poison
32	Nidorino	Poison
33	Nidoking	Poison
34	Clefairy	Fairy
35	Clefable	Fairy
36	Vulpix	Fire
37	Ninetales	Fire
38	Jigglypuff	Normal
39	Wigglytuff	Normal
40	Zubat	Poison
41	Golbat	Poison
42	Oddish	Grass
43	Gloom	Grass
44	Vileplume	Grass
45	Paras	Bug
46	Parasect	Bug
47	Venonat	Bug
48	Venomoth	Bug
49	Diglett	Ground
In [49]:
 
xxxxxxxxxx
 
pokemon[50:]
Out[49]:
	Pokemon	Type
50	Dugtrio	Ground
51	Meowth	Normal
52	Persian	Normal
53	Psyduck	Water
54	Golduck	Water
...	...	...
716	Yveltal	Dark
717	Zygarde	Dragon
718	Diancie	Rock
719	Hoopa	Psychic
720	Volcanion	Fire
671 rows × 2 columns
In [50]:
 
xxxxxxxxxx
 
pokemon[50:60]
Out[50]:
	Pokemon	Type
50	Dugtrio	Ground
51	Meowth	Normal
52	Persian	Normal
53	Psyduck	Water
54	Golduck	Water
55	Mankey	Fighting
56	Primeape	Fighting
57	Growlithe	Fire
58	Arcanine	Fire
59	Poliwag	Water
 
In the following code we are assigning index column to one of the column in excel.

x
pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',index_col="Pokemon",squeeze=True)
Out[51]:
Pokemon
Bulbasaur       Grass
Ivysaur         Grass
Venusaur        Grass
Charmander       Fire
Charmeleon       Fire
               ...   
Yveltal          Dark
Zygarde        Dragon
Diancie          Rock
Hoopa         Psychic
Volcanion        Fire
Name: Type, Length: 721, dtype: object


Out[62]:
Pokemon
Dugtrio       Ground
Meowth        Normal
Persian       Normal
Psyduck        Water
Golduck        Water
               ...  
Talonflame      Fire
Scatterbug       Bug
Spewpa           Bug
Vivillon         Bug
Litleo          Fire
Name: Type, Length: 617, dtype: object




In [67]:
 
x
pokemon.get([1,5])
Out[67]:
Pokemon
Ivysaur      Grass
Charizard     Fire
Name: Type, dtype: object



In [68]:
 
 
pokemon.count()
Out[68]:
721



In [68]:
 
 
pokemon.count()
Out[68]:
721
In [69]:
 
xxxxxxxxxx
 
google.sum()
Out[69]:
1006942.0000000001
In [70]:
 
xxxxxxxxxx
 
google.mean()
Out[70]:
334.31009296148767
In [71]:
 
xxxxxxxxxx
 
google.sum()/google.count()
Out[71]:
334.31009296148744
In [72]:
 
xxxxxxxxxx
 
google.min()
Out[72]:
49.95
In [73]:
 
xxxxxxxxxx
 
google.max()
Out[73]:
782.22
In [74]:
 
xxxxxxxxxx
 
google.median()
Out[74]:
283.315
In [75]:
 
xxxxxxxxxx
 
google.mode()
Out[75]:
0    291.21
dtype: float64
In [76]:
 
xxxxxxxxxx
 
google.describe()
Out[76]:
count    3012.000000
mean      334.310093
std       173.187205
min        49.950000
25%       218.045000
50%       283.315000
75%       443.000000
max       782.220000
Name: Stock Price, dtype: float64



In [77]:
 
xxxxxxxxxx
 
google.idxmax()
Out[77]:
3011
In [80]:
 
 
google.idxmin()
Out[80]:
11



In [82]:
 
 
pokemon.value_counts()
Out[82]:
Water       105
Normal       93
Grass        66
Bug          63
Psychic      47
Fire         47
Rock         41
Electric     36
Ground       30
Dark         28
Poison       28
Fighting     25
Dragon       24
Ice          23
Ghost        23
Steel        22
Fairy        17
Flying        3
Name: Type, dtype: int64


In [83]:
 
 
pokemon.value_counts().sum()
Out[83]:
721


In [84]:
 
 
pokemon.value_counts(ascending=True)
Out[84]:
Flying        3
Fairy        17
Steel        22
Ghost        23
Ice          23
Dragon       24
Fighting     25
Poison       28
Dark         28
Ground       30
Electric     36
Rock         41
Psychic      47
Fire         47
Bug          63
Grass        66
Normal       93
Water       105
Name: Type, dtype: int64
In [ ]:
 
 



In [87]:
 

In the following code we created a custom function specifically for our need and apply in google data.
x
def classify_performance(number):
    if number<300:
        return "ok"
    elif number>300 and number<=600:
        return "satisfactory"
    else:
        return "incredible"
In [92]:
 
 
google.apply(classify_performance)
Out[92]:
3011    incredible
2859    incredible
3009    incredible
3007    incredible
3010    incredible
           ...    
12              ok
10              ok
0               ok
9               ok
11              ok
Name: Stock Price, Length: 3012, dtype: object


The Map Method



In [96]:
 
 
google.apply(lambda stock_price:stock_price+1)
Out[96]:
3011    783.22
2859    777.60
3009    774.18
3007    773.88
3010    772.61
         ...  
12       51.74
10       51.70
0        51.12
9        51.07
11       50.95
Name: Stock Price, Length: 3012, dtype: float64


In [101]:
 
x
pokemon_name=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',usecols=["Pokemon"],squeeze=True)
In [102]:
 
xxxxxxxxxx
 
pokemon_name
Out[102]:
0       Bulbasaur
1         Ivysaur
2        Venusaur
3      Charmander
4      Charmeleon
          ...    
716       Yveltal
717       Zygarde
718       Diancie
719         Hoopa
720     Volcanion
Name: Pokemon, Length: 721, dtype: object
In [104]:
 
 
pokemon_type=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',index_col="Pokemon",squeeze=True)
In [106]:
 
 
pokemon_type
Out[106]:
Pokemon
Bulbasaur       Grass
Ivysaur         Grass
Venusaur        Grass
Charmander       Fire
Charmeleon       Fire
               ...   
Yveltal          Dark
Zygarde        Dragon
Diancie          Rock
Hoopa         Psychic
Volcanion        Fire
Name: Type, Length: 721, dtype: object
In [107]:
 
xxxxxxxxxx
 
pokemon_name.map(pokemon_type)
Out[107]:
0        Grass
1        Grass
2        Grass
3         Fire
4         Fire
        ...   
716       Dark
717     Dragon
718       Rock
719    Psychic
720       Fire
Name: Pokemon, Length: 721, dtype: object


pokemon_type=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',index_col="Pokemon",squeeze=True).to_dict()
pokemon_name=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\pokemon.csv',usecols=["Pokemon"],squeeze=True)


In [117]:
 
xxxxxxxxxx
 
nba.dtypes

Out[117]:
Name         object
Team         object
Number      float64
Position     object
Age         float64
Height       object
Weight      float64
College      object
Salary      float64
dtype: object


In [124]:
 
xxxxxxxxxx
 
rev=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\revenue.csv',index_col="Date")
In [126]:
 
xxxxxxxxxx
 
rev.head(3)
Out[126]:
	New York	Los Angeles	Miami
Date			
1/1/16	985	122	499
1/2/16	738	788	534
1/3/16	14	20	933




In [131]:
 
 
a=pd.Series([1,2,3])
In [132]:
 
xxxxxxxxxx
 
a
Out[132]:
0    1
1    2
2    3
dtype: int64




In [134]:
 
xxxxxxxxxx
 
rev.sum(axis=1)
Out[134]:
Date
1/1/16     1606
1/2/16     2060
1/3/16      967
1/4/16     2519
1/5/16      438
1/6/16     1935
1/7/16     1234
1/8/16     2313
1/9/16     2623
1/10/16     555
dtype: int64




140]:
 
 
nba.Name
Out[140]:
0      Avery Bradley
1        Jae Crowder
2       John Holland
3        R.J. Hunter
4      Jonas Jerebko
           ...      
453     Shelvin Mack
454        Raul Neto
455     Tibor Pleiss
456      Jeff Withey
457              NaN
Name: Name, Length: 458, dtype: object




In [142]:
 
xxxxxxxxxx
 
nba.Number
Out[142]:
0       0.0
1      99.0
2      30.0
3      28.0
4       8.0
       ... 
453     8.0
454    25.0
455    21.0
456    24.0
457     NaN
Name: Number, Length: 458, dtype: float64
In [143]:
 
xxxxxxxxxx
 
nba.Salary
Out[143]:
0      7730337.0
1      6796117.0
2            NaN
3      1148640.0
4      5000000.0
         ...    
453    2433333.0
454     900000.0
455    2900000.0
456     947276.0
457          NaN
Name: Salary, Length: 458, dtype: float64




In [145]:
 
 
nba[["Salary","Name",]]
Out[145]:
	Salary	Name
0	7730337.0	Avery Bradley
1	6796117.0	Jae Crowder
2	NaN	John Holland
3	1148640.0	R.J. Hunter
4	5000000.0	Jonas Jerebko
...	...	...
453	2433333.0	Shelvin Mack
454	900000.0	Raul Neto
455	2900000.0	Tibor Pleiss
456	947276.0	Jeff Withey
457	NaN	NaN
458 rows × 2 columns


In [146]:
 
xxxxxxxxxx
 
nba[["Salary","Name",]].head(4)
Out[146]:
	Salary	Name
0	7730337.0	Avery Bradley
1	6796117.0	Jae Crowder
2	NaN	John Holland
3	1148640.0	R.J. Hunter


In [149]:
 
xxxxxxxxxx
 
nba[["Salary","Name"]].tail(3)
Out[149]:
	Salary	Name
455	2900000.0	Tibor Pleiss
456	947276.0	Jeff Withey
457	NaN	NaN



In [150]:
 
 
Select=["Salary","Name"]
nba[Select]
Out[150]:
	Salary	Name
0	7730337.0	Avery Bradley
1	6796117.0	Jae Crowder
2	NaN	John Holland
3	1148640.0	R.J. Hunter
4	5000000.0	Jonas Jerebko
...	...	...
453	2433333.0	Shelvin Mack
454	900000.0	Raul Neto
455	2900000.0	Tibor Pleiss
456	947276.0	Jeff Withey
457	NaN	NaN
458 rows × 2 columns
458 rows × 10 columns
In [153]:
 
xxxxxxxxxx
 
nba["League"]="National Basket Ball Association"
In [154]:
 
xxxxxxxxxx
 
nba
Out[154]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary	Sport	League
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0	Basket Ball	National Basket Ball Association
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0	Basket Ball	National Basket Ball Association
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	NaN	Basket Ball	National Basket Ball Association
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0	Basket Ball	National Basket Ball Association
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	NaN	5000000.0	Basket Ball	National Basket Ball Association
...	...	...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0	Basket Ball	National Basket Ball Association
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	NaN	900000.0	Basket Ball	National Basket Ball Association
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	NaN	2900000.0	Basket Ball	National Basket Ball Association
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0	Basket Ball	National Basket Ball Association
457	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	Basket Ball	National Basket Ball Association
458 rows × 11 columns



458 rows × 9 columns
In [158]:
 
xxxxxxxxxx
 
nba.insert(3,column="Sport",value="BasketBall")
In [159]:
 
xxxxxxxxxx
 
nba
Out[159]:
	Name	Team	Number	Sport	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	BasketBall	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	BasketBall	SF	25.0	6-6	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	BasketBall	SG	27.0	6-5	205.0	Boston University	NaN
3	R.J. Hunter	Boston Celtics	28.0	BasketBall	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	BasketBall	PF	29.0	6-10	231.0	NaN	5000000.0
...	...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	BasketBall	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	BasketBall	PG	24.0	6-1	179.0	NaN	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	BasketBall	C	26.0	7-3	256.0	NaN	2900000.0
456	Jeff Withey	Utah Jazz	24.0	BasketBall	C	26.0	7-0	231.0	Kansas	947276.0
457	NaN	NaN	NaN	BasketBall	NaN	NaN	NaN	NaN	NaN	NaN



In [160]:
 
xxxxxxxxxx
 
nba.insert(7,column="League",value="Basket Ball Association")
In [161]:
 
xxxxxxxxxx
 
nba
Out[161]:
	Name	Team	Number	Sport	Position	Age	Height	League	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	BasketBall	PG	25.0	6-2	Basket Ball Association	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	BasketBall	SF	25.0	6-6	Basket Ball Association	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	BasketBall	SG	27.0	6-5	Basket Ball Association	205.0	Boston University	NaN
3	R.J. Hunter	Boston Celtics	28.0	BasketBall	SG	22.0	6-5	Basket Ball Association	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	BasketBall	PF	29.0	6-10	Basket Ball Association	231.0	NaN	5000000.0
...	...	...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	BasketBall	PG	26.0	6-3	Basket Ball Association	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	BasketBall	PG	24.0	6-1	Basket Ball Association	179.0	NaN	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	BasketBall	C	26.0	7-3	Basket Ball Association	256.0	NaN	2900000.0
456	Jeff Withey	Utah Jazz	24.0	BasketBall	C	26.0	7-0	Basket Ball Association	231.0	Kansas	947276.0
457	NaN	NaN	NaN	BasketBall	NaN	NaN	NaN	Basket Ball Association	NaN	NaN	NaN
458 rows × 11 columns



In [172]:
 
 
nba["Age"].add(5)
nba["Age"]+5
nba["Age"].sub(5)
nba["Age"]-5
Out[172]:
0      20.0
1      20.0
2      22.0
3      17.0
4      24.0
       ... 
453    21.0
454    19.0
455    21.0
456    21.0
457     NaN
Name: Age, Length: 458, dtype: float64



In [174]:
 
 
nba["Salary"].div(100000)
Out[174]:
0      77.30337
1      67.96117
2           NaN
3      11.48640
4      50.00000
         ...   
453    24.33333
454     9.00000
455    29.00000
456     9.47276
457         NaN
Name: Salary, Length: 458, dtype: float64



In [177]:
 
 
nba["Team"].value_counts()
Out[177]:
New Orleans Pelicans      19
Memphis Grizzlies         18
New York Knicks           16
Milwaukee Bucks           16
Los Angeles Clippers      15
Golden State Warriors     15
Utah Jazz                 15
Brooklyn Nets             15
San Antonio Spurs         15
Portland Trail Blazers    15
Miami Heat                15
Toronto Raptors           15
Atlanta Hawks             15
Charlotte Hornets         15
Cleveland Cavaliers       15
Washington Wizards        15
Indiana Pacers            15
Oklahoma City Thunder     15
Chicago Bulls             15
Los Angeles Lakers        15
Houston Rockets           15
Denver Nuggets            15
Dallas Mavericks          15
Detroit Pistons           15
Sacramento Kings          15
Phoenix Suns              15
Boston Celtics            15
Philadelphia 76ers        15
Orlando Magic             14
Minnesota Timberwolves    14
Name: Team, dtype: int64


In [178]:
 
 
nba["Position"].value_counts()
Out[178]:
SG    102
PF    100
PG     92
SF     85
C      78
Name: Position, dtype: int64



]:
 
 
nba.dropna()
Out[185]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
6	Jordan Mickey	Boston Celtics	55.0	PF	21.0	6-8	235.0	LSU	1170960.0
7	Kelly Olynyk	Boston Celtics	41.0	C	25.0	7-0	238.0	Gonzaga	2165160.0
...	...	...	...	...	...	...	...	...	...
449	Rodney Hood	Utah Jazz	5.0	SG	23.0	6-8	206.0	Duke	1348440.0
451	Chris Johnson	Utah Jazz	23.0	SF	26.0	6-6	206.0	Dayton	981348.0
452	Trey Lyles	Utah Jazz	41.0	PF	20.0	6-10	234.0	Kentucky	2239800.0
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0
364 rows × 9 columns



In [186]:
 
 
nba.dropna(subset=["Salary"])
Out[186]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	NaN	5000000.0
5	Amir Johnson	Boston Celtics	90.0	PF	29.0	6-9	240.0	NaN	12000000.0
...	...	...	...	...	...	...	...	...	...
452	Trey Lyles	Utah Jazz	41.0	PF	20.0	6-10	234.0	Kentucky	2239800.0
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	NaN	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	NaN	2900000.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0
446 rows × 9 columns


In [12]:
 
xxxxxxxxxx
 
nba.fillna("No,College",inplace=True)
In [13]:
 
xxxxxxxxxx
 
nba
Out[13]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	No,College
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	No,College	5000000.0
...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	No,College	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	No,College	2900000.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0
457	No,College	No,College	No,College	No,College	No,College	No,College	No,College	No,College	No,College
458 rows × 9 columns


In [16]:
 
xxxxxxxxxx
 
nba=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\nba.csv')
In [22]:
 
 
nba["Salary"].fillna(0,inplace=True)
In [23]:
 
xxxxxxxxxx
 
nba
Out[23]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	0.0
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	NaN	5000000.0
...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	NaN	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	NaN	2900000.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0
457	NaN	NaN	NaN	NaN	NaN	NaN	NaN	NaN	0.0
458 rows × 9 columns
In [24]:
 
 
nba.College
Out[24]:
0                  Texas
1              Marquette
2      Boston University
3          Georgia State
4                    NaN
             ...        
453               Butler
454                  NaN
455                  NaN
456               Kansas
457                  NaN
Name: College, Length: 458, dtype: object
In [25]:
 
 
nba["College"].fillna("No College",inplace=True)
In [26]:
 
xxxxxxxxxx
 
nba
Out[26]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	0.0
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	No College	5000000.0
...	...	...	...	...	...	...	...	...	...
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	No College	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	No College	2900000.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0
457	NaN	NaN	NaN	NaN	NaN	NaN	NaN	No College	0.0
458 rows × 9 columns


In [31]:
 
 
nba.dropna(how="all")
Out[31]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337.0
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117.0
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	NaN
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	1148640.0
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	NaN	5000000.0
...	...	...	...	...	...	...	...	...	...
452	Trey Lyles	Utah Jazz	41.0	PF	20.0	6-10	234.0	Kentucky	2239800.0
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	2433333.0
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	NaN	900000.0
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	NaN	2900000.0
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	947276.0


In [36]:
 
xxxxxxxxxx
 
nba.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 458 entries, 0 to 457
Data columns (total 9 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   Name      457 non-null    object 
 1   Team      457 non-null    object 
 2   Number    457 non-null    float64
 3   Position  457 non-null    object 
 4   Age       457 non-null    float64
 5   Height    457 non-null    object 
 6   Weight    457 non-null    float64
 7   College   458 non-null    object 
 8   Salary    458 non-null    float64
dtypes: float64(4), object(5)
memory usage: 32.3+ KB
In [37]:
 
 
nba.Salary=nba["Salary"].astype("int")
In [38]:
 
xxxxxxxxxx
 
nba.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 458 entries, 0 to 457
Data columns (total 9 columns):
 #   Column    Non-Null Count  Dtype  
---  ------    --------------  -----  
 0   Name      457 non-null    object 
 1   Team      457 non-null    object 
 2   Number    457 non-null    float64
 3   Position  457 non-null    object 
 4   Age       457 non-null    float64
 5   Height    457 non-null    object 
 6   Weight    457 non-null    float64
 7   College   458 non-null    object 
 8   Salary    458 non-null    int32  
dtypes: float64(3), int32(1), object(5)



In [53]:
 
 
nba.sort_values("Salary",ascending=False,inplace=True)
In [54]:
 
xxxxxxxxxx
 
nba
Out[54]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
109	Kobe Bryant	Los Angeles Lakers	24	SF	37	6-6	212.0	No College	25000000
169	LeBron James	Cleveland Cavaliers	23	SF	31	6-8	250.0	No College	22970500
33	Carmelo Anthony	New York Knicks	7	SF	32	6-8	240.0	Syracuse	22875000
251	Dwight Howard	Houston Rockets	12	C	30	6-11	265.0	No College	22359364
339	Chris Bosh	Miami Heat	1	PF	32	6-11	235.0	Georgia Tech	22192730
...	...	...	...	...	...	...	...	...	...
269	Ray McCallum	Memphis Grizzlies	5	PG	24	6-3	190.0	Detroit	0
409	Greg Smith	Minnesota Timberwolves	4	PF	25	6-10	250.0	Fresno State	0
2	John Holland	Boston Celtics	30	SG	27	6-5	205.0	Boston University	0
264	Jordan Farmar	Memphis Grizzlies	4	PG	29	6-2	180.0	UCLA	0
457	NaN	NaN	0	NaN	0	NaN	NaN	No College	0
458 rows × 9 columns

In [58]:
 
xxxxxxxxxx
 
nba.sort_values(["Team","Name"])
Out[58]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
312	Al Horford	Atlanta Hawks	15	C	30	6-10	245.0	Florida	12000000
318	Dennis Schroder	Atlanta Hawks	17	PG	22	6-1	172.0	No College	1763400
323	Jeff Teague	Atlanta Hawks	0	PG	27	6-2	186.0	Wake Forest	8000000
309	Kent Bazemore	Atlanta Hawks	24	SF	26	6-5	201.0	Old Dominion	2000000
311	Kirk Hinrich	Atlanta Hawks	12	SG	35	6-4	190.0	Kansas	2854940
...	...	...	...	...	...	...	...	...	...
376	Markieff Morris	Washington Wizards	5	PF	26	6-10	245.0	Kansas	8000000
375	Nene Hilario	Washington Wizards	42	C	33	6-11	250.0	No College	13000000
378	Otto Porter Jr.	Washington Wizards	22	SF	23	6-8	198.0	Georgetown	4662960
379	Ramon Sessions	Washington Wizards	7	PG	30	6-3	190.0	Nevada	2170465
457	NaN	NaN	0	NaN	0	NaN	NaN	No College	0
458 rows × 9 columns


458 rows × 9 columns
In [59]:
 
xxxxxxxxxx
 
nba.sort_values(["Team","Name"],ascending=[True,False])
Out[59]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
322	Walter Tavares	Atlanta Hawks	22	C	24	7-3	260.0	No College	1000000
310	Tim Hardaway Jr.	Atlanta Hawks	10	SG	24	6-6	205.0	Michigan	1304520
321	Tiago Splitter	Atlanta Hawks	11	C	31	6-11	245.0	No College	9756250
320	Thabo Sefolosha	Atlanta Hawks	25	SF	32	6-7	220.0	No College	4000000
315	Paul Millsap	Atlanta Hawks	4	PF	31	6-8	246.0	Louisiana Tech	18671659
...	...	...	...	...	...	...	...	...	...
380	Garrett Temple	Washington Wizards	17	SG	30	6-6	195.0	LSU	1100602
372	Drew Gooden	Washington Wizards	90	PF	34	6-10	250.0	Kansas	3300000
369	Bradley Beal	Washington Wizards	3	SG	22	6-5	207.0	Florida	5694674
368	Alan Anderson	Washington Wizards	6	SG	33	6-6	220.0	Michigan State	4000000
457	NaN	NaN	0	NaN	0	NaN	NaN	No College	0
458 rows × 9 columns


In [62]:
 
xxxxxxxxxx
 
nba.sort_values(["Number","Salary","Age"],inplace=True)
In [63]:
 
xxxxxxxxxx
 
nba
Out[63]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
457	NaN	NaN	0	NaN	0	NaN	NaN	No College	0
291	Orlando Johnson	New Orleans Pelicans	0	SG	27	6-5	220.0	UC Santa Barbara	55722
248	Andrew Goudelock	Houston Rockets	0	PG	27	6-3	200.0	Charleston	200600
347	Josh Richardson	Miami Heat	0	SG	22	6-6	200.0	Tennessee	525093
266	JaMychal Green	Memphis Grizzlies	0	PF	25	6-9	227.0	Alabama	845059
...	...	...	...	...	...	...	...	...	...
398	Nemanja Bjelica	Minnesota Timberwolves	88	PF	28	6-10	240.0	No College	3950001
372	Drew Gooden	Washington Wizards	90	PF	34	6-10	250.0	Kansas	3300000
5	Amir Johnson	Boston Celtics	90	PF	29	6-9	240.0	No College	12000000
68	Lucas Nogueira	Toronto Raptors	92	C	23	7-0	220.0	No College	1842000
1	Jae Crowder	Boston Celtics	99	SF	25	6-6	235.0	Marquette	6796117
458 rows × 9 columns


In [72]:
 
 
nba.dropna(how="all",inplace=True)
nba.Salary=nba["Salary"].fillna(0,inplace=True)
In [73]:
 
 
nba
Out[73]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	None
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	None
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	None
3	R.J. Hunter	Boston Celtics	28.0	SG	22.0	6-5	185.0	Georgia State	None
4	Jonas Jerebko	Boston Celtics	8.0	PF	29.0	6-10	231.0	NaN	None
...	...	...	...	...	...	...	...	...	...
452	Trey Lyles	Utah Jazz	41.0	PF	20.0	6-10	234.0	Kentucky	None
453	Shelvin Mack	Utah Jazz	8.0	PG	26.0	6-3	203.0	Butler	None
454	Raul Neto	Utah Jazz	25.0	PG	24.0	6-1	179.0	NaN	None
455	Tibor Pleiss	Utah Jazz	21.0	C	26.0	7-3	256.0	NaN	None
456	Jeff Withey	Utah Jazz	24.0	C	26.0	7-0	231.0	Kansas	None
457 rows × 9 columns


 [92]:
 
xxxxxxxxxx
 
nba["Salary Rank"]=nba["Salary"].rank(ascending=False).astype("int")
In [93]:
 
xxxxxxxxxx
 
nba.head(3)
Out[93]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary	Salary Rank
0	Avery Bradley	Boston Celtics	0.0	PG	25.0	6-2	180.0	Texas	7730337	97
1	Jae Crowder	Boston Celtics	99.0	SF	25.0	6-6	235.0	Marquette	6796117	110
2	John Holland	Boston Celtics	30.0	SG	27.0	6-5	205.0	Boston University	0	452
In [96]:
 
xxxxxxxxxx
 
nba.sort_values("Salary Rank", ascending=True)
Out[96]:
	Name	Team	Number	Position	Age	Height	Weight	College	Salary	Salary Rank
109	Kobe Bryant	Los Angeles Lakers	24.0	SF	37.0	6-6	212.0	NaN	25000000	1
169	LeBron James	Cleveland Cavaliers	23.0	SF	31.0	6-8	250.0	NaN	22970500	2
33	Carmelo Anthony	New York Knicks	7.0	SF	32.0	6-8	240.0	Syracuse	22875000	3
251	Dwight Howard	Houston Rockets	12.0	C	30.0	6-11	265.0	NaN	22359364	4
339	Chris Bosh	Miami Heat	1.0	PF	32.0	6-11	235.0	Georgia Tech	22192730	5
...	...	...	...	...	...	...	...	...	...	...
409	Greg Smith	Minnesota Timberwolves	4.0	PF	25.0	6-10	250.0	Fresno State	0	452
353	Dorell Wright	Miami Heat	11.0	SF	30.0	6-9	205.0	NaN	0	452
46	Elton Brand	Philadelphia 76ers	42.0	PF	37.0	6-9	254.0	Duke	0	452
270	Xavier Munford	Memphis Grizzlies	14.0	PG	24.0	6-3	180.0	Rhode Island	0	452
397	Axel Toupane	Denver Nuggets	6.0	SG	23.0	6-7	210.0	NaN	0	452
457 rows × 10 columns


Out[18]:
0        8/6/1993
1       3/31/1996
2       4/23/1993
3        3/4/2005
4       1/24/1998
          ...    
995    11/23/2014
996     1/31/1984
997     5/20/2013
998     4/20/2013
999     5/15/2012
Name: Start Date, Length: 1000, dtype: object
In [22]:
 
 
pd.to_datetime(df["Start Date"])


Out[22]:
0     1993-08-06
1     1996-03-31
2     1993-04-23
3     2005-03-04
4     1998-01-24
         ...    
995   2014-11-23
996   1984-01-31
997   2013-05-20
998   2013-04-20
999   2012-05-15
Name: Start Date, Length: 1000, dtype: datetime64[ns]


In [23]:
 
xxxxxxxxxx
 
df["Start Date"]=pd.to_datetime(df["Start Date"])


In [24]:
 
xxxxxxxxxx
 
df
Out[24]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	12:42 PM	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	6:53 AM	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	11:17 AM	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	1:00 PM	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	4:47 PM	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	6:09 AM	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	6:30 AM	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	12:39 PM	96914	1.421	False	Product
998	Larry	Male	2013-04-20	4:45 PM	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	6:24 PM	129949	10.169	True	Sales
1000 rows × 8 columns


In [23]:
 
xxxxxxxxxx
 
df["Start Date"]=pd.to_datetime(df["Start Date"])


In [24]:
 
 
df
Out[24]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	12:42 PM	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	6:53 AM	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	11:17 AM	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	1:00 PM	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	4:47 PM	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	6:09 AM	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	6:30 AM	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	12:39 PM	96914	1.421	False	Product
998	Larry	Male	2013-04-20	4:45 PM	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	6:24 PM	129949	10.169	True	Sales
1000 rows × 8 columns
In [26]:
 
xxxxxxxxxx
 
df["Last Login Time"]=pd.to_datetime(df["Last Login Time"])
In [27]:
 
xxxxxxxxxx
 
df
Out[27]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-24 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales
1000 rows × 8 columns


In [29]:
 
xxxxxxxxxx
 
df["Senior Management"]=df["Senior Management"].astype(bool)
In [30]:
 
xxxxxxxxxx
 
df
Out[30]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-24 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales


In [34]:
 
xxxxxxxxxx
 
df["Gender"]=df["Gender"].astype("category")
In [35]:
 
xxxxxxxxxx
 
df
Out[35]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-24 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales


 

 	


In [41]:
 
 
df[df["Gender"]=="Male"]
Out[41]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
5	Dennis	Male	1987-04-18	2021-02-24 01:35:00	115163	10.125	False	Legal
...	...	...	...	...	...	...	...	...
994	George	Male	2013-06-21	2021-02-24 17:47:00	98874	4.479	True	Marketing
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales


In [44]:
 
 




df[df["Team"]=="Finance"]
Out[44]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
7	NaN	Female	2015-07-20	2021-02-24 10:43:00	45906	11.598	True	Finance
14	Kimberly	Female	1999-01-14	2021-02-24 07:13:00	41426	14.543	True	Finance
46	Bruce	Male	2009-11-28	2021-02-24 22:47:00	114796	6.796	False	Finance
...	...	...	...	...	...	...	...	...
907	Elizabeth	Female	1998-07-27	2021-02-24 11:12:00	137144	10.081	False	Finance
954	Joe	Male	1980-01-19	2021-02-24 16:06:00	119667	1.148	True	Finance
987	Gloria	Female	2014-12-08	2021-02-24 05:08:00	136709	10.331	True	Finance
992	Anthony	Male	2011-10-16	2021-02-24 08:35:00	112769	11.625	True	Finance
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
102 rows × 8 columns



In [46]:
 
 
Mark=df["Team"]!="Marketing"
df[Mark]
Out[46]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
5	Dennis	Male	1987-04-18	2021-02-24 01:35:00	115163	10.125	False	Legal
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-24 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales
902 rows × 8 columns



In [48]:
 
xxxxxxxxxx
 
df[df["Salary"]>10000]
Out[48]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
2	Maria	Female	1993-04-23	2021-02-24 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-24 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-24 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-24 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-24 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-24 18:24:00	129949	10.169	True	Sales




In [54]:
 
xxxxxxxxxx
 Less than Operator
df[df["Bonus %"]<1.5]
Out[54]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services
15	Lillian	Female	2016-06-05	2021-02-24 06:09:00	59414	1.256	False	Product
58	Theresa	Female	2010-04-11	2021-02-24 07:18:00	72670	1.481	True	Engineering
77	Charles	Male	2004-09-14	2021-02-24 20:13:00	107391	1.260	True	Marketing
175	Willie	Male	1998-02-17	2021-02-24 20:20:00	146651	1.451	True	Engineering
189	Clarence	Male	1998-05-02	2021-02-24 03:16:00	85700	1.215	False	Sales
217	Douglas	Male	1999-09-03	2021-02-24 16:00:00	83341	1.015	True	Client Services
273	Nicholas	Male	1994-04-12	2021-02-24 20:21:00	74669	1.113	True	Product
279	Ruby	Female	2000-11-08	2021-02-24 19:35:00	105946	1.139	False	Business Development
365	Gloria	NaN	1983-07-19	2021-02-24 01:57:00	140885	1.113	False	Human Resources
445	Chris	Male	2006-12-12	2021-02-24 01:57:00	71642	1.496	False	NaN
481	NaN	Female	2013-04-27	2021-02-24 06:40:00	93847	1.085	True	Business Development
527	Helen	NaN	1993-12-02	2021-02-24 13:42:00	45724	1.022	False	Product
570	Kelly	Female	1996-08-16	2021-02-24 03:09:00	41427	1.431	False	Product
578	Amanda	Female	1982-03-17	2021-02-24 23:46:00	107111	1.438	True	Product
579	Harold	Male	2010-10-18	2021-02-24 20:45:00	65673	1.187	True	Legal
617	Kathy	Female	2001-01-14	2021-02-24 05:11:00	45682	1.451	True	Marketing
618	Peter	Male	1992-11-24	2021-02-24 17:43:00	69297	1.268	False	Finance
638	Frances	Female	1996-11-12	2021-02-24 18:08:00	112467	1.433	False	Business Development
652	Willie	Male	2009-12-05	2021-02-24 05:39:00	141932	1.017	True	Engineering
708	Steve	Male	2002-01-11	2021-02-24 21:17:00	51821	1.197	True	Legal
732	Henry	Male	1986-05-12	2021-02-24 02:04:00	59943	1.432	False	Finance
734	NaN	Female	1994-12-18	2021-02-24 20:42:00	138807	1.400	True	Human Resources
746	Gloria	Female	2004-08-19	2021-02-24 10:31:00	46602	1.027	True	Business Development
912	Joe	Male	1998-12-08	2021-02-24 10:28:00	126120	1.020	False	NaN
929	Theresa	Female	2001-04-27	2021-02-24 21:17:00	75661	1.079	True	Legal
954	Joe	Male	1980-01-19	2021-02-24 16:06:00	119667	1.148	True	Finance


AND Operator
In [61]:
 
 
Mark1=df["Gender"]=="Male"
Mark2=df["Team"]=="Marketing"
df[Mark1 & Mark2].head(4)
Out[61]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
21	Matthew	Male	1995-09-05	2021-02-24 02:12:00	100612	13.645	False	Marketing
26	Craig	Male	2000-02-27	2021-02-24 07:45:00	37598	7.757	True	Marketing
74	Thomas	Male	1995-06-04	2021-02-24 14:24:00	62096	17.029	False	Marketing



In [66]:
 
xxxxxxxxxx
 

OR Operator


Mark1=df["Senior Management"]
Mark2=df["Start Date"]< "1900-01-01"
df[Mark1|Mark2].head(4)
Out[66]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-24 12:42:00	97308	6.945	True	Marketing
1	Thomas	Male	1996-03-31	2021-02-24 06:53:00	61933	4.170	True	NaN
3	Jerry	Male	2005-03-04	2021-02-24 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-24 16:47:00	101004	1.389	True	Client Services



In [26]:
 
 
mark1=df["Team"]=="Legal"
mark2=df["Team"]=="Marketing"
mark3=df["Team"]=="Legal"
In [28]:
 
xxxxxxxxxx
 
df[mark1|mark2|mark3]
Out[28]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-25 12:42:00	97308	6.945	True	Marketing
5	Dennis	Male	1987-04-18	2021-02-25 01:35:00	115163	10.125	False	Legal
11	Julie	Female	1997-10-26	2021-02-25 15:19:00	102508	12.637	True	Legal
20	Lois	NaN	1995-04-22	2021-02-25 19:18:00	64714	4.934	True	Legal
21	Matthew	Male	1995-09-05	2021-02-25 02:12:00	100612	13.645	False	Marketing
...	...	...	...	...	...	...	...	...
985	Stephen	NaN	1983-07-10	2021-02-25 20:10:00	85668	1.909	False	Legal
986	Donna	Female	1982-11-26	2021-02-25 07:04:00	82871	17.999	False	Marketing
989	Justin	NaN	1991-02-10	2021-02-25 16:58:00	38344	3.794	False	Legal
991	Rose	Female	2002-08-25	2021-02-25 05:12:00	134505	11.051	True	Marketing
994	George	Male	2013-06-21	2021-02-25 17:47:00	98874	4.479	True	Marketing
In [31]:
 
xxxxxxxxxx
 Isin method is used to filter specific list which we want to get.

mark=df["Team"].isin(["Legal","Marketing","Distribution"])
In [32]:
 
xxxxxxxxxx
 
df[mark]
Out[32]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-25 12:42:00	97308	6.945	True	Marketing
5	Dennis	Male	1987-04-18	2021-02-25 01:35:00	115163	10.125	False	Legal
11	Julie	Female	1997-10-26	2021-02-25 15:19:00	102508	12.637	True	Legal
20	Lois	NaN	1995-04-22	2021-02-25 19:18:00	64714	4.934	True	Legal
21	Matthew	Male	1995-09-05	2021-02-25 02:12:00	100612	13.645	False	Marketing
...	...	...	...	...	...	...	...	...
986	Donna	Female	1982-11-26	2021-02-25 07:04:00	82871	17.999	False	Marketing
989	Justin	NaN	1991-02-10	2021-02-25 16:58:00	38344	3.794	False	Legal
991	Rose	Female	2002-08-25	2021-02-25 05:12:00	134505	11.051	True	Marketing
994	George	Male	2013-06-21	2021-02-25 17:47:00	98874	4.479	True	Marketing
995	Henry	NaN	2014-11-23	2021-02-25 06:09:00	132483	16.655	False	Distribution
276 rows × 8 columns

]:
 
xxxxxxxxxx
 notnull method

mask6=df["Team"].notnull()
In [39]:
 
xxxxxxxxxx
 
df[mask6]
Out[39]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
0	Douglas	Male	1993-08-06	2021-02-25 12:42:00	97308	6.945	True	Marketing
2	Maria	Female	1993-04-23	2021-02-25 11:17:00	130590	11.858	False	Finance
3	Jerry	Male	2005-03-04	2021-02-25 13:00:00	138705	9.340	True	Finance
4	Larry	Male	1998-01-24	2021-02-25 16:47:00	101004	1.389	True	Client Services
5	Dennis	Male	1987-04-18	2021-02-25 01:35:00	115163	10.125	False	Legal
...	...	...	...	...	...	...	...	...
995	Henry	NaN	2014-11-23	2021-02-25 06:09:00	132483	16.655	False	Distribution
996	Phillip	Male	1984-01-31	2021-02-25 06:30:00	42392	19.675	False	Finance
997	Russell	Male	2013-05-20	2021-02-25 12:39:00	96914	1.421	False	Product
998	Larry	Male	2013-04-20	2021-02-25 16:45:00	60500	11.985	False	Business Development
999	Albert	Male	2012-05-15	2021-02-25 18:24:00	129949	10.169	True	Sales





In [44]:
 
xxxxxxxxxx
 Between Method
bon=df["Bonus %"].between(2.0,5,0)
In [45]:
 
xxxxxxxxxx
 
df[bon]
Out[45]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
1	Thomas	Male	1996-03-31	2021-02-25 06:53:00	61933	4.170	True	NaN
20	Lois	NaN	1995-04-22	2021-02-25 19:18:00	64714	4.934	True	Legal
40	Michael	Male	2008-10-10	2021-02-25 11:25:00	99283	2.665	True	Distribution
49	Chris	NaN	1980-01-24	2021-02-25 12:13:00	113590	3.055	False	Sales
60	Paula	NaN	2005-11-23	2021-02-25 14:01:00	48866	4.271	False	Distribution
...	...	...	...	...	...	...	...	...
943	Wayne	Male	2006-09-08	2021-02-25 11:09:00	67471	2.728	False	Engineering
961	Antonio	NaN	1989-06-18	2021-02-25 21:37:00	103050	3.050	False	Legal
976	Denise	Female	1992-10-19	2021-02-25 05:42:00	137954	4.195	True	Legal
989	Justin	NaN	1991-02-10	2021-02-25 16:58:00	38344	3.794	False	Legal
994	George	Male	2013-06-21	2021-02-25 17:47:00	98874	4.479	True	Marketing



169 rows × 8 columns
In [52]:
 
xxxxxxxxxx
 
df[df["Start Date"].between("1991-01-01","1992-01-01")].head(5)
Out[52]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
27	Scott	NaN	1991-07-11	2021-02-25 18:58:00	122367	5.218	False	Legal
75	Bonnie	Female	1991-07-02	2021-02-25 01:27:00	104897	5.118	True	Human Resources
88	Donna	Female	1991-11-27	2021-02-25 13:59:00	64088	6.155	True	Legal
116	NaN	Male	1991-06-22	2021-02-25 20:58:00	76189	18.988	True	Legal
148	Patrick	NaN	1991-07-14	2021-02-25 02:24:00	124488	14.837	True	Sales


In [55]:
 
 
df[df["Last Login Time"].between("8:00AM", "12:00PM")].head(3)
Out[55]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
2	Maria	Female	1993-04-23	2021-02-25 11:17:00	130590	11.858	False	Finance
7	NaN	Female	2015-07-20	2021-02-25 10:43:00	45906	11.598	True	Finance
10	Louise	Female	1980-08-12	2021-02-25 09:01:00	63241	15.132	True	NaN


In [67]:
 
xxxxxxxxxx
 Dublicated method
df[~df["First Name"].duplicated(keep=False)]
Out[67]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
8	Angela	Female	2005-11-22	2021-02-25 06:29:00	95570	18.523	True	Engineering
688	Brian	Male	2007-04-07	2021-02-25 22:47:00	93901	17.821	True	Legal
190	Carol	Female	1996-03-19	2021-02-25 03:39:00	57783	9.129	False	Finance
887	David	Male	2009-12-05	2021-02-25 08:48:00	92242	15.407	False	Legal
5	Dennis	Male	1987-04-18	2021-02-25 01:35:00	115163	10.125	False	Legal
495	Eugene	Male	1984-05-24	2021-02-25 10:54:00	81077	2.117	False	Sales
33	Jean	Female	1993-12-18	2021-02-25 09:07:00	119082	16.180	False	Business Development
832	Keith	Male	2003-02-12	2021-02-25 15:02:00	120672	19.467	False	Legal
291	Tammy	Female	1984-11-11	2021-02-25 10:30:00	132839	17.463	True	Client Services


In [73]:
 
 
df.drop_duplicates(subset=["First Name"],keep="first").head(5)
Out[73]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
101	Aaron	Male	2012-02-17	2021-02-25 10:20:00	61602	11.849	True	Marketing
137	Adam	Male	2011-05-21	2021-02-25 01:45:00	95327	15.120	False	Distribution
300	Alan	Male	1988-06-26	2021-02-25 03:54:00	111786	3.592	True	Engineering
372	Albert	Male	1997-02-01	2021-02-25 16:20:00	67827	19.717	True	Engineering
988	Alice	Female	2004-10-05	2021-02-25 09:34:00	47638	11.209	False	Human Resources

In [74]:
 
xxxxxxxxxx
 
df.drop_duplicates(subset=["First Name"],keep="last").head(5)
Out[74]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
937	Aaron	NaN	1986-01-22	2021-02-25 19:39:00	63126	18.424	False	Client Services
538	Adam	Male	2010-10-08	2021-02-25 21:53:00	45181	3.491	False	Human Resources
610	Alan	Male	2012-02-17	2021-02-25 00:26:00	41453	10.084	False	Product
959	Albert	Male	1992-09-19	2021-02-25 02:35:00	45094	5.850	True	Business Development
693	Alice	Female	1995-10-16	2021-02-25 21:19:00	92799	2.782	False	Sales


In [75]:
 
 
Drop_duplicates Operations

df.drop_duplicates(subset=["First Name"],keep=False).head(5)
Out[75]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
8	Angela	Female	2005-11-22	2021-02-25 06:29:00	95570	18.523	True	Engineering
688	Brian	Male	2007-04-07	2021-02-25 22:47:00	93901	17.821	True	Legal
190	Carol	Female	1996-03-19	2021-02-25 03:39:00	57783	9.129	False	Finance
887	David	Male	2009-12-05	2021-02-25 08:48:00	92242	15.407	False	Legal


In [76]:
 



 Performing drop duplicate method in more than one column

df.drop_duplicates(subset=["First Name","Team"],keep=False).head(5)
Out[76]:
	First Name	Gender	Start Date	Last Login Time	Salary	Bonus %	Senior Management	Team
137	Adam	Male	2011-05-21	2021-02-25 01:45:00	95327	15.120	False	Distribution
141	Adam	Male	1990-12-24	2021-02-25 20:57:00	110194	14.727	True	Product
300	Alan	Male	1988-06-26	2021-02-25 03:54:00	111786	3.592	True	Engineering
53	Alan	NaN	2014-03-03	2021-02-25 13:28:00	40341	17.578	True	Finance
610	Alan	Male	2012-02-17	2021-02-25 00:26:00	41453	10.084	False	Product


80]:
 
 
df["Team"].unique()
Out[80]:
array(['Distribution', 'Product', 'Engineering', 'Finance', 'Sales',
       'Human Resources', nan, 'Client Services', 'Legal',
       'Business Development', 'Marketing'], dtype=object)
In [81]:
 
xxxxxxxxxx
 unique method give the list of unique value including na method.
len(df["Team"].unique())
Out[81]:
11
In [84]:
 
Nunique method the also country the number of unique method but drop the na value in counting.

df["Team"].nunique(dropna=False)
Out[84]:
11



In [21]:
 
xxxxxxxxxx
 Set_index argument
	
bond.set_index(keys="Film",inplace=True)
In [23]:
 
xxxxxxxxxx
 
bond.head(5)
Out[23]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN


In [25]:
 
xxxxxxxxxx
 Reset index argument reset index into numerical index

bond.reset_index().head(5)
Out[25]:
	Film	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
0	Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
1	From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
2	Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
3	Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
4	Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN



In [27]:
 
xxxxxxxxxx
 
bond.reset_index(drop=False,inplace=True)
In [29]:
 
xxxxxxxxxx
 
bond.head(5)
Out[29]:
	Film	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
0	Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
1	From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
2	Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
3	Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
4	Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN


In [33]:
 
xxxxxxxxxx
 How to replace index without loosing the index column

bond.reset_index(inplace=True)
bond.set_index("Year",inplace=True)
In [35]:
 
xxxxxxxxxx
 
bond.head(5)
Out[35]:
	index	Film	Actor	Director	Box Office	Budget	Bond Actor Salary
Year							
1962	0	Dr. No	Sean Connery	Terence Young	448.8	7.0	0.6
1963	1	From Russia with Love	Sean Connery	Terence Young	543.8	12.6	1.6
1964	2	Goldfinger	Sean Connery	Guy Hamilton	820.4	18.6	3.2
1965	3	Thunderball	Sean Connery	Terence Young	848.1	41.9	4.7
1967	4	Casino Royale	David Niven	Ken Hughes	315.0	85.0	NaN



.loc Accessor 
In [41]:
 
xxxxxxxxxx
 
bond.loc["A View to a Kill"]
Out[41]:
Year                        1985
Actor                Roger Moore
Director               John Glen
Box Office                 275.2
Budget                      54.5
Bond Actor Salary            9.1
Name: A View to a Kill, dtype: object


In [43]:
 
 
bond.loc["Casino Royale"]
Out[43]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN
Casino Royale	2006	Daniel Craig	Martin Campbell	581.5	145.3	3.3


 
 
bond.loc["A View to a Kill":"Die Another Day"]
Out[47]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
A View to a Kill	1985	Roger Moore	John Glen	275.2	54.5	9.1
The Living Daylights	1987	Timothy Dalton	John Glen	313.5	68.8	5.2
Licence to Kill	1989	Timothy Dalton	John Glen	250.9	56.7	7.9
GoldenEye	1995	Pierce Brosnan	Martin Campbell	518.5	76.9	5.1
Tomorrow Never Dies	1997	Pierce Brosnan	Roger Spottiswoode	463.2	133.9	10.0
The World Is Not Enough	1999	Pierce Brosnan	Michael Apted	439.5	158.3	13.5
Die Another Day	2002	Pierce Brosnan	Lee Tamahori	465.4	154.2	17.9


bond.loc["A View to a Kill":"Die Another Day":2]
Out[48]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
A View to a Kill	1985	Roger Moore	John Glen	275.2	54.5	9.1
Licence to Kill	1989	Timothy Dalton	John Glen	250.9	56.7	7.9
Tomorrow Never Dies	1997	Pierce Brosnan	Roger Spottiswoode	463.2	133.9	10.0
Die Another Day	2002	Pierce Brosnan	Lee Tamahori	465.4	154.2	17.9
In [52]:
 
 
bond.loc["A View to a Kill":]
Out[52]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
A View to a Kill	1985	Roger Moore	John Glen	275.2	54.5	9.1
The Living Daylights	1987	Timothy Dalton	John Glen	313.5	68.8	5.2
Licence to Kill	1989	Timothy Dalton	John Glen	250.9	56.7	7.9
GoldenEye	1995	Pierce Brosnan	Martin Campbell	518.5	76.9	5.1
Tomorrow Never Dies	1997	Pierce Brosnan	Roger Spottiswoode	463.2	133.9	10.0
The World Is Not Enough	1999	Pierce Brosnan	Michael Apted	439.5	158.3	13.5
Die Another Day	2002	Pierce Brosnan	Lee Tamahori	465.4	154.2	17.9
Casino Royale	2006	Daniel Craig	Martin Campbell	581.5	145.3	3.3
Quantum of Solace	2008	Daniel Craig	Marc Forster	514.2	181.4	8.1
Skyfall	2012	Daniel Craig	Sam Mendes	943.5	170.2	14.5
Spectre	2015	Daniel Craig	Sam Mendes	726.7	206.3	NaN


In [55]:
 
 
bond.loc[["Tomorrow Never Dies", "GoldenEye"]]
Out[55]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Tomorrow Never Dies	1997	Pierce Brosnan	Roger Spottiswoode	463.2	133.9	10.0
GoldenEye	1995	Pierce Brosnan	Martin Campbell	518.5	76.9	5.1
In [56]:
 
 
bond.loc[:"Die Another Day"].head(5)
Out[56]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN


 

 Retieving row from index number 

bond.iloc[0]
Out[59]:
Year                          1962
Actor                 Sean Connery
Director             Terence Young
Box Office                   448.8
Budget                         7.0
Bond Actor Salary              0.6
Name: Dr. No, dtype: object



In [61]:
 
 
bond.iloc[[1,5]]
Out[61]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
You Only Live Twice	1967	Sean Connery	Lewis Gilbert	514.2	59.9	4.4


]:
 
 
bond.iloc[1:5]
Out[62]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN


]:
 
 
bond.iloc[1:5]
Out[62]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
Casino Royale	1967	David Niven	Ken Hughes	315.0	85.0	NaN


In [67]:
 
 
bond.loc["Goldfinger", "Actor"]
Out[67]:
'Sean Connery'
In [69]:
 
xxxxxxxxxx
 
bond.loc["Goldfinger",["Actor","Director"]]
Out[69]:
Actor       Sean Connery
Director    Guy Hamilton
Name: Goldfinger, dtype: object
In [70]:
 
xxxxxxxxxx
 
1
bond.loc[["Goldfinger","Thunderball"],["Actor","Director"]]
Out[70]:
	Actor	Director
Film		
Goldfinger	Sean Connery	Guy Hamilton
Thunderball	Sean Connery	Terence Young


In [71]:
 
xxxxxxxxxx
 
bond.loc["Goldfinger","Actor":"Budget"]
Out[71]:
Actor         Sean Connery
Director      Guy Hamilton
Box Office           820.4
Budget                18.6
Name: Goldfinger, dtype: object



In [75]:
 
 
bond.loc["Dr. No":"Goldfinger","Actor":"Budget"]
Out[75]:
	Actor	Director	Box Office	Budget
Film				
Dr. No	Sean Connery	Terence Young	448.8	7.0
From Russia with Love	Sean Connery	Terence Young	543.8	12.6
Goldfinger	Sean Connery	Guy Hamilton	820.4	18.6

In [78]:
 
 
bond.loc["From Russia with Love":"Goldfinger",:"Box Office"]
Out[78]:
	Year	Actor	Director	Box Office
Film				
From Russia with Love	1963	Sean Connery	Terence Young	543.8
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4


In [80]:
 
xxxxxxxxxx
 
bond.loc["Goldfinger":,"Director":].head(5)
Out[80]:
	Director	Box Office	Budget	Bond Actor Salary
Film				
Goldfinger	Guy Hamilton	820.4	18.6	3.2
Thunderball	Terence Young	848.1	41.9	4.7
Casino Royale	Ken Hughes	315.0	85.0	NaN
You Only Live Twice	Lewis Gilbert	514.2	59.9	4.4
On Her Majesty's Secret Service	Peter R. Hunt	291.5	37.3	0.6


In [81]:
 
 
bond.iloc[14,2]
Out[81]:
'John Glen'



In [82]:
 
 
bond.iloc[[3,5],[2]]
Out[82]:
	Director
Film	
Thunderball	Terence Young
You Only Live Twice	Lewis Gilbert


In [90]:
 
xxxxxxxxxx
 
bond.iloc[15:16,2:3]
Out[90]:
	Director
Film	
A View to a Kill	John Glen




 

	In [97]:
 
xxxxxxxxxx
 
bond.loc["actor_is_JOhn"]="Sir John"
In [102]:
 
 
bond.rename(mapper={"Goldfinger":"Gold Finger","GoldenEye":"Golden Eye"}).head(3)
Out[102]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Gold Finger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2


 


In [105]:
 
 
bond.rename(mapper={"Year":"Release Date ","Box Office":"Revenue"},axis=1).head(3)
Out[105]:
	Release Date	Actor	Director	Revenue	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2



In [109]:
 
 
bond.rename(columns={"Year":"Release Date","Box Office":"Revenue"},inplace=True)
In [110]:
 
xxxxxxxxxx
 
bond.head(3)
Out[110]:
	Release Date	Actor	Director	Revenue	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2










 



In [8]:
 
 Dropping a row with  the drop method
bond.drop("Skyfall").head(3)
Out[8]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2



In [13]:
 
 Dropping columns with column method\]

bond.drop("Budget", axis="columns").head(3)
Out[13]:
	Year	Actor	Director	Box Office	Bond Actor Salary
Film					
Dr. No	1962	Sean Connery	Terence Young	448.8	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	3.2



bond.drop("Budget", axis="columns", inplace=True)


In [20]:
 
xxxxxxxxxx
 Pop Method
Actor=bond.pop("Actor")
In [22]:
 
xxxxxxxxxx
 
bond
Out[22]:
Film
Dr. No                               Sean Connery
From Russia with Love                Sean Connery
Goldfinger                           Sean Connery


In Pop method list deletes permanently and makes the new list in above case its actor.


CREATING RANDOM SAMPLE  WITH SAMPLE METHOD
 


In [23]:
 
 
bond.sample(n=5)
Out[23]:
	Year	Director	Box Office	Bond Actor Salary
Film				
From Russia with Love	1963	Terence Young	543.8	1.6
For Your Eyes Only	1981	John Glen	449.4	NaN
Die Another Day	2002	Lee Tamahori	465.4	17.9
Skyfall	2012	Sam Mendes	943.5	14.5

 
	


In [24]:
 
xxxxxxxxxx
 
bond.sample(frac=0.25)
Out[24]:
	Year	Director	Box Office	Bond Actor Salary
Film				
Casino Royale	1967	Ken Hughes	315.0	NaN
Quantum of Solace	2008	Marc Forster	514.2	8.1
Moonraker	1979	Lewis Gilbert	535.0	NaN
Spectre	2015	Sam Mendes	726.7	NaN
Live and Let Die	1973	Guy Hamilton	460.3	NaN
Thunderball	1965	Terence Young	848.1	4.7



 


In [29]:
 
xxxxxxxxxx
 
bond.nlargest(2, columns="Box Office")
Out[29]:
	Year	Director	Box Office	Bond Actor Salary
Film				
Skyfall	2012	Sam Mendes	943.5	14.5
Thunderball	1965	Terence Young	848.1	4.7


In [31]:
 
 
bond.nsmallest(2,columns="Box Office")
Out[31]:
	Year	Director	Box Office	Bond Actor Salary
Film				
Licence to Kill	1989	John Glen	250.9	7.9


				
A View to a Kill	1985	John Glen	275.2	9.1

				


 




In [32]:
 
 
bond["Box Office"].nlargest(3)
Out[32]:
Film
Skyfall        943.5
Thunderball    848.1
Goldfinger     820.4
Name: Box Office, dtype: float64
In [33]:
 
xxxxxxxxxx
 
bond["Year"].nsmallest(2)
Out[33]:
Film
Dr. No                   1962
From Russia with Love    1963
Name: Year, dtype: int64




 


In [37]:
 
xxxxxxxxxx
 
Mask=bond["Actor"]=="Sean Connery"
bond[Mask].head(3)
Out[37]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2




In [39]:
 
 Where Method


bond.where(Mask)
Out[39]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Dr. No	1962.0	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963.0	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964.0	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965.0	Sean Connery	Terence Young	848.1	41.9	4.7
Casino Royale	NaN	NaN	NaN	NaN	NaN	NaN
You Only Live Twice	1967.0	Sean Connery	Lewis Gilbert	514.2	59.9	4.4
On Her Majesty's Secret Service	NaN	NaN	NaN	NaN	NaN	NaN
Diamonds Are Forever	1971.0	Sean Connery	Guy Hamilton	442.5	34.7	5.8




In [42]:
 
xxxxxxxxxx
 
Mask1=bond["Box Office"]>800
In [43]:
 
xxxxxxxxxx
 
bond[Mask1]
Out[43]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2
Thunderball	1965	Sean Connery	Terence Young	848.1	41.9	4.7
Skyfall	2012	Daniel Craig	Sam Mendes	943.5	170.2	14.5



 

 



In [61]:
 
xxxxxxxxxx
 
bond.query('Actor=="Daniel Craig"')
Out[61]:
	Year	Actor	Director	Box_Office	Budget	Bond_Actor_Salary
Film						
Casino Royale	2006	Daniel Craig	Martin Campbell	581.5	145.3	3.3
Quantum of Solace	2008	Daniel Craig	Marc Forster	514.2	181.4	8.1
Skyfall	2012	Daniel Craig	Sam Mendes	943.5	170.2	14.5
Spectre	2015	Daniel Craig	Sam Mendes	726.7	206.3	NaN
In [63]:
 
xxxxxxxxxx
 
bond.query('Actor!="Daniel Craig"').head(3)
Out[63]:
	Year	Actor	Director	Box_Office	Budget	Bond_Actor_Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2




In [77]:
 
xxxxxxxxxx
 
bond.query('Actor==["Daniel Craig","Sean Connery"]').head(3)
Out[77]:
	Year	Actor	Director	Box_Office	Budget	Bond_Actor_Salary
Film						
Dr. No	1962	Sean Connery	Terence Young	448.8	7.0	0.6
From Russia with Love	1963	Sean Connery	Terence Young	543.8	12.6	1.6
Goldfinger	1964	Sean Connery	Guy Hamilton	820.4	18.6	3.2



Apply Method
In [12]:
 
 
def add_millions(number):
    return str(number)+"MIllons"
    
In [15]:
 
 
bond["Box Office"]=bond["Box Office"].apply(add_millions)
In [17]:
 
xxxxxxxxxx
 
bond.head(4)
Out[17]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
A View to a Kill	1985	Roger Moore	John Glen	275.2MIllons	54.5	9.1
Casino Royale	2006	Daniel Craig	Martin Campbell	581.5MIllons	145.3	3.3
Casino Royale	1967	David Niven	Ken Hughes	315.0MIllons	85.0	NaN



In [18]:
 
xxxxxxxxxx
 
bond["Budget"]=bond["Budget"].apply(add_millions)
In [19]:
 
xxxxxxxxxx
 
bond.head(4)
Out[19]:
	Year	Actor	Director	Box Office	Budget	Bond Actor Salary
Film						
A View to a Kill	1985	Roger Moore	John Glen	275.2MIllons	54.5MIllons	9.1
Casino Royale	2006	Daniel Craig	Martin Campbell	581.5MIllons	145.3MIllons	3.3
Casino Royale	1967	David Niven	Ken Hughes	315.0MIllons	85.0MIllons	NaN
Diamonds Are Forever	1971	Sean Connery	Guy Hamilton	442.5MIllons	34.7MIllons	5.8



In [40]:
 
 
columns=["Box Office","Bond Actor Salary"]
for col in columns:
    bond[col]=bond[col].apply(add_millions)
    
In [41]:
 
x
bond
Out[41]:
	Year	Actor	




In [47]:
 
 
def good_movies(row):
    actor=row[1]
    budget=row[4]
    if actor=="Daniel Craig":
        return "This is best "
    elif actor=="Timothy Dalton" and budget>40:
        return "This is increadible"
    else:
        return "Not good"

In [50]:
 
xxxxxxxxxx
 
bond.apply(good_movies,axis="columns").head(3)
Out[50]:
Film
A View to a Kill         Not good
Casino Royale       This is best 
Casino Royale            Not good


Copy Method to make changes in the list without affecting the original dataframe


 


In [62]:
 
xxxxxxxxxx
 
Director= bond["Director"].copy()
In [64]:
 
xxxxxxxxxx
 
Director["A View to a Kill"]="John Glen"
In [66]:
 
xxxxxxxxxx
 
Director.head(3)
Out[66]:
Film
A View to a Kill          John Glen
Casino Royale       Martin Campbell
Casino Royale            Ken Hughes
Name: Director, dtype: object




In [6]:
 
 
chi["Department"].nunique()
Out[6]:
35
In [8]:
 
 
chi.nunique()
Out[8]:
Name                      31776
Position Title             1093
Department                   35
Employee Annual Salary     1156
dtype: int64



In [9]:
 
xxxxxxxxxx
 
chi["Department"]=chi["Department"].astype("category")
In [11]:
 
xxxxxxxxxx
 
chi.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 32063 entries, 0 to 32062
Data columns (total 4 columns):
 #   Column                  Non-Null Count  Dtype   
---  ------                  --------------  -----   
 0   Name                    32062 non-null  object  
 1   Position Title          32062 non-null  object  
 2   Department              32062 non-null  category
 3   Employee Annual Salary  32062 non-null  object  
dtypes: category(1), object(3)
memory usage: 784.2+ KB




 

 	




In [26]:
 
xxxxxxxxxx
 
chi["Position Title"].str.upper().head(4)
Out[26]:
0            WATER RATE TAKER
1              POLICE OFFICER
2              POLICE OFFICER
3    CHIEF CONTRACT EXPEDITER


In [29]:
 
 
chi["Department"].str.len().head(4)
Out[29]:
0    11.0
1     6.0
2     6.0
3    16.0
Name: Department, dtype: float64

In [30]:
 
 
chi["Name"].str.title().head(4)
Out[30]:
0        Aaron,  Elvia J
1      Aaron,  Jeffery M
2         Aaron,  Karina
3    Aaron,  Kimberlei R
Name: Name, dtype: object
In [31]:
 
 
chi["Name"].str.upper().str.lower().head(5)
Out[31]:
0        aaron,  elvia j
1      aaron,  jeffery m
2         aaron,  karina
3    aaron,  kimberlei r
4    abad jr,  vicente m
Name: Name, dtype: object



 


	In [32]:
 
xxxxxxxxxx
 
"Hello World".replace("l",":")
Out[32]:
'He::o Wor:d'



 

In [46]:
 
xxxxxxxxxx
 
chi["Department"]=chi["Department"].str.replace("MGMNT","MANAGEMENT")
In [48]:
 
xxxxxxxxxx
 
chi.head(4)
Out[48]:
	Name	Position Title	Department	Employee Annual Salary
0	AARON, ELVIA J	WATER RATE TAKER	WATER MANAGEMENT	$90744.00
1	AARON, JEFFERY M	POLICE OFFICER	POLICE	$84450.00
2	AARON, KARINA	POLICE OFFICER	POLICE	$84450.00
3	AARON, KIMBERLEI R	CHIEF CONTRACT EXPEDITER	GENERAL SERVICES	$89880.00




 

In [63]:
 
 
chi["Employee Annual Salary"].nlargest(5)
Out[63]:
8184     300000.0
7954     216210.0
25532    202728.0
8924     197736.0
8042     197724.0
Name: Employee Annual Salary, dtype: float64


 


 




In [71]:
 
 
mask=chi["Position Title"].str.lower().str.startswith("water")
In [73]:
 
xxxxxxxxxx
 
chi[mask].head(4)
Out[73]:
	Name	Position Title	Department	Employee Annual Salary
0	AARON, ELVIA J	WATER RATE TAKER	WATER MANAGEMENT	90744.0
671	ANDER, PERRY A	WATER CHEMIST II	WATER MANAGEMENT	82044.0
1054	ASHLEY, KARMA T	WATER CHEMIST II	WATER MANAGEMENT	82044.0
1079	ATKINS, JOANNA M	WATER CHEMIST II	WATER MANAGEMENT	82044.0




In [66]:
 
xxxxxxxxxx
 
mask=chi["Position Title"].str.lower().str.contains("water")
In [74]:
 
xxxxxxxxxx
 
chi[mask].head(4)
Out[74]:
	Name	Position Title	Department	Employee Annual Salary
0	AARON, ELVIA J	WATER RATE TAKER	WATER MANAGEMENT	90744.0
671	ANDER, PERRY A	WATER CHEMIST II	WATER MANAGEMENT	82044.0
1054	ASHLEY, KARMA T	WATER CHEMIST II	WATER MANAGEMENT	82044.0
1079	ATKINS, JOANNA M	WATER CHEMIST II	WATER MANAGEMENT	82044.0



chi[mask].head(4)
Out[78]:
	Name	Position Title	Department	Employee Annual Salary
184	AFROZ, NAYYAR	PSYCHIATRIST	HEALTH	99840.0
308	ALARCON, LUIS J	LOAN PROCESSING SPECIALIST	COMMUNITY DEVELOPMENT	81948.0
422	ALLAIN, CAROLYN	SENIOR TELECOMMUNICATIONS SPECIALIST	DoIT	89880.0
472	ALLEN, ROBERT	MACHINIST	WATER MANAGEMENT	94328.0
 
	In [80]:
 
xxxxxxxxxx
 
"          hello world".lstrip()
Out[80]:
'hello world'
In [81]:
 
xxxxxxxxxx
 
"Hello World      ".rstrip()
Out[81]:
'Hello World'
In [82]:
 
xxxxxxxxxx
 
"        Hello World      ".strip()
Out[82]:
'Hello World'
In [ ]:
 
 

 

 
	





	In [93]:
 
xxxxxxxxxx
 
chi.index=chi.index.str.strip().str.title()
In [95]:
 
xxxxxxxxxx
 
chi.head(4)
Out[95]:
	Position Title	Department	Employee Annual Salary
Name			
Aaron, Elvia J	WATER RATE TAKER	WATER MGMNT	$90744.00
Aaron, Jeffery M	POLICE OFFICER	POLICE	$84450.00
Aaron, Karina	POLICE OFFICER	POLICE	$84450.00


 




In [98]:
 
xxxxxxxxxx
 
chi.columns=chi.columns.str.upper()
In [100]:
 
xxxxxxxxxx
 
chi.head(4)
Out[100]:
	POSITION TITLE	DEPARTMENT	EMPLOYEE ANNUAL SALARY
Name			
Aaron, Elvia J	WATER RATE TAKER	WATER MGMNT	$90744.00
Aaron, Jeffery M	POLICE OFFICER	POLICE	$84450.00
Aaron, Karina	POLICE OFFICER	POLICE	$84450.00
Aaron, Kimberlei R	CHIEF CONTRACT EXPEDITER	GENERAL SERVICES	$89880.00





In [115]:
 
 
chi["Name"].str.split(",").str.get(0).str.title().value_counts().head(3)
Out[115]:
Williams    293
Johnson     244
Smith       241
Name: Name, dtype: int64



In [117]:
 
xxxxxxxxxx
 
chi["Position Title"].str.split(" ").str.get(0).head(3)
Out[117]:
0     WATER
1    POLICE
2    POLICE
Name: Position Title, dtype: object


136]:
 
 
chi["Name"].str.split(",").str.get(1).str.split(" ").str.get(2).value_counts().head(3)
Out[136]:
MICHAEL    1153
JOHN        899
JAMES       676
Name: Name, dtype: int64




In [140]:
 
 
chi["Name"].str.split(",", expand=True)
Out[140]:
	0	1
0	AARON	ELVIA J
1	AARON	JEFFERY M
2	AARON	KARINA
3	AARON	KIMBERLEI R
4	ABAD JR	VICENTE M
...	...	...
32058	ZYGOWICZ	PETER J
32059	ZYMANTAS	MARK E
32060	ZYRKOWSKI	CARLO E
32061	ZYSKOWSKI	DARIUSZ
32062	NaN	NaN
32063 rows × 2 columns


In [150]:
 
xxxxxxxxxx
 
chi["Position Title"].str.split(" ",expand=True).head(2)
Out[150]:
	0	1	2	3	4	5	6	7	8
0	WATER	RATE	TAKER	None	None	None	None	None	None
1	POLICE	OFFICER	None	None	None	None	None	None	None


In [153]:
 
xxxxxxxxxx
 
chi["Position Title"].str.split(" ",expand=True, n=1).head(5)
Out[153]:
	0	1
0	WATER	RATE TAKER
1	POLICE	OFFICER
2	POLICE	OFFICER
3	CHIEF	CONTRACT EXPEDITER
4	CIVIL	ENGINEER IV




In [156]:
 
xxxxxxxxxx
 
chi.head(4)
Out[156]:
	Name	Position Title	Department	Employee Annual Salary	First Name	Last Name	First Title	Remaining Title
0	AARON, ELVIA J	WATER RATE TAKER	WATER MGMNT	$90744.00	AARON	ELVIA J	WATER	RATE TAKER
1	AARON, JEFFERY M	POLICE OFFICER	POLICE	$84450.00	AARON	JEFFERY M	POLICE	OFFICER
2	AARON, KARINA	POLICE OFFICER	POLICE	$84450.00	AARON	KARINA	POLICE	OFFICER
3	AARON, KIMBERLEI R	CHIEF CONTRACT EXPEDITER	GENERAL SERVICES	$89880.00	AARON	KIMBERLEI R	CHIEF	CONTRACT EXPEDITER




In [7]:
 
 
mac.head(3)
Out[7]:
	Date	Country	Price in US Dollars
0	2016-01-01	Argentina	2.39
1	2016-01-01	Australia	3.74
2	2016-01-01	Brazil	3.35


In [10]:
 
 
mac.set_index("Date").head(3)
Out[10]:
	Country	Price in US Dollars
Date		
2016-01-01	Argentina	2.39
2016-01-01	Australia	3.74
2016-01-01	Brazil	3.35


In [11]:
 
 
mac.nunique()
Out[11]:
Date                    12
Country                 58
Price in US Dollars    330
dtype: int64


In [14]:
 
 
mac.set_index(keys=["Date","Country"]).head(3)
Out[14]:
		Price in US Dollars
Date	Country	
1/2016	Argentina	2.39
	Australia	3.74
	Brazil	3.35



















In [25]:
 
xxxxxxxxxx
 
mac.index.names
Out[25]:
FrozenList(['Date', 'Country'])
In [28]:
 
 
mac.index
Out[28]:
MultiIndex([('1/2010',      'Argentina'),
            ('1/2010',      'Australia'),
            ('1/2010',         'Brazil'),
            ('1/2010',        'Britain'),
            ('1/2010',         'Canada'),
            ('1/2010',          'Chile'),
            ('1/2010',          'China'),
            ('1/2010',       'Colombia'),
            ('1/2010',     'Costa Rica'),
            ('1/2010', 'Czech Republic'),
            ...










 




In [30]:
 
 
mac.index[1]
Out[30]:
('1/2010', 'Australia')





 


In [1]:
 
xxxxxxxxxx
 
import pandas as pd
In [31]:
 
xxxxxxxxxx
 
mac=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\bigmac.csv',index_col=["Date","Country"])
In [32]:
 
 
mac
Out[32]:
		Price in US Dollars
Date	Country	
1/2016	Argentina	2.39
	Australia	3.74
	Brazil	3.35
	Britain	4.22
	Canada	4.14







 




 



 

	
 
	

Extracting Row from a MultiIndex DataFrame




In [75]:
 
xxxxxxxxxx
 
mac.loc[("2016-01-01","Argentina")]
Out[75]:
Price in US Dollars    2.39
Name: (2016-01-01 00:00:00, Argentina), dtype: float64




 



 
	


In [5]:
 
 
mac.swaplevel()
Out[5]:
		Price in US Dollars
Country	Date	
Argentina	1/2016	2.39
Australia	1/2016	3.74
Brazil	1/2016	3.35
Britain	1/2016	4.22
  



	


In [14]:
 
xxxxxxxxxx
 
mac.stack().head(3)
Out[14]:
country     year            
Arab World  2015  Population    3.920223e+08
                  GDP           2.530102e+12
            2014  Population    3.842226e+08
dtype: float64



In [18]:
 
 
s.unstack()
Out[18]:
		Population	GDP
country	year		
Afghanistan	1960	8994793.0	5.377778e+08
	1961	9164945.0	5.488889e+08
	1962	9343772.0	5.466667e+08
	1963	9531555.0	7.511112e+08
	1964	9728645.0	8.000000e+08
...	...	...	...
Zimbabwe	2011	14255592.0	1.095623e+10
	2012	14565482.0	1.239272e+10
	2013	14898092.0	1.349023e+10






In [20]:
 
 
s.unstack(2)
Out[20]:
		Population	GDP
country	year		
Afghanistan	1960	8994793.0	5.377778e+08
	1961	9164945.0	5.488889e+08
	1962	9343772.0	5.466667e+08
	1963	9531555.0	7.511112e+08
	1964	9728645.0	8.000000e+08
...	...	...	...
Zimbabwe	2011	14255592.0	1.095623e+10
	2012	14565482.0	1.239272e+10
	2013	14898092.0	1.349023e+10
	2014	15245855.0	1.419691e+10



In [24]:
 
 
s.unstack("country").head(3)
Out[24]:
3 rows × 252 columns


 



 

	












Pivot Method

 



 
	



 





 




	In [34]:
 
 
food.pivot_table(values="Spend",index=["Gender","Item"],aggfunc="mean").head(3)
Out[34]:
		Spend
Gender	Item	
Female	Burger	49.930488
	Burrito	50.092000
	Chalupa	54.635000




In [35]:
 
xxxxxxxxxx
 
food.pivot_table(values="Spend",index=["Gender","Item"],columns="City",aggfunc="mean").head(3)
Out[35]:
	City	New York	Philadelphia	Stamford
Gender	Item			
Female	Burger	51.626667	52.878710	45.037778
	Burrito	42.563043	52.098571	53.532647
	Chalupa	46.135789	52.291563	64.094000

	

 











In [50]:
 
 
pd.melt(Q,id_vars="Salesman").head(4)
Out[50]:
	Salesman	variable	value
0	Boris	Q1	602908
1	Bob	Q1	43790
2	Tommy	Q1	392668
3	Travis	Q1	834663
In [51]:
 
 




pd.melt(Q,id_vars="Salesman",var_name="Quarter").head(4)
Out[51]:
	Salesman	Quarter	value
0	Boris	Q1	602908
1	Bob	Q1	43790
2	Tommy	Q1	392668
3	Travis	Q1	834663


Groupby Object


In [1]:
 
xxxxxxxxxx
 
import pandas as pd
In [11]:
 
xxxxxxxxxx
 
fortune=pd.read_csv(r'C:\Users\ASUS\Desktop\Pandas\\fortune1000.csv',index_col="Rank")
In [35]:


df=pd.DataFrame(columns=fortune.columns)
 
xxxxxxxxxx
 
fortune.head(2)
Out[35]:
	Company	Sector	Industry	Location	Revenue	Profits	Employees
Rank							
1	Walmart	Retailing	General Merchandisers	Bentonville, AR	482130	14694	2300000
2	Exxon Mobil	Energy	Petroleum Refining	Irving, TX	246204	16150	75600
In [13]:
 
 
fortune.head(3)
Out[13]:
	Company	Sector	Industry	Location	Revenue	Profits	Employees
Rank							
1	Walmart	Retailing	General Merchandisers	Bentonville, AR	482130	14694	2300000
2	Exxon Mobil	Energy	Petroleum Refining	Irving, TX	246204	16150	75600
3	Apple	Technology	Computers, Office Equipment	Cupertino, CA	233715	53394	110000
In [18]:
 
xxxxxxxxxx
 
sector=fortune.groupby("Sector")

In [17]:
 
 
type("Sector")
Out[17]:
str
In [19]:
 
xxxxxxxxxx
 
type(sector)
Out[19]:
pandas.core.groupby.generic.DataFrameGroupBy
In [20]:
 
xxxxxxxxxx
 
type(fortune)
Out[20]:
pandas.core.frame.DataFrame
In [21]:
 
xxxxxxxxxx
 
len(sector)
Out[21]:
21
In [23]:
 
xxxxxxxxxx
 
fortune["Sector"].nunique()
Out[23]:
21
In [33]:
 
 
fortune["Sector"].value_counts().head(3)
Out[33]:
Financials    139
Energy        122
Technology    102
Name: Sector, dtype: int64
In [32]:
 
 
sector.first().head(1)
Out[32]:
	Company	Industry	Location	Revenue	Profits	Employees
Sector						
Aerospace & Defense	Boeing	Aerospace and Defense	Chicago, IL	96114	5176	161400
In [31]:
 
 
sector.last().head(1)
Out[31]:
	Company	Industry	Location	Revenue	Profits	Employees
Sector						
Aerospace & Defense	Delta Tucker Holdings	Aerospace and Defense	McLean, VA	1923	-133	12000
In [ ]:
 
 

 



 
 




 



 

Aggregation method:

 




In [52]:
 
 
sector.agg({"Revenue":"sum","Profits":"sum","Employees":"mean"}).head(4)
Out[52]:
		Revenue	Profits	Employees
Sector	Industry			
Aerospace & Defense	Aerospace and Defense	357940	28742	48402.850000
Apparel	Apparel	95968	8236	23093.133333
Business Services	Advertising, marketing	22748	1549	62050.000000
	Diversified Outsourcing Services	64829	4305	50595.000000


 


In [55]:
 
 
sector.agg(["size","sum","mean"]).head(4)
Out[55]:
		Revenue	Profits	Employees
		size	sum	mean	size	sum	mean	size	sum	mean
Sector	Industry									
Aerospace & Defense	Aerospace and Defense	20	357940	17897.000000	20	28742	1437.100000	20	968057	48402.850000
Apparel	Apparel	15	95968	6397.866667	15	8236	549.066667	15	346397	23093.133333
Business Services	Advertising, marketing	2	22748	11374.000000	2	1549	774.500000	2	124100	62050.000000
	Diversified Outsourcing Services	14	64829	4630.642857	14	4305	307.500000	14	708330	50595.000000








Here I created a for loop in sector dataframe and created a variable called data after that I created a new variable called highest_revenue_company and after that this data variable stored temporary row in data variable asnd then check if  it meets the criteria of largest revenue then if attached to variable called highest_revenue_company then if that condition is true then it append that row the df dataframe and it keeps checking the keep adding to the df dataframe. Here sectors in new variable it basically.So my question 
	for sectors, data in sector:
    highest_revenue_company=data.nlargest(1,"Revenue")
    df=df.append(highest_revenue_company)
    
 










Concat Method:
	 




In [15]:
 
 
pd.concat(objs=[week1,week2],ignore_index=True).head(3)
Out[15]:
	Customer ID	Food ID
0	537	9
1	97	4
2	658	1

 



	 


In [21]:
 
 
sales.loc[("week1",240)]
Out[21]:
Customer ID    945
Food ID          5
Name: (week1, 240), dtype: int64



 




	In [22]:
 
 
sales.loc[("week1",240),["Customer ID","Food ID"]]
Out[22]:
Customer ID    945
Food ID          5
Name: (week1, 240), dtype: int64




 




 





 
	


 



	



In [36]:
 
 
week1.merge(week1,how="inner", on=["Customer ID", "Food ID"]).head(3)
Out[36]:
	Customer ID	Food ID
0	537	9
1	97	4
2	658	1



		



		
 



	



	658	1
In [41]:
 
 
week1.merge(week1,how="outer",on="Customer ID",suffixes=["-Week1","-Week2"],indicator=True)
Out[41]:
	Customer ID	Food ID-Week1	Food ID-Week2	_merge
0	537	9	9	both
1	97	4	4	both
2	658	1	1	both
3	202	2	2	both
4	155	9	9	both
...	...	...	...	...
313	413	9	9	both
314	926	6	6	both
315	134	3	3	both
316	396	6	6	both
317	535	10	10	both
318 rows × 4 columns




	


In [45]:
 
 
merge["_merge"].value_counts()
Out[45]:
both          318
left_only       0
right_only      0
Name: _merge, dtype: int64



 



In [36]:
 
 

 



   	



 
	




 
	



				Join Method
 



	 


	 
 


In [3]:
 
 
pd.to_datetime("2021-3-3")
Out[3]:
Timestamp('2021-03-03 00:00:00')

	 





In [36]:
 
 
pd.DatetimeIndex(dates)
Out[36]:
DatetimeIndex(['2016-01-10', '1994-06-13', '2003-12-29'], dtype='datetime64[ns]', freq=None)


	
Pandas to_datetime Method
In [3]:
 
 
pd.to_datetime("2021-3-3")
Out[3]:
Timestamp('2021-03-03 00:00:00')


In [3]:
 
 
pd.to_datetime("2021-3-3")
Out[3]:
Timestamp('2021-03-03 00:00:00')
In [4]:
 
xxxxxxxxxx
 
pd.to_datetime(dt.date(2015,1,1))
Out[4]:
Timestamp('2015-01-01 00:00:00')
In [7]:
 
 
pd.to_datetime(dt.datetime(2015,1,1,14,23,50))
Out[7]:
Timestamp('2015-01-01 14:23:50')
In [10]:
 
xxxxxxxxxx
 
pd.to_datetime(["2014-1-1","2015/1/1"])
Out[10]:
DatetimeIndex(['2014-01-01', '2015-01-01'], dtype='datetime64[ns]', freq=None)
	



In [12]:
 
xxxxxxxxxx
 
time=pd.Series(["2014-1-1","2015/1/1"])
In [13]:
 
xxxxxxxxxx
 
pd.to_datetime(time)
Out[13]:
0   2014-01-01
1   2015-01-01
dtype: datetime64[ns]
In [14]:
 
xxxxxxxxxx
 
pd.Series(["2014-01-01","Hello","2015-01-01"])
Out[14]:
0    2014-01-01
1         Hello
2    2015-01-01
dtype: object




 






 


In [18]:
 
 
pd.date_range("2014-01-01",end="2014-01-24",freq="D")
Out[18]:
DatetimeIndex(['2014-01-01', '2014-01-02', '2014-01-03', '2014-01-04',
               '2014-01-05', '2014-01-06', '2014-01-07', '2014-01-08',
               '2014-01-09', '2014-01-10', '2014-01-11', '2014-01-12',
               '2014-01-13', '2014-01-14', '2014-01-15', '2014-01-16',
               '2014-01-17', '2014-01-18', '2014-01-19', '2014-01-20',
               '2014-01-21', '2014-01-22', '2014-01-23', '2014-01-24'],
              dtype='datetime64[ns]', freq='D')

 	




 





 




	 





 


With end method we can get range of dates in the past.
	





 




 




 



 



	 



 








Importing Stock data from yahoo finance.
 




 

	

 





 


	 






 




 



 

	
 	




	 







 






	 



 



	 
	



 



 




	 




 
	



 
	 

	


 




 

	




 



 

	

 





	Importing CSV File from the Internet 






 


	



 


Exporting File csv

 
	


 
 


Installing Excel Packages


 
 





	 





In [54]:
 
xxxxxxxxxx
 







dt2=pd.read_excel(r'C:\\Users\ASUS\Desktop\Pandas\\Data - Multiple Worksheets.xlsx', sheet_name=["Data 1","Data 2"])
In [55]:
 
xxxxxxxxxx
 
dt2
Out[55]:
{'Data 1':   First Name Last Name           City Gender
 0    Brandon     James          Miami      M
 1       Sean   Hawkins         Denver      M
 2       Judy       Day    Los Angeles      F
 3     Ashley      Ruiz  San Francisco      F
 4  Stephanie     Gomez       Portland      F,
 'Data 2':   First Name Last Name           City Gender
 0     Parker     Power        Raleigh      F
 1    Preston  Prescott   Philadelphia      F
 2    Ronaldo   Donaldo         Bangor      M
 3      Megan   Stiller  San Francisco      M
 4     Bustin    Jieber         Austin      F}



Exporting File to Excel 

 
	




In [72]:
 
 
boy=baby_name[baby_name["gndr"]=="MALE"]
In [73]:
 
xxxxxxxxxx
 
boy
Out[73]:
	brth_yr	gndr	ethcty	nm	cnt	rnk
In [77]:
 
 
excel_file=pd.ExcelWriter(r'C:\\Users\ASUS\Desktop\Pandas\\babyname.xlsm')
In [78]:
 
 
excel_file.save
Out[78]:
<bound method OpenpyxlWriter.save of <pandas.io.excel._openpyxl.OpenpyxlWriter object at 0x00000180EBE65DF0>>
In [ ]:
 
 

 












Charting plot with matplotlab

 







 

	
	




 



 

 







 

	

	




 



In [31]:
 
xxxxxxxxxx
 
bb["Close"]
Out[31]:
Date
2014-12-31    10.98
2015-01-02    10.82
2015-01-05    10.76
2015-01-06    10.62
2015-01-07    10.67
              ...  
2019-12-24     6.36
2019-12-26     6.43
2019-12-27     6.45
2019-12-30     6.42
2019-12-31     6.42
Name: Close, Length: 1259, dtype: float64
In [32]:
 
xxxxxxxxxx
 
def rank_performance(stock_price):
    if stock_price <=10:
        return "Poor"
    elif stock_price<=50:
        return "Satisfactory"
    else:
        return "Stellar"
    
In [33]:
 
xxxxxxxxxx
 
bb["Close"].apply(rank_performance)
Out[33]:
Date
2014-12-31    Satisfactory
2015-01-02    Satisfactory
2015-01-05    Satisfactory
2015-01-06    Satisfactory
2015-01-07    Satisfactory
                  ...     
2019-12-24            Poor
2019-12-26            Poor
2019-12-27            Poor
2019-12-30            Poor
2019-12-31            Poor
Name: Close, Length: 1259, dtype: object


	In [35]:
 
 
bb["Close"].apply(rank_performance).value_counts()
Out[35]:
Poor            925
Satisfactory    334
Name: Close, dtype: int64




In [41]:
 
 

In [39]:
 
 
bb["Close"].mean()
Out[39]:
8.700198576505265
In [40]:
 
 
def rank_performance(stock_price):
    if stock_price <=8.700198576505265:
        return "Below Average"
    else:
        return "Above Average"
   






bb["Close"].apply(rank_performance)
Out[41]:
Date
2014-12-31    Above Average
2015-01-02    Above Average
2015-01-05    Above Average
2015-01-06    Above Average
2015-01-07    Above Average
                  ...      
2019-12-24    Below Average
2019-12-26    Below Average
2019-12-27    Below Average
2019-12-30    Below Average
2019-12-31    Below Average
Name: Close, Length: 1259, dtype: object



In [44]:
 
xxxxxxxxxx
 
bb["Close"].apply(rank_performance).value_counts()
Out[44]:
Below Average    663
Above Average    596
Name: Close, dtype: int64



 



	return "Above Average"
   
In [46]:
 
 
bb["Close"].apply(rank_performance).value_counts().plot(kind="pie",legend=True)
Out[46]:
<AxesSubplot:ylabel='Close'>



 













To generate an array of 1000 rows and 50 columns after having random number between 0 to 100.
	 





 
	



 
	















	SETTING FOR ROWS AND COLUMNS

 





	 



 





	 





 

	
